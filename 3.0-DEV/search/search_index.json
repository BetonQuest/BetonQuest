{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"Unique Quests and Storylines <ul> <li>Quest Tools: Logs, Menus, Items, Notifications</li> <li>Conversations: Interactive, Multi-Path, Translatable</li> <li>Extensive 38 Plugin Integrations, API</li> <li>Free and Open Source</li> </ul>        Quick start             Read more         Sorry, your browser doesn't support embedded videos."},{"location":"#what-server-owners-say","title":"What server owners say","text":"<p>Sometimes, user reviews describe a plugin better than the author can:</p> <p>Reviews</p> EsronAzfalothMaverick2020Caleb_Britannia <p>Quick Facts: <ul> <li> Amazing system for Quests, no matter if they are simple or complex.</li> <li> Easy to make Daily/repeatable quests.</li> <li> Great Discord community and staff support.</li> <li> Can be used to replace every GUI plugin we've had before.</li> <li> Can be used for a ton of stuff other than quests if you learn the systems.</li> </ul></p> <p>The story: I've worked with Beton for a year now, and probably (guessing) worked with it for 500 hours. We've used it on both a survival and a MMORPG server.</p> <p>I have 0 complaints. It's well thought through and getting better by the day. The day BetonQuest 2.0 (you can do like me and use the dev version) comes out, will be a beautiful day for all server owners.</p> <p>/Fred, Esron, Znitsarn.</p> <p>This is a brilliant plugin. It is so much more than just a plugin for quests. It is a set of tools that allow you to do so many things. I feel like this is a must have for any server that wants to add functionality to citizens NPCs even without using it for making quests. The possibilities are endless. You can have very immersive complex conversations that can be used to explain server functions, create shops, teleport players, make portals etc. [...] The possibilities are limited only by what you can think of doing. I started out looking for a quest plugin and after using this, I wished I had used it before just for the sake of the immersion it adds. [...]</p> <p>This is the most comprehensive quest plugin I have seen. I am still amazed this is free. The devs are extremely active, continue to make new things available, and have a clear roadmap to offering even more features. I am in awe of their skills and dedication.  I am truly blown away by the support team. They are the absolute best. They answer things quickly and thoroughly. I really cannot say enough good things about this quest plugin!</p> <p>This is actually my second review after 2 years which goes to show the complexity and skill behind this plugin. Many reviews have stated many times how powerful, complex and overall useful this plugin is. Comparing it to other quest plugins is simply not good because its so powerful I would put it on the level on a minor scripting language. The versatility and scale of this plugin has seen it develop to the backend of some powerful RPG servers! [...]  This is all taken however apart from the most important and influential part of the plugin and that is the developers. I have seen an entire range of developers come and go from the OG Co0sh to the current team and all of them have given it 110%. From releasing patches on the same day bugs have been reported to spending hours and hours in calls with users it is impossible not to realise how much the developers care about the plugin and all its users. Their care and hundreds of hours of dedication are shown in this insanely powerful and (mostly) bug free quest plugin. Anyone who aspires to give their players a  proper RPG experience needs to check this plugin out. Quest on!!</p>"},{"location":"#betonquest-alternatives","title":"BetonQuest Alternatives","text":"<p>Feature</p> BetonQuest Quests PikaMug Quests LMBishop NotQuests BeautyQuests TypeWriter BattlePass ProQuest Spigot Rating Loading... Loading... Loading... Loading... Loading... Loading... Loading... Loading... Free   (14.99\u20ac)   (14.99$) OpenSource API <sup>1</sup> <sup>1</sup> Version Support 1.18 - 1.21 1.8 - 1.21 1.8 - 1.21 1.17 - 1.21 1.8 - 1.21 1.21 1.17-1.21 1.7 - 1.21 Integrated Plugins 38 12 27 22 31 3 40 1 BetonQuest integration <sup>5</sup> In-game Editor <sup>6</sup> Chat &amp; GUI(Paid) Chat GUI GUI GUI Web Editor Database Support SQLite &amp; MySQL MySQL File &amp; MySQL SQLite &amp; MySQL MySQL File File &amp; MySQL SQLite &amp; MySQL BungeeCord Support Organized File Structure <p>Unique Features</p> Multi-Path Conversations <sup>3</sup> Quest Journal Custom Menus <sup>2</sup> Quest Items Backpack for Quest Items Per Player Translations Clientside NPCs Clientside Players Clientside Holograms Clientside Particles <sup>4</sup> <p>Use this table with caution, it might be outdated (last update 17<sup>th</sup> of January 2025). Please let us know if there is any outdated information.</p> <p>Major Difference</p> <p>BetonQuest is not only a quest plugin. All features and systems work outside of quests too. This makes it possible to write scripts that go far beyond what other quest plugins can do. This strength is amplified by a large number of integrations for other plugins.</p> <p>For many users, BetonQuest does not only power quests but also works as their servers' backbone that links all kinds of plugins together. Most competitors are \"just\" quest plugins and therefore limited to simple tasks. That's why BetonQuest skills are worth twice as much since you are not limited to writing quests!  </p> <p></p>"},{"location":"#betonquest-vs-script-plugins","title":"BetonQuest vs. Script Plugins","text":"<p>While BetonQuest can be used for scripting, it stays a quest plugin. It's a compromise, the best of both worlds. Plugins with a full focus on scripting - such as Denizen and Skript are suited better in certain scenarios. Many users even use these alongside BetonQuest as there is integration for such scripting plugins.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#beautiful-multi-path-conversations","title":"Beautiful multi-path Conversations","text":"<p>   Sorry, your browser doesn't support embedded videos. </p> <p>Players can have immersive conversation with NPC's by utilizing BetonQuests Multi-Path-Conversation System. Questers can freely define multi-path stories, narrated with NPC conversations, and with multiple endings that affect a player's gameplay. Questers can also choose between five different styles to display their conversations.</p>"},{"location":"#endless-integrations","title":"Endless Integrations","text":"<p>BetonQuest supports 38 other plugins, ranging from standard plugins like WorldGuard/WorldEdit and Citizens to more advanced ones such as EffectLib. It also offers support for other quest plugins, so you can just keep your old quests and create further additions to your quest lines based upon the progress in your old plugin. If just Beton isn't enough you can always just hook into Skript or Denizen too.</p> <p>See the full list of integrations here.</p>"},{"location":"#custom-notification-system","title":"Custom Notification System","text":"<p>   Sorry, your browser doesn't support embedded videos. </p> <ul> <li> <p>Questers can make use of BetonQuests notifyIO system that provides access to all of Minecraft's GUI elements to display   notifications.</p> </li> <li> <p>Provide NPC conversations in any language. Each player can set his own language which means that - if translated - all   conversations will be in the players native language.</p> </li> <li> <p>You can give players information about where they are in a quest using the \"Journal\". The Journal is a book in which   you can write content based on the players actions.</p> </li> </ul>"},{"location":"#player-npc-and-hologram-hider","title":"Player, NPC and Hologram Hider","text":"<p>   Sorry, your browser doesn't support embedded videos. </p> <p>BetonQuest allows you to hide players from each other based on conditions. This can be used to create story-regions where players are always alone. It's also possible to hide entire Citizens NPC's and DecentHolograms/HolographicDisplays holograms.</p>"},{"location":"#training-included","title":"Training included","text":"<p>This website provides in-depth learning material for your staff which teaches them all BetonQuest basics. It also has guides on related topics such as the setup of a local test server, so your main server's stability will not be threatened by staff learning / developing quests.</p> <p></p>"},{"location":"#examples","title":"Examples","text":"<p>Our community created a lot of cool stuff! Some members even made machines with this quest plugin - that really shows that your imagination is the only limit. Take a look at this handpicked selection:</p>  Wandering Trader by Ley         Sorry, your browser doesn't support embedded videos.          The trader appears for a few minutes and then leaves until the next day.     Bookshop by Esron         Sorry, your browser doesn't support embedded videos.          A daily quest with NPC voice acting using OpenAudioMC.     Menu by Esron         Sorry, your browser doesn't support embedded videos.          A server / quest menu made with the menu feature.     Bards by Esron         Sorry, your browser doesn't support embedded videos.          A bar setup with musicians and other NPCs. The player can use the conversation system to select a song.  The audio is made with OpenAudioMC.     Water Well by Titanium        Sorry, your browser doesn't support embedded videos.          A functional well as part of a quest.     Elevator by Titanium         Sorry, your browser doesn't support embedded videos.          A functional elevator.     Corpse Quest by Titanium         Sorry, your browser doesn't support embedded videos.          The player needs to collect corpses."},{"location":"#donate-money","title":"Donate Money","text":"<p>We are part of the non-profit Open Source Collective! This means all donations must be re-invested into the project. Thanks you for making this project possible!</p> <p>Donations will be used for our monthly costs (server, domain, software licences) and developer commissions to speed up the development. </p> <p></p>"},{"location":"#our-community-sponsors","title":"Our Community Sponsors","text":"<ol> <li> <p>Private API, this means that other plugins cannot add support.\u00a0\u21a9\u21a9</p> </li> <li> <p>Limited to Quest related context.\u00a0\u21a9</p> </li> <li> <p>There are conversations, but they are not multi-path.\u00a0\u21a9</p> </li> <li> <p>Only particles above NPCs and a limited configuration.\u00a0\u21a9</p> </li> <li> <p>Integration from the BetonQuest side.\u00a0\u21a9</p> </li> <li> <p>BetonQuest's scripting is too complex for the limited possibilities of in-game editing.\u00a0\u21a9</p> </li> </ol>"},{"location":"API/BukkitConfigurations/","title":"Bukkit Configurations","text":"API State: <code>Stable</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p> <p>We implemented multiple different <code>org.bukkit.configuration.ConfigurationSection</code>'s and <code>Configuration</code>'s to make it  easier to work with configurations and to implement some new features.</p> <p>We have the following implementations:</p>"},{"location":"API/BukkitConfigurations/#decorator","title":"Decorator","text":"<p>Basically a wrapper for a <code>ConfigurationSection</code> simply delegating all calls to the wrapped section. In that way, you can override specific methods without having to override all methods for custom implementations. Mainly used for internal purposes, but can be used to create even more custom implementations.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.ConfigurationSectionDecorator</code></li> </ul>"},{"location":"API/BukkitConfigurations/#handle","title":"Handle","text":"<p>Based on <code>Decorator</code>. Handles any modifications to the configuration and wraps all values that are an instance of <code>ConfigurationSection</code> with the same implementation. This should prevent any modifications to the configuration that are not done through the handler. This is the implementation actually used to create more custom implementations.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.handle.HandleModificationConfiguration</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.handle.HandleModificationConfigurationSection</code></li> </ul>"},{"location":"API/BukkitConfigurations/#unmodifiable","title":"Unmodifiable","text":"<p>Based on <code>Handle</code>. Makes the configuration unmodifiable. This means no values can be added, removed or modified. Also, no new Sections can be created. All modifications throw a <code>UnsupportedOperationException</code>.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.unmodifiable.UnmodifiableConfiguration</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.unmodifiable.UnmodifiableConfigurationSection</code></li> </ul>"},{"location":"API/BukkitConfigurations/#lazy","title":"Lazy","text":"<p>Based on <code>Handle</code>. This configuration does only create a MemorySection that is not registered to the parent, until a value is set. This means it can be read without creating a new section in the parent configuration.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.lazy.LazyConfigurationSection</code></li> </ul>"},{"location":"API/BukkitConfigurations/#fallback","title":"Fallback","text":"<p>This is a configuration buildup from two <code>ConfigurationSection</code>'s. One is the original where all modifications are done, and the other one is the fallback configuration. The fallback configuration is used to look up values that are not contained in the original configuration. This is useful for default values or global configurations.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.fallback.FallbackConfiguration</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.fallback.FallbackConfigurationSection</code></li> </ul>"},{"location":"API/BukkitConfigurations/#multi","title":"Multi","text":"<p>This is not a ConfigurationSection of bukkit, it is an additional interface. This interface adds methods to manage configs that are build from multiple <code>ConfigurationSection</code>'s. The MultiSectionConfiguration is an implementation of this interface that implements a merging method that does not allow any conflicting values resulting in a <code>KeyConflictException</code>. If mismatching states or settings are found in one <code>ConfigurationSection</code> a <code>InvalidSubConfigurationException</code> is thrown.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.multi.MultiConfiguration</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.multi.MultiSectionConfiguration</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.multi.KeyConflictException</code></li> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.multi.InvalidSubConfigurationException</code></li> </ul>"},{"location":"API/BukkitConfigurations/#multi-fallback","title":"Multi Fallback","text":"<p>This is a Fallback configuration that also implements the MultiConfiguration interface. In this way, a multi configuration can have the advantage of a fallback configuration to look up values that are not contained in the original configuration.</p> <ul> <li><code>org.betonquest.betonquest.api.bukkit.config.custom.multi.fallback.MultiFallbackConfiguration</code></li> </ul>"},{"location":"API/Configuration-Files/","title":"Configuration Files","text":"API State: <code>Draft</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p> <p>ServicesManager API Classes</p> <ul> <li><code>org.betonquest.betonquest.api.config.ConfigAccessorFactory</code></li> <li><code>org.betonquest.betonquest.api.config.ConfigAccessor</code></li> <li><code>org.betonquest.betonquest.api.config.FileConfigAccessor</code></li> </ul> <p>BetonQuest provides the <code>ConfigAccessor</code>, a simple API to load, reload, save and delete configuration files. It extends <code>ConfigurationSection</code> and therefore also provides the well-known Bukkit methods to access and modify the configuration. Additionally, it takes care of patching the config whenever syntax or content changes need to be made.</p>"},{"location":"API/Configuration-Files/#loading-a-config","title":"Loading a config","text":"<p>By creating a ConfigAccessor you either load an existing config or create the default one from your plugin's resources. Here is an example method that loads a <code>config.yml</code> file from your plugin's resources: <pre><code>public void loadPluginConfig(Plugin plugin, ConfigAccessorFactory configAccessorFactory) { //(1)!\n    File targetConfigFile = new File(plugin.getDataFolder(), \"config.yml\"); //(2)!\n    String sourceResourceFile = \"config.yml\"; //(3)!\n\n    ConfigAccessor config1 = configAccessorFactory.create(targetConfigFile, plugin, sourceResourceFile);\n    // or\n    ConfigAccessor config2 = configAccessorFactory.createPatching(targetConfigFile, plugin, sourceResourceFile);\n}\n</code></pre></p> <ol> <li>Inject the <code>Plugin</code> and the <code>ConfigAccessorFactory</code>, obtained via the ServicesManager, see the Obtaining API page.</li> <li>This is the location the config will be saved to. In this case it's a file named \"config.yml\" in your plugin's folder.</li> <li>This is the name of the resource file in your plugin's resources. Here is is also \"config.yml\" but it could be different.</li> </ol> <p>The <code>create</code> method is overloaded. One only to access a configuration file from the resources and one to only load an actual file. And one more to a file from the resources and save it to the file system. None of this methods will patch the config file.</p> <p>If you want to patch the config file, you can use the <code>createPatching</code> method. This will load the config file and apply all patches that are needed. Also this method is overloaded and has a variant to use custom patches. </p>"},{"location":"API/Configuration-Files/#working-with-the-configaccessor","title":"Working with the ConfigAccessor","text":"<p>The <code>ConfigAccessor</code> extends <code>ConfigurationSection</code> and therefore provides all known Bukkit methods to access and modify the configuration. You can reload, save and delete the configuration by calling it's corresponding <code>reload()</code>, <code>save()</code> and <code>delete()</code> methods.</p> <p>Make sure to add a <code>configVersion</code> key with an empty string as it's value when adding a new config resource file, that should get patched.</p> Example config.yml<pre><code>configVersion: \"\"\nlanguage: en\n# ...\n</code></pre> <p>The patcher will then automatically set the version to the newest available patch version. This frees you from the hassle of updating the <code>configVersion</code> key in the default resource file every time you add a patch.</p> <p>Reloading Behaviour</p> <p>When reloading the <code>ConfigAccessor</code>, it loads a new <code>ConfigurationSection</code> from the related file and replaces the old root. This means that all references to old child <code>ConfigurationSection</code> in your code will be outdated and need to be updated. Therefore, the best way to work with the <code>ConfigAccessor</code> is to pass it to your classes. Don't pass its children. While querying the <code>ConfigAccessor</code> you can use child <code>ConfigurationSection</code> as usual, just don't store them.</p>"},{"location":"API/Configuration-Files/#updating-configurations","title":"Updating Configurations","text":"<p>When you just want to add a new option to the config, you can simply add it to your config's resource file. It will  automatically be added to the users existing config. However, if you want to edit existing options, you need to use the config patcher.</p> <p>The config patcher automatically updates all configs loaded using the <code>ConfigAccessor</code> APIs <code>createPatching</code> methods. This is needed when changes are made to the existing config format. This patcher only works on configuration files! It's not used for files that contain quests as these should not be loaded with the <code>createPatching</code> methods. The patching progress is configured in a dedicated patch file per config file.</p>"},{"location":"API/Configuration-Files/#the-patch-file","title":"The Patch File","text":"<p>Whenever a resource file is loaded using BetonQuest's <code>createPatching</code> method, a \"resourceFileName.patch.yml\" file  is searched in the same directory the resource file is located. It contains the configuration for all patches that need to be applied. Each patch contains configurations for \"transformers\" that apply changes to the resource file before it's loaded. Let's take a look at an example:</p> config.patch.yml<pre><code>2.0.0.1: #(1)!\n  - type: SET #(2)!\n    key: defaultConversationColor\n    value: BLUE\n  - type: REMOVE\n    key: hook.mmocore\n1.12.9.1:\n  - type: LIST_ENTRY_ADD #(3)!\n    key: cmdBlacklist\n    entry: teleport\n</code></pre> <ol> <li>These transformers will be applied for a config on any version older than 2.0.0-CONFIG-1</li> <li>This is the <code>SET</code> transformer. It will set <code>defaultConversationColor</code> to <code>BLUE</code>.</li> <li>This is the <code>LIST_ENTRY_ADD</code> transformer. It will append <code>teleport</code> to the list with the key <code>cmdBlacklist</code>.</li> </ol> <p>All patches that are newer than the configs current version are applied, starting with the oldest one.    </p>"},{"location":"API/Configuration-Files/#config-versions","title":"Config Versions","text":"<p>The versions in the patch file have four digits (<code>1.2.3.4</code>). The first three are the semantic version of the BetonQuest  version that this patch updates the config to. The last digit is used to version multiple patches during the development phase of a semantic versioning release. </p> <p>The config's version is saved in each config as the value of the <code>configVersion</code> key. It is automatically set by the patcher. The version format is slightly different from the patch file - <code>1.2.3-CONFIG-4</code> in the config is <code>1.2.3.4</code> in the patch file .</p> <p>Example development cycle:</p> <ul> <li><code>2.0.0</code> is in development...<ul> <li>A change to the config is introduced in 2.0.0-DEV-45  <code>configVersion: \"2.0.0-CONFIG-1\"</code></li> <li>Another change to the config is introduced in 2.0.0-DEV-132  <code>configVersion: \"2.0.0-CONFIG-2\"</code></li> <li><code>2.0.0</code> is released. Therefore <code>2.0.0-CONFIG-2</code> becomes the final config version of <code>2.0.0</code>.</li> </ul> </li> <li><code>2.0.1</code> is in development...<ul> <li>A change to the config is introduced  <code>configVersion: \"2.0.1-CONFIG-1\"</code></li> <li><code>2.0.1</code> is released. Therefore <code>2.0.1-CONFIG-1</code> becomes the final config version of <code>2.0.1</code>.</li> </ul> </li> <li><code>2.0.2</code> is in development...<ul> <li>No changes to the config are introduced.</li> <li><code>2.0.2</code> is released. <code>2.0.1-CONFIG-1</code> is still the config version of the <code>2.0.2</code> release as no changes have been     introduced to the config.</li> </ul> </li> </ul> <p>This is how the patch file would be changed for each dev build:</p> 2.0.0-DEV-452.0.0-DEV-1322.0.1-DEV-12.0.2-DEV-1 config.patch.yml<pre><code>2.0.0.1: #(1)!\n  - type: SET\n    key: journal.custom_model_data\n    value: -1\n</code></pre> <ol> <li>Config Version 1 of 2.0.0.</li> </ol> config.patch.yml<pre><code>2.0.0.2: #(2)!\n  - type: SET\n    key: hook.decentholograms\n    value: true\n2.0.0.1: #(1)!\n  - type: SET\n    key: journal.custom_model_data\n    value: -1\n</code></pre> <ol> <li>Config Version 1 of 2.0.0.</li> <li>Config Version 2 of 2.0.0. Multiple config versions per release are needed to auto-update the configs    of dev builds users.</li> </ol> config.patch.yml<pre><code>2.0.1.1: #(3)!\n  - type: SET\n    key: hook.cmi\n    value: true\n2.0.0.2: #(2)!\n  - type: SET\n    key: hook.decentholograms\n    value: true\n2.0.0.1: #(1)!\n  - type: SET\n    key: journal.custom_model_data\n    value: -1\n</code></pre> <ol> <li>Config Version 1 of 2.0.0.</li> <li>Config Version 2 of 2.0.0. Multiple config versions per release are needed to auto-update the configs    of dev builds users.</li> <li>Config Version 1 of 2.0.1.</li> </ol> config.patch.yml<pre><code># As no changes were made to the config in 2.0.2 no new config version was introduced.\n2.0.1.1: #(3)!\n  - type: SET\n    key: hook.cmi\n    value: true\n2.0.0.2: #(2)!\n  - type: SET\n    key: hook.decentholograms\n    value: true\n2.0.0.1: #(1)!\n  - type: SET\n    key: journal.custom_model_data\n    value: -1\n</code></pre> <ol> <li>Config Version 1 of 2.0.0.</li> <li>Config Version 2 of 2.0.0. Multiple config versions per release are needed to auto-update the configs    of dev builds users.</li> <li>Config Version 1 of 2.0.1.</li> </ol> <p>The patcher will also automatically set the version to the newest available patch version if the <code>configVersion</code> is an empty  string. Therefore, setting the <code>configVersion</code> to an empty string in your config's resource file is recommended. The patcher will make sure it's always up-to-date. </p>"},{"location":"API/Configuration-Files/#transformer-types","title":"Transformer Types","text":"<p>By default, these transformers are available: </p>"},{"location":"API/Configuration-Files/#set","title":"SET","text":"<p>Sets a key to the given value. Already set keys will be overridden. Only use this to modify existing keys. Adding new ones can be done easier by just adding them to your config's resource file. New keys will then be added automatically to the users existing config.</p> Syntax<pre><code>- type: SET\n  key: journalLocked\n  value: true\n</code></pre>"},{"location":"API/Configuration-Files/#key_rename","title":"KEY_RENAME","text":"<p>Renames a key while preserving the value. Syntax<pre><code>- type: KEY_RENAME\n  oldKey: journalLocked\n  newKey: journalLockedOnSlot\n</code></pre></p>"},{"location":"API/Configuration-Files/#list_entry_add","title":"LIST_ENTRY_ADD","text":"<p>Adds an entry to the given list. The list will be created if it did not exist so far. Syntax<pre><code>- type: LIST_ENTRY_ADD\n  key: section.myList\n  entry: newEntry\n  position: LAST #(1)!\n</code></pre></p> <ol> <li>Can be <code>FIRST</code> or <code>LAST</code>. Default value is <code>LAST</code>.</li> </ol>"},{"location":"API/Configuration-Files/#list_entry_rename","title":"LIST_ENTRY_RENAME","text":"<p>Renames all list entries that match the given regex. Syntax<pre><code>- type: LIST_ENTRY_RENAME\n  key: section.myList\n  oldEntryRegex: currentEntry\n  newEntry: newEntry\n</code></pre></p>"},{"location":"API/Configuration-Files/#list_entry_remove","title":"LIST_ENTRY_REMOVE","text":"<p>Removes all list entries that match the given regex. Syntax<pre><code>- type: LIST_ENTRY_REMOVE\n  key: section.myList\n  entry: removedEntry\n</code></pre></p>"},{"location":"API/Configuration-Files/#value_rename","title":"VALUE_RENAME","text":"<p>Renames the key's value if it matches the given regex. Syntax<pre><code>- type: VALUE_RENAME\n  key: section.testKey\n  oldValueRegex: test\n  newValue: newTest\n</code></pre></p>"},{"location":"API/Configuration-Files/#value_replace","title":"VALUE_REPLACE","text":"<p>Replace a value part with another value. Syntax<pre><code>- type: VALUE_REPLACE\n  key: section.testKey\n  oldValue: test\n  newValue: newTest\n</code></pre></p>"},{"location":"API/Configuration-Files/#type_transform","title":"TYPE_TRANSFORM","text":"<p>Transforms the data type of an existing key into the given Java data type. This will result in a different formatting in the YAML file. E.g. strings will be surrounded by quotes, numbers and booleans won't. Syntax<pre><code>- type: TYPE_TRANSFORM\n  key: section.myKey\n  newType: string #(1)!\n</code></pre></p> <ol> <li>Either <code>string</code>, <code>integer</code>, <code>double</code>, <code>float</code> or <code>boolean</code>. </li> </ol>"},{"location":"API/Configuration-Files/#remove","title":"REMOVE","text":"<p>Removes both sections and keys (including all nested contents). Syntax<pre><code>- type: REMOVE\n  key: section.myList\n</code></pre></p>"},{"location":"API/Configuration-Files/#adding-additional-transformers","title":"Adding additional Transformers","text":"<p>If you want to use your own transformers, you can pass them to the <code>createPatching</code> method in the form of a <code>PatchTransformerRegistry</code>. Using this possibility will override the default transformers. You need to re-add them explicitly. Reading them can be simplified by using the class  <code>DefaultPatchTransformerRegistry</code>, however, this is internal code like the default patcher itself, so it's not recommended to use and also not guaranteed to work in future versions.</p> Anonymous PatchTransformerRegisterer Example<pre><code>public void loadPluginConfig(Plugin plugin, ConfigAccessorFactory configAccessorFactory) {\n    File targetConfigFile = new File(plugin.getDataFolder(), \"config.yml\");\n    PatchTransformerRegistry patchTransformerRegistry = new MyTransformerRegistry();\n    ConfigAccessor config = configAccessorFactory.createPatching(targetConfigFile, plugin, \"config.yml\", patchTransformerRegistry);\n}\n\npublic class MyTransformerRegistry extends DefaultPatchTransformerRegistry { //(1)!\n    public MyTransformerRegistry() {\n        super();\n        transformers.put(\"MY_TRANSFORMER\", new MyTransformer());\n    }\n}\n</code></pre> <ol> <li>extend the <code>DefaultPatchTransformerRegistry</code> if you want to use the default transformers as well and add more in the constructor.</li> </ol>"},{"location":"API/Instruction/","title":"Instruction","text":"API State: <code>Draft</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>"},{"location":"API/Instruction/#instruction-overview","title":"Instruction Overview","text":"<p>The Instruction refers to the user-defined string that specifies conditions, events, items, and similar elements.</p> <p>Info</p> <p>The <code>org.betonquest.betonquest.instruction</code> package contains the <code>Instruction</code> class and related objects.</p>"},{"location":"API/Instruction/#reading-the-instruction-object","title":"Reading the <code>Instruction</code> Object","text":"<p>The <code>Instruction</code> object is responsible for parsing the instruction string provided by the user and splitting it into  arguments. You can retrieve required arguments one at a time using the <code>next()</code> method or through a parser method like <code>get(Argument&lt;T&gt;)</code>. Required arguments are those specified at the beginning of an instruction string,  such as <code>add someTag</code> in the <code>tag</code> event.</p> <p>If an error occurs\u2014such as when there are no more arguments in the user's instruction or if the argument cannot  be parsed into the requested type\u2014the <code>Instruction</code> object will automatically throw a <code>QuestException</code>.</p> <p>You can also request optional arguments. If the instruction string contains an argument formatted as <code>arg:something</code>,  and you request the optional <code>arg</code>, it will return <code>something</code>. If there is no optional argument, it will return <code>null</code>.  You can safely pass this <code>null</code> to parser methods like <code>get(String, Argument&lt;T&gt;)</code>, which will not throw an error  but will simply return <code>null</code>.</p>"},{"location":"API/Instruction/#parser","title":"Parser","text":"<p>Instead of having separate methods like <code>getLocation()</code> or <code>getLocation(String)</code> that return a <code>VariableLocation</code>  object, as well as methods for fetching various <code>ID</code>s, you can provide these directly within the <code>get</code> method.</p> <p>All methods are overloaded to accept either a provided string as the first argument to parse, or, to fetch the next argument using <code>next()</code>, directly an argument.</p>"},{"location":"API/Instruction/#primitive-enum","title":"Primitive &amp; Enum","text":"<p>To retrieve a primitive number, you can use the <code>getInt()</code> and <code>getDouble()</code> methods. Parsing Enums is straightforward; simply pass the desired class into the <code>getEnum</code> method.  Ensure that the enum values adhere to the default Java naming conventions, meaning all letters used for the enum values must be uppercase.</p> Own parsing vs. getEnum(Enum)<pre><code>try {\n  EntityType entity = EntityType.valueOf(instruction.next().toUpperCase(Locale.ROOT));\n} catch (IllegalArgumentException e) {\n  throw new QuestException(\"Unknown mob type: \" + mob);\n}\n\nEntityType entity = instruction.getEnum(EntityType.class);\n</code></pre>"},{"location":"API/Instruction/#argument","title":"Argument","text":"<p>The <code>Argument&lt;T&gt;</code> interface provides a simple way to construct an object from a single string. Using <code>get(Argument&lt;T&gt;)</code> is equivalent to <code>Argument&lt;T&gt;.apply(next())</code>, but it allows for in-method construction  in <code>getList(Argument&lt;T&gt;)</code>, which splits the string by <code>,</code> and converts each part to the requested type <code>T</code>.</p> Getting a List of Primitives<pre><code>List&lt;String&gt; strings = instruction.getList(string -&gt; string);\nList&lt;Integer&gt; ints = instruction.getList(string -&gt; instruction.getInt(string, 0));\n</code></pre> Own parsing vs. getList(Argument)<pre><code>List&lt;EntityType&gt; entities = new ArrayList&lt;&gt;();\nfor (String mob : instruction.next().split(\",\")) {\n  entities.add(instruction.getEnum(mob, EntityType.class));\n}\n\nList&lt;EntityType&gt; entities = instruction.getList(mob -&gt; instruction.getEnum(mob, EntityType.class));\n</code></pre> <p>Warning</p> <p>Be cautious to use the method that accepts a string as the first argument within the lambda; otherwise,  the method will call <code>next()</code> for each split segment, (potentially) resulting in incorrect conversions.</p>"},{"location":"API/Instruction/#variableargument","title":"VariableArgument","text":"<p>The <code>VariableArgument</code> interface provides an easy way to parse variables (from the <code>instruction.variable</code> package)  by utilizing the constructor as a method reference (as shown in line 2 of the example below).</p> <p>You can create a location parser manually, but it's unnecessary since you can simply use the  <code>get(VariableLocation::new)</code> or <code>get(String, VariableLocation::new)</code> methods to obtain a <code>VariableLocation</code> object.  The former method is effectively <code>get(next(), VariableLocation::new)</code>.</p> Own parsing vs. get(VariableArgument)<pre><code>VariableLocation location = new VariableLocation(variableProcessor, instruction.getPackage(), instruction.next());\nVariableLocation location = instruction.get(VariableLocation::new);\n</code></pre> <p>Additionally, there are common non-standard constructor implementations in the <code>VariableArgument</code> that can also be  passed as arguments. The following example demonstrates how a number can be validated to ensure it is positive or zero.</p> Example for number validation<pre><code>VariableNumber number = instruction.get(VariableArgument.NUMBER_NOT_LESS_THAN_ZERO);\nVariableNumber number = instruction.get((variableProcessor, pack, input) -&gt;\n  new VariableNumber(variableProcessor, pack, input, value -&gt; {\n    if (value.doubleValue() &lt; 0) {\n      throw new QuestException(\"Value must be greater than or equal to 0: \" + value);\n    }\n  }));\n</code></pre> <p>Utilizing these various options simplifies the process of parsing, for instance, a list of <code>VariableLocation</code> objects:</p> Equivalant calls<pre><code>List&lt;VariableLocation&gt; locs = instruction.getList(instruction.next(), string -&gt; instruction.get(string, VariableLocation::new)); \nList&lt;VariableLocation&gt; locs = instruction.getList(string -&gt; instruction.get(string, VariableLocation::new)); \nList&lt;VariableLocation&gt; locs = instruction.getList(instruction.next(), VariableLocation::new); \nList&lt;VariableLocation&gt; locs = instruction.getList(VariableLocation::new); \n</code></pre> <p>Common implementations are also available within the <code>VariableArgument</code> interface:</p> Number above 0<pre><code>VariableNumber number = instruction.get(VariableArgument.NUMBER_NOT_LESS_THAN_ONE);\n</code></pre>"},{"location":"API/Instruction/#custom-parsing","title":"Custom Parsing","text":"<p>If your instruction is more complex and the <code>Instruction</code> class does not provide the necessary methods, you can still  parse the instruction string manually. The already split parts are accessible through the <code>getParts()</code> method,  and the raw instruction can be retrieved using the <code>toString()</code> method. </p> <p>Remember to throw a <code>QuestException</code> with an informative message if the instruction provided by the user is incorrect;  BetonQuest will handle these exceptions appropriately and display them in the console.</p>"},{"location":"API/Legacy-API/","title":"Legacy API","text":"<p>Warning</p> <p>All described API on this page will break in the future of BetonQuest. Main parts are already reworked in BetonQuest 2.0, other parts will mainly be reworked in 3.0 and 4.0 in the far future. All API on this page will get replacements, but there are none at the moment, so if you use this API, you will have to rewrite your code in the future. The documentation on this page may not be up to date and may not be complete anymore.</p> <p>If we change something we will update the JavaDocs, so make sure to check them out if something seems to be missing here. This is the case because we prefer to delete outdated content from this page instead of updating it. New APIs will instead get their own page.</p>"},{"location":"API/Legacy-API/#re-moved-methods-in-30","title":"(Re-)Moved Methods in 3.0","text":""},{"location":"API/Legacy-API/#using-quest-types","title":"Using Quest Types","text":"<p>The methods for using Conditions, Events and Objectives was moved into <code>BetonQuest.getInstance().getQuestTypeAPI()</code>.</p>"},{"location":"API/Legacy-API/#instruction","title":"Instruction","text":"<p>Hard coded get methods were removed in favor of a more dynamic approach.  Read how to use them in the Instruction Arguments section.</p>"},{"location":"API/Legacy-API/#variable-getting","title":"Variable getting","text":"<p>Creating and parsing variables is now done in the <code>VariableProcessor</code>. It is accessed from the BetonQuest instance with <code>#getVariableProcessor()</code>.</p>"},{"location":"API/Legacy-API/#profiles","title":"Profiles","text":"<p>Currently, profiles are in development. So at the moment you can use the <code>PlayerConverter</code> class to get a profile.</p>"},{"location":"API/Legacy-API/#base-concepts","title":"Base concepts","text":"<p>How to write and register new base concepts (events, conditions, objectives, variables) in BetonQuest.</p> <p>For Conditions, Events and Variables there is the new API available.</p>"},{"location":"API/Legacy-API/#writing-objectives","title":"Writing objectives","text":"<p>Objectives are more complicated because they use event handlers and they must store players' data. They extend <code>Objective</code> class. As always, you need to extract all data from supplied <code>Instruction</code> object in the constructor. Don't register listeners in the constructor!</p> <p>If your objective handles changing data (like amount of mobs left to kill) you should create a class extending <code>ObjectiveData</code>. For example <code>block</code> objective does need to store amount of blocks left to place/break, and it does that using \"BlockData\" class. In the constructor it receives three strings: data string, ID of the player and ID of the objective. The latter two are used by BetonQuest to correctly save and load the former one from the database.</p> <p>The data string should contains all the information you need in your objective. You must write a parser which will extract the information, methods used in the objective to alter the information, and override the <code>toString()</code> method in so it returns data string in the format parsable by your parser. Everytime the data in your object changes (like when killing a mob), you need to call <code>update()</code> method. It will save the data to the database.</p> <p>Now you should override <code>getDefaultDataInstruction()</code> method. It must return the default data instruction understandable by your parser. For example in <code>tame</code> objective it will return the amount of mobs to tame. If you don't use data objects, just return an empty string (not <code>null</code>, just <code>\"\"</code>).</p> <p>In order for your objective to use the data object you have created you need to set the <code>template</code> variable to this object's class. If you're not defining the data object (because you don't need to handle the changing data), you should set the <code>template</code> simply to <code>ObjectiveData.class</code>.</p> <p>Every time your objective accepts the player's action (for example killing the right mob in MobKill objective) it must be also verified with <code>checkConditions()</code> method. You don't want your objective ignoring all conditions, right? When you decide that the objective is completed you should call <code>completeObjective()</code> method. It will fire all events for you, so you don't have to do this manually.</p> <p><code>start()</code> and <code>stop()</code> methods must start objective's listeners and stop them accordingly. It's because the plugin turns the objective's listeners off if there are no players having it active. Here usually you will register/unregister listeners, but some objectives may be different. For example <code>delay</code> objective starts and cancels a runnable, instead of using listeners.</p> <p>If your objective has some properties (used in variables) you should override the <code>String getProperty(String property, String playerID)</code> method. At runtime, if anyone uses <code>%objective.yourObjective.theProperty%</code> variable, BetonQuest will call that method with <code>theProperty</code> keyword as the first argument. Using it you should parse the data of the objective and return it as a String. If the supplied property name is incorrect or there was an error during getting the value, return an empty String and optionally log an error (<code>LogUtils.getLogger().log(...)</code>).</p> <p>Objectives are registered the same way as conditions and events, using <code>registerObjective(String name, Class&lt;? extends Objective&gt;)</code> method.</p> <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>"},{"location":"API/Legacy-API/#firing-events","title":"Firing events","text":"<p>The plugin has a static method for firing events - <code>event(String playerID, EventID eventID)</code>.</p> <p>You can't fire an event directly using an instruction string.</p> Example<pre><code>final QuestPackage questPackage = Config.getPackages().get(\"myPackage\"); //(1)!\nfinal Profile playerProfile = BetonQuest.getInstance().getProfileProvider().getProfile(player); //(2)!\n\nBetonQuest.getInstance().getQuestAPI().event(playerProfile, new EventID(questPackage, eventID));\n</code></pre> <ol> <li>You can get the package from the <code>Config</code> class. It's a map of all packages, so you can get the one you need by its    name.</li> <li>You can get the player's profile from the <code>PlayerConverter</code> class. You can use the player object to obtain a players     profile.</li> </ol>"},{"location":"API/Legacy-API/#checking-conditions","title":"Checking conditions","text":"<p>BetonQuest has static boolean method <code>condition(String playerID, String conditionID)</code>. It works similarly as event method described above.</p>"},{"location":"API/Legacy-API/#starting-objectives","title":"Starting objectives","text":"<p>The <code>newObjective(String playerID, String objectiveID)</code> method will launch the objective from start. You can however use <code>resumeObjective(String playerID, String objectiveID, String instruction)</code> to pass your own <code>ObjectiveData</code> instruction to the objective. It will not be saved to the database, because it is assumed that the objective has just been loaded from it and it exists there without any change. You should save it manually.</p>"},{"location":"API/Legacy-API/#creating-additional-conversation-inputoutput-methods","title":"Creating additional conversation input/output methods","text":"<p>In order to register an object as the conversation input/output it needs to implement <code>ConversationIO</code> interface. The constructor will receive three arguments: Conversation object, playerID String and NPC name String. It needs to parse the required data here and register all needed listeners. The <code>setResponse(String response)</code> method will receive NPC's text from the conversation. The <code>addOption(String option)</code> method will be called by the conversation for each reply option for this NPC text. The object must store all this data and when <code>display()</code> is called, it must use it to display the player the output. When it detects that the player chose an answer, it should pass it to the conversation using <code>Conversation.passPlayerAnswer(int number)</code> method. The integer is the number of the answer, starting at 1. <code>clear()</code> method will be called at the beginning of the new conversation cycle. It should clear all the previous options, so they do not overlap. <code>end()</code> method will be called when the conversation ends, and it should unregister all listeners. You can also call that message when you detect that the player forced conversation ending (for example by moving away from the NPC). Remember to notify the conversation about that using <code>Conversation.end()</code>.</p> <p>Registering the conversation inputs/outputs is done in the same way as objectives, events and conditions, through <code>BetonQuest.registerConversationIO(String name, Class&lt;? extends ConversationIO&gt;)</code> method.</p>"},{"location":"API/Legacy-API/#listening-to-betonquest-bukkit-events","title":"Listening to BetonQuest (Bukkit) events","text":"<p>BetonQuest exposes some of its actions as Bukkit events. You can find these events in <code>org.betonquest.betonquest.api.bukkit.event</code> package. Use them as you would use any other Bukkit event.</p> <p>If you need any additional events just open an issue or pull request on GitHub.</p>"},{"location":"API/Logging/","title":"Logging","text":"API State: <code>Stable</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p> <p>ServicesManager API Classes</p> <ul> <li><code>org.betonquest.betonquest.api.logger.BetonQuestLoggerFactory</code></li> </ul> <p>This page shows you everything you need to know about the BetonQuest logger, no matter if you are working on BetonQuest  itself or an integration / addon.</p>"},{"location":"API/Logging/#why-a-custom-logger","title":"Why a custom Logger?","text":"<p>The main advantage is that it is easier to use. It provides an easy interface that enables custom logging features and respects our logging conventions.  This helps to provide a great user experience and keeps the log consistent.</p>"},{"location":"API/Logging/#advantages","title":"Advantages","text":"<p>These features were mainly made for BetonQuest, but are also very useful for 3<sup>rd</sup> party integrations. </p> In-Game Logging <p>Users can see all log messages send, using the BetonQuestLogger in-game. Additionally, these messages can be filtered by quest package and log level.</p> Debug Logging <p>BetonQuest has its own <code>log</code> folder in which a <code>latest.log</code> file is written if debug logging is enabled. It contains our own log messages and messages from 3<sup>rd</sup> party integrations. Additional debug messages are logged next to everything that is displayed on the console already. You can send debug log messages directly to that log when you use the BetonQuestLogger in your addon. This will make it a lot easier to see how your plugin integrates with BetonQuest's mechanics if a bug occurs.</p> Log History <p>It happens very often that a user experiences a bug while debug logging is not enabled. We keep the last <code>x</code> configured minutes of the debug log history saved in memory. Therefore, the history will be written to <code>latest.log</code> once you enable \"Debug Logging\" via command. </p> Logger Topics <p>The BetonQuestLogger supports topics, which give your log messages a prefix like <code>(Database)</code>. You can use a topic for each class or for each BetonQuestLogger instance. Topics are supposed to give important log messages extra attention by making them stand out. The naming convention is to use PascalCase for topics.</p>"},{"location":"API/Logging/#obtaining-a-betonquestlogger","title":"Obtaining a BetonQuestLogger","text":"<p>Use the <code>BetonQuestLoggerFactory.create()</code> method to obtain a new BetonQuestLogger instance: <pre><code>BetonQuestLoggerFactory loggerFactory; //(1)!\nBetonQuestLogger logger = loggerFactory.create(MyFeature.class);\n</code></pre></p> <ol> <li>Obtained via the ServicesManager, see the Obtaining API page.</li> </ol> <p>Getting the logger in a class that extends <code>Plugin</code></p> <p>A class extends <code>Plugin</code> can not get an injected <code>BetonQuestLogger</code> instance, and can also not use the above <code>create</code> method. Therefore, you need to create the logger instance in the <code>onEnable()</code> method instead like this:</p> <pre><code>public class BetonQuestAddon extends JavaPlugin {\n\n    private BetonQuestLoggerFactory betonQuestLoggerFactory; \n    private BetonQuestLogger log;\n\n    @Override\n    public void onEnable() {\n        betonQuestLoggerFactory = Bukkit.getServicesManager().load(BetonQuestLoggerFactory.class);\n        log = betonQuestLoggerFactory.create(this);\n    }\n}\n</code></pre> <code>BetonQuestLoggerFactory</code> additional background implementation information <p>As the BetonQuestLoggerFactory is a service, it is not guaranteed that the instance you get is the one BetonQuest created by default. But here we explain the behavior of the default BetonQuestLoggerFactory.</p> <p>First there is the <code>DefaultBetonQuestLoggerFactory</code> class, which is the default implementation of the <code>BetonQuestLoggerFactory</code> interface. It simply creates a child logger for the given class using the Logger of your plugin. This is done by checking which plugin loaded the class.</p> <p>This default implementation is wrapped into the <code>CachingBetonQuestLoggerFactory</code>. This class can be used to cache any implementation of the <code>BetonQuestLoggerFactory</code> interface. It returns always the same instance for the same class. There is one special behavior if the BetonQuestLogger is created with a topic.  In that case the <code>CachingBetonQuestLoggerFactory</code> will create a new instance for each different topic, but it will still cache the instances for the same topic or without a topic.</p>"},{"location":"API/Logging/#logging-with-topics","title":"Logging with Topics","text":"<p>This is useful if you want to give your log messages a prefix like <code>(Database)</code>. Mainly PascalCase should be used for topics and they should be short and meaningful to the user. </p> <pre><code>BetonQuestLoggerFactory loggerFactory;\nBetonQuestLogger logger = loggerFactory.create(MyFeature.class, \"MyCustomTopic\");\n</code></pre>"},{"location":"API/Logging/#using-the-betonquestlogger","title":"Using the BetonQuestLogger","text":"<p>The BetonQuestLogger has a bunch of methods for all use cases. Its JavaDocs explain when and how to use these. Make sure to give the JavaDocs a quick read!</p> <p>The usage might look like this: <pre><code>logger.info(\"Hello Log!\");\n</code></pre></p>"},{"location":"API/Logging/#method-overview","title":"Method Overview","text":"<p>All methods come in multiple variants. Always provide a package if possible, as this allows the user to filter log messages.</p> Name Use Case Example  Debug Used to display internal states or events that may be beneficial for bug-fixing. These messages are only be visible in the debug log. An event has been fired.  Info Use this for normal log information in the server's console. A new integration was successfully hooked.  Warning You can provide useful information how to fix the underlying problem. The user wrote an event with syntax errors.  Error The underlying problem affects the servers security or functionality. Usage is also allowed if you don't know how the user can fix the underlying problem. An error occurred while loading an integration.  Report Exception Only use this in cases that should never occur and indicate an error that must be reported to the projects issue tracker. You need to catch an exception that you know should never occur unless something is horribly wrong."},{"location":"API/Obtaining-API/","title":"Obtaining API","text":"API State: <code>Draft</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p> <p>To obtain the API or a part of the API there are currently two ways, the new way and the legacy way.</p>"},{"location":"API/Obtaining-API/#obtaining-the-api","title":"Obtaining the API","text":"<p>New method</p> <p>The new way is the recommended way to get the redesigned parts of the API. It is not yet available for all parts of the API, but will be in the future.</p> <p>The new API is designed to be modular and extensible. To obtain a module of the API you use the <code>org.bukkit.plugin.ServicesManager</code>. The <code>ServicesManager</code> is Bukkit API that allows plugins to provide services to other plugins:</p> <p>Get a module<pre><code>BetonQuestLoggerFactory loggerFactory = getServer().getServicesManager().load(BetonQuestLoggerFactory.class);\n</code></pre> This can only be called after the <code>onEnable</code> method of BetonQuest has been called. This is usually the case when your plugin's <code>onEnable</code> method is called by Bukkit, assuming you defined a dependency on BetonQuest.</p> <p>BetonQuest always registers its default implementation with the <code>Lowest</code> ServicePriority. If you want to override a module you can register your own implementation with a higher priority. You also need to register your implementation before the <code>onEnable</code> method of BetonQuset is called, so usually in the <code>onLoad</code> method of your plugin: Register a module<pre><code>getServer().getServicesManager().register(BetonQuestLoggerFactory.class, new MyLoggerFactory(), this, ServicePriority.Normal);\n</code></pre></p>"},{"location":"API/Obtaining-API/#legacy-api","title":"Legacy API","text":"<p>Old method</p> <p>The legacy API is how you could interact with BetonQuest in the past before the API was redesigned. For most systems that we haven't been able to improve, it is still the only option. While it will still be available for the foreseeable future, you should not use it when writing new code working with API that has already been redesigned.</p> <p>The old API uses the <code>BetonQuest</code> class as the entry point. Most methods are static and can be accessed directly. For those methods that need to be called on a <code>BetonQuest</code> instance you can obtain it by calling the static <code>BetonQuest.getInstance()</code> method. </p> <p>All the old API is documented on the Legacy API page.</p>"},{"location":"API/Obtaining-API/#the-servicesmanager-hint","title":"The ServicesManager Hint","text":"<p>The following hint can be found on many API pages:</p> <p>ServicesManager API Classes</p> <ul> <li><code>org.betonquest.betonquest.api.logger.BetonQuestLoggerFactory</code></li> </ul> <p>It lists all interfaces that are related to the API described on that page. Every one of them can be obtained by using the <code>ServicesManager</code> as described below.</p>"},{"location":"API/Obtaining-API/#working-with-the-api","title":"Working with the API","text":"<p>We recommend that you inject instances you obtained from the <code>ServicesManager</code> into your classes when they need them. You might want to learn about \"Dependency Injection\" as a programming technique, but as a quick start here's a simple example:</p> <p>This plugin injects an instance of <code>BetonQuestLogger</code> that was created by a <code>BetonQuestLoggerFactory</code> into a class implementing some feature.</p> <pre><code>public class MyAddon extends JavaPlugin {\n    private BetonQuestLoggerFactory loggerFactory;\n\n    @Override\n    public void onEnable() {\n        loggerFactory = Bukkit.getServicesManager().load(BetonQuestLoggerFactory.class);\n        new MyFeature(loggerFactory.create(MyFeature.class));\n    }\n}\n\npublic class MyFeature {\n    private final BetonQuestLogger log;\n\n    public MyFeature(final BetonQuestLogger log) {\n        this.log = log;\n    }\n}\n</code></pre>"},{"location":"API/Overview/","title":"Overview","text":"<p>Work in Progress!  </p> <p>Both the plugin and the API are currently getting redesigned.</p> <p>Therefore, required docs and API's are likely missing and will be added one by one. Newly added API's are subject to change and will have an API state assigned to them.</p> <p>We appreciate any feedback! The old API page is still available and explains API that was not reworked yet.</p> API States <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>"},{"location":"API/Overview/#adding-betonquest-as-a-dependency","title":"Adding BetonQuest as a dependency","text":"<p>You can add BetonQuest as a dependency using your build system. Here is the config for Maven:</p> Add this to your repositories tag<pre><code>&lt;repository&gt;\n    &lt;id&gt;betonquest-repo&lt;/id&gt;\n    &lt;url&gt;https://nexus.betonquest.org/repository/betonquest/&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre> Add this to your dependencies tag<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.betonquest&lt;/groupId&gt;\n    &lt;artifactId&gt;betonquest&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"API/Overview/#ensuring-that-betonquest-is-loaded","title":"Ensuring that BetonQuest is loaded","text":"<p>Plugin Load Order</p> <p>BetonQuest must already be loaded by the Minecraft server when you access any API. If it isn't your code will fail hard with a <code>ClassNotFoundException</code>.</p> <p>Therefore, declare BetonQuest as a soft dependency or hard dependency inside your plugin's plugin.yml file. A hard dependency will prevent your plugin from loading if BetonQuest is not installed. If your plugin is just a  BetonQuest addon, you should use a hard dependency. If your plugin is a standalone plugin that can work without BetonQuest, you should use a soft dependency.</p> BetonQuest as a required dependencyBetonQuest as an optional dependency plugin.yml<pre><code>name: \"My BetonQuest Addon\"\ndepend:\n  - BetonQuest\n# ...\n</code></pre> plugin.yml<pre><code>name: \"My Standalone Plugin\"\nsoftdepend:\n  - BetonQuest\n# ...\n</code></pre>"},{"location":"API/Overview/#next-steps","title":"Next Steps","text":"<p>Now you should read how to Obtain the API.</p>"},{"location":"API/Schedules/","title":"Schedules","text":"API State: <code>Unfinished</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p> <p>If the native schedule types are not enough for you, this API enables you to create your own type.</p>"},{"location":"API/Schedules/#api-overview","title":"API Overview","text":""},{"location":"API/Schedules/#creating-a-new-schedule-type","title":"Creating a new schedule type","text":"<p>To implement a new schedule type you have to create both the Schedule and the Scheduler class.</p> About this guide <p>This guide will show you how to create a custom schedule that runs every <code>x</code> ticks, just like a redstone clock. While this does not make that much sense, it is a super simple example to show the principle.</p>"},{"location":"API/Schedules/#schedule-class","title":"Schedule Class","text":"<p>The schedule class must hold all the schedules' data. When reloading BetonQuest will try to parse all packages and construct new instances of this class.</p> <p>Have a look at this example to see how to implement your own schedule.</p> Example Schedule<pre><code>public class MyCustomSchedule extends Schedule/* (1)! */ {\n\n    private final int ticks, rebootSleep;\n\n    // (2)!\n    public MyCustomSchedule(ScheduleID scheduleID, ConfigurationSection instruction) throws QuestException { \n        super(scheduleID, instruction);\n        try {\n            ticks = Integer.parseInt(getTime()/* (3)! */);\n        } catch (NumberFormatException e) {\n            throw new QuestException(\"Time is not a number\");// (4)!\n        }\n\n        if (getCatchup() != CatchupStrategy.NONE) {// (5)!\n            throw new QuestException(\"Catchup \" + getCatchup() + \" is not supported by this schedule type\");\n        }\n\n        rebootSleep = instruction.getInt(\"options.rebootSleep\");// (6)!\n    }\n\n    public int getTicks() { return ticks; }\n    public int getRebootSleep() { return rebootSleep; }\n}\n</code></pre> <ol> <li> <p>You can extend either <code>Schedule</code> or <code>CronSchedule</code>.      The latter has already implemented all cron parsing logic.</p> </li> <li> <p>You need to define a Constructor that matches exactly this one. Otherwise BetonQuest can't parse your schedule!</p> </li> <li> <p><code>getTime()</code>/<code>super.time</code> provides the raw time string.     You'll need to parse it and add your own logic. In this example we just use it as interval of ticks.</p> </li> <li> <p>Make sure to handle all parsing errors &amp; thrown exceptions!    If a schedule can't be loaded due to an invalid instruction,    you should throw a <code>QuestException</code> that describes    the error.</p> </li> <li> <p>You'll have to implement your own handling of catchup strategies     in the <code>Scheduler</code> class. If you don't want that, you can add this check if a CatchupStrategy     was defined and throw an Exception.</p> </li> <li> <p>This is how you add custom options, if needed.</p> </li> </ol>"},{"location":"API/Schedules/#scheduler-class","title":"Scheduler Class","text":"<p>The scheduler will receive parsed schedules using <code>addSchedule(S)</code> and hold them in the <code>schedules</code> map. It should contain all the scheduling &amp; schedule execution logic. It is also responsible for catching up missed schedules, if they have a catchup strategy other than <code>NONE</code> defined.</p> <p>Here is a pretty basic example, that does not provide any catchup logic:</p> Example Scheduler<pre><code>public class MyCustomScheduler extends Scheduler&lt;MyCustomSchedule&gt;/* (1)! */ {\n\n    private List&lt;BukkitTask&gt; tasks;\n\n    @Override\n    public void start() {\n        super.start();// (2)!\n\n        tasks = new ArrayList&lt;&gt;();\n        for (MyCustomSchedule schedule : schedules.values()/* (3)! */) {\n            // (4)!\n            BukkitTask task = new BukkitRunnable() {\n                @Override\n                public void run() {\n                    executeEvents(schedule);\n                }\n            }.runTaskTimer(MyPlugin.getInstance()/* (5)! */, schedule.getRebootSleep(), schedule.getTicks());\n\n            tasks.add(task);// (6)!\n        }\n    }\n\n    @Override\n    public void stop() {\n        super.stop();// (7)!\n\n        for (BukkitTask task : tasks) {\n            task.cancel();// (8)! \n        }\n    }\n} \n</code></pre> <ol> <li> <p>Your scheduler must extend <code>Scheduler</code> class.     Between <code>&lt;&gt;</code> you have to put the name of your Schedule class.</p> </li> <li> <p>Always remember to call <code>super.start()</code> in your <code>start()</code> method!</p> </li> <li> <p>An easy way to iterate over all loaded schedules.</p> </li> <li> <p>Schedule your events to run when their time instruction says.</p> </li> <li> <p>Pass your plugin instance for the Bukkit-Scheduler.</p> </li> <li> <p>Keep a list of all your active schedules somewhere, so you can easily cancel them.</p> </li> <li> <p>Always remember to call <code>super.stop()</code> in your <code>stop()</code> method!</p> </li> <li> <p>Make sure to cancel all active schedules in <code>stop()</code> method.</p> </li> </ol>"},{"location":"API/Schedules/#register-the-type","title":"Register the type","text":"<p>To register the new schedule type to BetonQuest, use the following method: <pre><code>BetonQuest.getInstance().registerScheduleType(\"redstoneScheduler\"/* (1)! */,\n  MyCustomSchedule.class/* (2)! */,new MyCustomScheduler()/* (3)! */);\n</code></pre></p> <ol> <li> <p>The name of your new schedule type to use in configs.</p> </li> <li> <p>Your Schedule class.</p> </li> <li> <p>A new instance of your Scheduler.</p> </li> </ol> <p>You'll need to call it after BetonQuest was enabled.</p>"},{"location":"API/Writing-Implementations/","title":"Writing Implementations","text":"API State: <code>Draft</code> <p>Unfinished  This part of the API is brand-new. It will be changed if there are any bugs, missing features or usability improvements.</p> <p>It is not recommended relying on this part of the API, it will most likely change.</p> <p>Draft Our own usage and testing has shown that this part of the API is complete and seems bug free. However, other plugins may have other use cases which are not covered by our testing. Therefore, please go ahead and use this API part. Let us know if there are missing features or bugs. This API part will be changed if there are more bugs, missing features or usability improvements.</p> <p>Please use this part of the API and give us feedback!</p> <p>Stable Both our own and third party testing showed that this part of the API is complete. Only bugs and major conceptual problems would lead to more changes.</p> <p>This part of the API should be safe to use. We try to keep it compatible with previous versions if changes are needed.</p>"},{"location":"API/Writing-Implementations/#summary","title":"Summary","text":"<p>This page covers the creation of new Quest Types (e.g., Event) and Soon\u2122 Features (e.g., Conversation IO)  implementations and how they are registered in BetonQuest so that they can be used on the server.</p>"},{"location":"API/Writing-Implementations/#writing-new-quest-type-implementations","title":"Writing New Quest Type Implementations","text":"<p>The following concepts are defined as \"Quest Types\", as they build the core of BetonQuest.</p> <ul> <li><code>Condition</code></li> <li><code>Event</code></li> <li><code>Objective</code></li> <li><code>Variable</code></li> </ul> <p>The API is located in the <code>org.betonquest.betonquest.api.quest</code> package. From the list above the <code>Objective</code> is still part of the LegacyAPI. The sub-packages contain the core quest types that are registered in their respective <code>QuestTypeRegistry</code> using the <code>register</code> method.</p> <p>For an easy event implementation see the Burn Event Package.</p>"},{"location":"API/Writing-Implementations/#factory-pattern","title":"Factory Pattern","text":"<p>To create Quest Type instances, the Factory Pattern is used. This allows the constructing factory to provide any required objects that the specific implementation needs to function and enables more advanced compositions. For example in Online, Mixed, and Main Thread.</p> <p>In this context, you register not the actual implementation, but a factory that will create it. Into the factory you inject the dependencies that are required for creating the implementation. The <code>Instruction</code>, providing the \"configuration\", will be parsed in the factory's <code>parse</code> method, where the implementation is actually constructed. With that the implementation usually does not need the <code>Instruction</code>, allowing much cleaner object orientation  implementations.</p>"},{"location":"API/Writing-Implementations/#playerless","title":"Playerless","text":"<p>To create a quest type that works without any player or profile reference, you can use the <code>Playerless</code> variant, where the resolving does not take a profile parameter (e.g., real-time references).</p> <p>You simply implement the respective <code>PlayerlessQuestFactory</code> and register the instance.</p>"},{"location":"API/Writing-Implementations/#profile","title":"Profile","text":"<p>To create a quest type that works with a profile (documentation required) reference, you can use the <code>Profile</code> variant where the resolving takes the player profile as a parameter (e.g., points).</p> <p>You simply implement the respective <code>PlayerQuestFactory</code> and register the instance.</p>"},{"location":"API/Writing-Implementations/#onlineprofile-player","title":"OnlineProfile / Player","text":"<p>To create a quest type that works with a player object reference, you can use the <code>OnlineProfile</code> variant, where the resolving requires an <code>OnlineProfile</code> as a parameter (e.g., inventory access).</p> <p>You can obtain the <code>Player</code> from the <code>OnlineProfile</code> using the <code>getPlayer()</code> method.</p> <p><code>Online&lt;Quest&gt;Adapter</code> serves as a facade for the Profile, allowing the same methods to register and use.</p> <p>To create the instance to register, simply implement the respective <code>PlayerQuestFactory</code> and wrap the implementation created in the <code>parse</code> method with the <code>Online&lt;Quest&gt;Adapter</code>.</p>"},{"location":"API/Writing-Implementations/#mixed","title":"Mixed","text":"<p>You can also create a quest type that allows both a <code>Profile</code> and <code>null</code> as arguments using the <code>Nullable&lt;Quest&gt;</code> interface. The primary difference from the Profile variant is the nullability of the parameter.</p> <p>This is commonly used when the type does not require a profile but uses variables that accept a profile for resolution Typically, the <code>Instruction</code> is parsed in a method that creates the <code>Nullable&lt;Type&gt;</code>, which is then wrapped in the overridden methods with their <code>Nullable&lt;Type&gt;Adapter</code>.</p> <p>Additionally, you can create two independent types returned by different <code>parse</code> methods by the factory, for example, to utilize the <code>Online&lt;Quest&gt;Adapter</code> for the profile part.</p> <p>You simply implement the corresponding <code>PlayerQuestFactory</code> and <code>PlayerlessQuestFactory</code>. However, due to Java's Runtime Type Erasure, the register method for this is <code>registerCombined</code>.</p>"},{"location":"API/Writing-Implementations/#executing-on-bukkit-main-thread","title":"Executing on (Bukkit) Main Thread","text":"<p>BetonQuest attempts to run heavy operations asynchronously to avoid impacting the server's tick rate. To ensure your code runs on the Bukkit main thread (e.g., when interacting with world state), you can wrap it with a <code>PrimaryServerThread&lt;Type&gt;</code> (located in the <code>org.betonquest.betonquest.quest.&lt;type&gt;</code> package). Simply provide the Type to sync and a <code>PrimaryServerThreadData</code> (in the <code>org.betonquest.betonquest.quest</code> package).</p>"},{"location":"API/Writing-Implementations/#registry","title":"Registry","text":"<p>Registering implementations is accomplished through various <code>Registry</code> objects, which store them and make them accessible on the server by different parts of BetonQuest.</p> <p>The separation is as follows:</p> <ul> <li>QuestTypeRegistries, which provide instruction-based object creation:</li> <li><code>Condition</code></li> <li><code>Event</code></li> <li><code>Objective</code></li> <li><code>Variable</code></li> <li>FeatureRegistries, which cover more complex and varied creation patterns:</li> <li><code>ConversationIO</code></li> <li><code>Interceptor</code></li> <li><code>MessageParser</code></li> <li><code>NotifyIO</code></li> <li><code>Schedule</code></li> </ul> <p>These can be accessed through the <code>getQuestRegistries()</code> and <code>getFeatureRegistries()</code> methods on the plugin.</p> <p>The <code>QuestItem</code> will be added to the <code>QuestTypeRegistries</code> after its overhaul.</p> <p>For writing new features, you currently need to reference existing code. See also Legacy creating ConversationIO.</p>"},{"location":"Documentation/CHANGELOG/","title":"Changelog","text":""},{"location":"Documentation/CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"Documentation/CHANGELOG/#300-dev-139-2025-03-29","title":"[3.0.0-DEV-139] - 2025-03-29","text":""},{"location":"Documentation/CHANGELOG/#added","title":"Added","text":"<ul> <li><code>quest compass</code> location now allows variables</li> <li><code>point</code> and <code>globalpoint</code> events and conditions now support variables</li> <li><code>cancel</code> event now has <code>bypass</code> keyword to ignore conditions in Quest Canceler</li> <li><code>quester</code> in conversation now supports variables</li> <li>Support for Message Parsing Formatter</li> <li><code>notify</code> event</li> <li><code>notifyall</code> event</li> <li><code>npc</code> Variable</li> <li>Compass Names</li> <li>Journal</li> <li>Quest Canceler</li> <li>Conversation</li> <li>Plugin Messages / Translations</li> <li><code>region</code> and <code>wand</code> conditions now supports variables</li> <li><code>JobsReborn</code>, <code>Quests</code>, <code>McMMO</code> now supports variables</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Spigot is no longer supported, paper is now required </li> <li>message.yml file was deleted and instead the lang folder now contains all translations</li> <li>menuConfig.yml file was deleted, translations are in the lang folder and the config is part of config.yml </li> <li><code>cancel</code> event now respects by default canceler conditions</li> <li><code>objectives</code> can now be removed from database via command even when it does not exist</li> <li><code>max_npc_distance</code> config into <code>max_conversation_distance</code></li> <li><code>acceptNPCLeftClick</code> and <code>npcInteractionLimit</code> configs into <code>npcs.accept_left_click</code> and <code>npcs.interaction_limit</code></li> <li><code>%quester%</code> variable is used instead of <code>%npc%</code> for the quester's name in conversations; <code>%npc</code> variable is used now for the new Npc system</li> <li><code>fish</code> objective use block selector instead of a QuestItem</li> <li>everything that used <code>Citizens</code> NPC ids now uses the BQ NpcIDs</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed","title":"Removed","text":"<ul> <li>undocumented prefix feature in conversation</li> <li><code>citizens_npcs_by_name</code> config option, which is now part of the id</li> </ul>"},{"location":"Documentation/CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Reloading plugin did not reload Menu config</li> <li>potions generated not extended/upgraded since 2.2.1</li> <li>Biome condition on mc 1.21.4 could not parse the biome from the instruction anymore</li> <li><code>randomnumber</code> variable now correctly returns lower bound</li> <li><code>stage</code> objective 'index' property not working and now also starts at 0</li> <li>betonquest command without arguments did not work anymore</li> <li>the Fabled hook not working properly</li> <li><code>compass</code> event did not work with variables in <code>compass</code> location</li> <li><code>quest canceler</code> did not resolve global variables</li> <li><code>quest canceler</code> used <code>loc</code> instead of <code>location</code> key for teleportation</li> <li><code>journal</code> language only changed after rejoin when changing player language</li> <li><code>journal</code> entry renaming or deleting via command now affects all specified pointers and not only one</li> <li><code>ride</code> objective did only count vehicles, not all entities</li> <li>scrolling the mouse in the menu conversation IO did not work</li> <li><code>MMOCore</code> attribute loading with MMOCore 1.13</li> </ul>"},{"location":"Documentation/CHANGELOG/#security","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#221-2025-01-12","title":"[2.2.1] - 2025-01-12","text":""},{"location":"Documentation/CHANGELOG/#added_1","title":"Added","text":"<ul> <li>A Bukkit event which fires when a player's points change</li> <li><code>folder</code> event now has an argument <code>cancelConditions</code> to cancel a running folder</li> <li><code>action</code> objective now supports configuring the hand used for the interaction, preventing multiple objective completions at the same time on right click</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_1","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_1","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_1","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>fixed NPC navigation by giving better error messages and handling the stuck action correctly</li> <li>custom sounds from resourcepacks could not be used in conversation start and end sound</li> <li><code>chestput</code> objective caused that no chest could be opened on the server when <code>multipleaccess</code> was forbidden(default)</li> <li>providing wrong commit sha to the download command now gives a proper error message</li> <li>no longer set damage in <code>QuestItem</code> if none set</li> <li>loading of a backup file has the wrong order of applying the statements, causing exceptions and a broken migration</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_1","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#220-2024-12-01","title":"[2.2.0] - 2024-12-01","text":""},{"location":"Documentation/CHANGELOG/#added_2","title":"Added","text":"<ul> <li>new conversation options</li> <li><code>start_new_lines</code> the amount of new lines that should be printed before the conversation starts</li> <li><code>npc_text_fill_new_lines</code> should lined be filled between the NPC text and the player answer options</li> <li><code>world</code> condition now supports variables for the world name</li> <li>underscores are now escapable in item names and lore via <code>\\_</code></li> <li><code>weather</code> condition now allows to define a world, which can be a variable and can now be used in static context</li> <li><code>time</code> condition now allows to define a world, which can be a variable and can now be used in static context</li> <li><code>time</code> condition now supports minutes</li> <li><code>paste</code> event can now rotate schematics</li> <li><code>permission</code> condition now supports variables</li> <li><code>moonCycle</code> condition now allows to define a world, which can be a variable and can now be used in static context</li> <li>global variable support for npc ids and condition ids in <code>effectlib</code> section</li> <li><code>and</code> condition can now be static</li> <li>missing tab-completion and documentation for globalpoints and globaltags command</li> <li><code>party</code> condition now supports a location variable, to be used in a static context</li> <li><code>enitity</code> condition now supports variables for the entity name</li> <li><code>mmochangeclass</code> objective for MMOCore that listens for a player changing their class</li> <li><code>removeentity</code> event now supports variables for the entity name</li> <li><code>variable</code> condition can now be used in a static context</li> <li>TrainCarts integration</li> <li><code>traincartslocation</code> objective that executes when the player passed a location </li> <li><code>traincartsride</code> objective that executes when the player is riding a train</li> <li><code>traincartsexit</code> objective that executes when the player exited a train</li> <li><code>traincartsride</code> condition to check if the player is riding a specific named train</li> <li><code>scoretag</code> event and condition</li> <li><code>action</code> objective now supports configuring the hand used for the interaction, preventing multiple objective completions at the same time</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li><code>spawn</code> event now only spawn mobs and no other entities</li> <li>ProSkillAPI rename to Fabled</li> <li>this includes the class and level condition</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_2","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_2","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>broken title check in book <code>QuestItem</code></li> <li>BlockSelector did not match exact block matches and started regex matching causing performance issues during load and reload</li> <li>wrong order of arguments in fire work effects</li> <li>non-static <code>variables</code> causing cross conversation validation to break</li> <li>LuckPerms integration not pushing the permission update to the connected servers correctly.</li> <li><code>crafting</code> objective where complex recipes are not recognized</li> <li><code>hieght</code> condition where variable locations threw an exception</li> <li><code>globalpoint</code> condition where not initialized global points where 0</li> <li><code>point</code> condition where not initialized points where 0</li> <li><code>QuestItem</code> Potions cannot be saved in 1.20.5+</li> <li>Schedules could run twice on some systems by an inaccurate time returned java's Instant.now()</li> <li><code>Journal</code> interaction with blocks like lecterns</li> <li>sections that are created in templates by write operations, where no edits should actually be done</li> <li>this caused a lot of \"ghost\" sections that could not be loaded like schedules, menus and manny more</li> <li>Conversations work in 1.21.3 again</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_2","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#213-2024-08-06","title":"[2.1.3] - 2024-08-06","text":""},{"location":"Documentation/CHANGELOG/#added_3","title":"Added","text":"<ul> <li>BreweryX compatibility</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li><code>mspawnmob</code> can now be used in static context</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_3","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_3","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>LuckPerms integration not sending the permission updates via the messaging service to connected Servers in the same network.</li> <li>LuckPerms TagCalculator trying to use PlayerData even if player is offline</li> <li>Memory Leak in CombatTagger</li> <li>AdvancementIO not working in mc 1.20.\u215a and 1.21</li> <li>chaining of movenpc events did trigger fail events</li> <li>effect event duration -1 did not result in infinite duration</li> <li>translation in conversation got stored in default language</li> <li>incorrect calculation of the width of strings when using characters with certain accents when doing pagination</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_3","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#212-2024-06-23","title":"[2.1.2] - 2024-06-23","text":""},{"location":"Documentation/CHANGELOG/#added_4","title":"Added","text":"<ul> <li>LuckPerms permission events</li> <li><code>addPermission</code> event adds a permission to a player</li> <li><code>removePermission</code> event removes a permission from a player</li> <li>Location Vectors can now be chained</li> <li><code>eval</code> variable to resolve a variable string as variable</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li><code>AureliumSkills</code> was renamed to <code>AuraSkills</code> the following was changed in BQ</li> <li><code>aureliumskillslevel</code> condition was renamed to <code>auraskillslevel</code></li> <li><code>aureliumstatslevel</code> condition was renamed to <code>auraskillsstatslevel</code></li> <li><code>aureliumskillsxp</code> event was renamed to <code>auraskillsxp</code></li> <li>prevent reply when the text is not completely displayed for the SlowTellRaw conversation IO</li> <li><code>resourcepack</code> objective is now paper only</li> <li><code>die</code> objective now support respawns without canceling the actual death of the player</li> <li><code>ph</code> variable can now be used static</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_4","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_4","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>NPE if a player replies to a SlowTellRaw conversation IO when the text is not completely displayed</li> <li>head <code>QuestItem</code> matches even if they are distinct </li> <li>modulo operator in math variable can now be used by escaping the percent sign</li> <li><code>weather</code> event not static callable even when providing a world</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_4","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#211-2024-05-09","title":"[2.1.1] - 2024-05-09","text":""},{"location":"Documentation/CHANGELOG/#added_5","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_5","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_5","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_5","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>math variable with dots (since 2.1.0)</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_5","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#210-2024-05-09","title":"[2.1.0] - 2024-05-09","text":""},{"location":"Documentation/CHANGELOG/#added_6","title":"Added","text":"<ul> <li><code>block</code> objective now supports parameters <code>loc</code> and <code>region</code> to limit the area</li> <li><code>block</code> objective now supports the parameter <code>ignorecancel</code> allow counting breaking / placing blocks in protected regions</li> <li>command <code>variable</code> to list and modify variables on a variable objective</li> <li>config option <code>conversation_IO_config.slowtellraw.message_delay</code> to set the delay between messages in the SlowTellRaw conversation IO</li> <li><code>resourcepack</code> objective - to allow checking when the player accepts, denies, downloads, or fails to download a resource pack </li> <li><code>region</code> objective now supports variables as region name</li> <li><code>location</code> objective now allows <code>entry</code> and <code>exit</code> keywords to track entering and leaving the location</li> <li>allowing adjustment of maximum hologram display radius</li> <li>support to execute BetonQuest commands from command blocks</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>player variable</li> <li><code>%player%</code> is now the same as <code>%player.name%</code></li> <li><code>%player.name%</code> will display the name of the player</li> <li><code>%player.display%</code> will use the display name used in chat</li> <li><code>%player.uuid%</code> will display the UUID of the player</li> <li>marking of mobs now uses variables in all contexts of spawning killing and removing</li> <li>marking of mobs is now stored in the persistent data container of the entity to prevent loss on server restart</li> <li>default <code>default_conversation_IO</code> in config from <code>menu,chest</code> to <code>menu,tellraw</code></li> <li>corrected Russian messages in <code>messages.yml</code> file</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_6","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_6","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li><code>variable</code> objective loads newlines correctly</li> <li>exception in <code>lookAtBlock</code> condition when omitting the type</li> <li>MMOCoreClassCondition, MMOItemsGiveEvent, MMOItemsHandCondition and MMOItemsItemCondition now work with numeric identifiers</li> <li>yaml multiline instructions could lead to partly working events, conditions and objectives</li> <li>creation of advancement tab when an advancement NotifyIO is sent</li> <li><code>burn</code> event throwing unexpected error when omitting duration</li> <li>added missing firework meta to string representation of QuestItem</li> <li>required flags in <code>QuestItem</code> were not relevant in equals check</li> <li><code>folder</code> event did not respect the sync / async context that it is executed in</li> <li>incorrectly measuring the distance between player and hologram if they are in different worlds</li> <li>incorrect calculation of the width of strings when using some special characters when doing pagination </li> <li>previously undocumented quoting in instructions</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_6","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#201-2024-03-24","title":"[2.0.1] - 2024-03-24","text":""},{"location":"Documentation/CHANGELOG/#added_7","title":"Added","text":"<ul> <li><code>hunger</code> event now supports variables</li> <li><code>time</code> event now supports variables and new <code>ticks</code> argument</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Quests by PikaMug got updated from version 4.X to 5.X</li> <li>The ProtocolLib dependency was downgraded from 5.2.0-SNAPSHOT-679 to 5.0.0-SNAPSHOT-636</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_7","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_7","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li><code>weather</code> event did not use <code>duration</code></li> <li><code>lever</code> event does not work with redstone</li> <li>papers future remove of CB package relocation</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_7","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#200-2023-12-31","title":"[2.0.0] - 2023-12-31","text":""},{"location":"Documentation/CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Logging<ul> <li>Ingame logging<ul> <li>Logging during <code>/q reload</code></li> </ul> </li> <li>New command <code>/q debug ingame</code></li> <li>Debug logging to separate file</li> <li>Log history length can be freely configured</li> </ul> </li> <li>Quest Templates</li> <li>A new folder <code>QuestTemplates</code> can now be used to define templates for packages</li> <li>templates can also extend templates</li> <li>add AureliumSkills Compatiblity<ul> <li>added AureliumSkillsLevelCondition</li> <li>All existing users must add aureliumskills: 'true' to their config.yml's hook section.</li> <li>added AureliumStatsLevelCondition</li> <li>added AureliumSkillsLevelExperienceEvent</li> </ul> </li> <li>add DecentHolograms Compatibility<ul> <li>holograms from DecentHolograms are a direct alternative to HolographicDisplays</li> </ul> </li> <li>add LuckPerms context integration for tags<ul> <li>All existing users must add luckperms: 'true' to their config.yml's hook section.</li> </ul> </li> <li>add FakeBlock Compatibility<ul> <li>added <code>fakeblock</code> event that has the arguments <code>showgroup</code> and <code>hidegroup</code> to show and hide FakeBlock groups</li> <li>added <code>hook.fake-block</code> config option, default: <code>true</code></li> </ul> </li> <li>add RedisChat Compatibility<ul> <li>added <code>redischat</code> chat interceptor</li> </ul> </li> <li>added Event Schedules to replace an old static-events system<ul> <li>static events from schedulers now respect static conditions</li> <li>events called by schedules are always called player independent</li> <li><code>runForAll</code> event can now be used to run events for all players that match a condition</li> <li><code>runIndepent</code> event can be used to run events static (player independent) from player dependent contexts</li> </ul> </li> <li>added support for Base64 encode custom heads<ul> <li>can be created from items in inventory using the BetonQuest <code>item</code> command (Paper only, Bukkit/Spigot can be configured manually)</li> <li>can be given to players using the BetonQuest <code>give</code> command</li> </ul> </li> <li>NotifyIO \"totemIO\"</li> <li>Support for MythicLib</li> <li>player attribute to QuestCompassTargetChangeEvent</li> <li>added PlayerObjectiveChangeEvent, PlayerJournalAddEvent, PlayerJournalDeleteEvent</li> <li>Allow %player% variable for PLAYER_HEAD quest items</li> <li>allow access to objective variable properties from other packages</li> <li>allow point variables from other packages</li> <li>API method in objective API that starts and stops it per player</li> <li>config option <code>default_hologram</code> to set hologram priority if multiple hologram plugins are loaded at once</li> <li>config option <code>journal.show_in_backpack</code> to remove the journal from the backpack</li> <li>config option <code>journal.lock_default_journal_slot</code> to lock the journal to the <code>default_journal_slot</code></li> <li>config option <code>journal.give_on_respawn</code> to add the journal to the inventory after the player respawns</li> <li>config option <code>journal.custom_model_data</code> to give the journal a ressource-pack-based skin</li> <li>config option <code>mysql.reconnect_interval</code> to set the reconnect interval if the connection to the database gets lost</li> <li>compass now supports items from other packages</li> <li>new messages.yml entries <code>inventory_full_backpack</code> and <code>inventory_full_drop</code> to have more specific messages, when the inventory of the player is full</li> <li><code>menu</code> conversationIO option <code>npc_name_newline_separator</code></li> <li>added <code>q download</code> command</li> <li>variable support for menu titles</li> <li>configurable cooldown to menu conversation IO</li> <li>holograms<ul> <li>variable support</li> <li>top lists ordered by point values of players</li> <li><code>npcs</code> list now supports global variables as NPC ID in NPC Holograms</li> </ul> </li> <li>menus now support global variables</li> <li>exposed the Citizen variable and enhanced location capabilities</li> <li>menus now support string with newline or string list text values for lore</li> <li>amount of objectives now support variables</li> <li>added quest item flag recording and restore</li> <li>Conversations now support cross-conversation pointers to conversations in other packages</li> <li>QuestCancelers can now be referenced across packages</li> <li>Chat Interceptor <code>packet</code> is now 1.20.4 compatible</li> <li><code>freeze</code> event - ProtocolLib compatibility feature: Blocks the player from moving for the specified amount of ticks</li> <li><code>block</code> objective - properties: <code>absoluteAmount</code>, <code>absoluteLeft</code> and <code>absoluteTotal</code></li> <li><code>command</code> objective</li> <li><code>equip</code> objective</li> <li><code>delay</code> objective - now support variables</li> <li><code>sudo</code> event - now supports variables</li> <li><code>opsudo</code> event - now supports variables</li> <li><code>variable</code> condition - now supports variables</li> <li><code>bossbar</code> notify style now supports variables for the <code>progress</code> and <code>stay</code> arguments</li> <li><code>delay</code> objective property: <code>rawSeconds</code></li> <li><code>fish</code> objective now has <code>hookLocation</code> and <code>range</code> settings.</li> <li><code>consume</code> objective now has <code>amount</code> argument.</li> <li><code>mmoprofessionlevelup</code> objective can now check the main character level as well</li> <li><code>burning</code> condition</li> <li><code>inconversation</code> condition</li> <li><code>language</code> condition</li> <li><code>heroesattribute</code> condition - Heroes compatibility feature: Checks a player's level for a particular attribute against a value</li> <li><code>variable</code> condition - regex can now also be a variable</li> <li><code>mmspawn</code> event now has argument <code>target</code> Makes the spawned mob target the player</li> <li><code>mmspawn</code> event now has argument <code>private</code> Visually hides the spawned mob from other players. Does not stop sound or particles</li> <li><code>mmspawn</code> event now supports the <code>marked</code> argument</li> <li><code>objective</code> event now supports a comma-separated list of objectives</li> <li><code>mmobkill</code> objective now supports the <code>marked</code> and <code>deathRadiusAllPlayers</code> argument</li> <li><code>marked</code> argument now supports %player% variable </li> <li><code>globaltag</code> and <code>globalpoint</code> variables</li> <li><code>burn</code> event - ignites player for given seconds, supports variables</li> <li><code>velocity</code> event - throws the player by a vector (can be variable) with a direction and modification</li> <li><code>block</code> objective - added argument <code>noSafety</code> which disables removing progress when the player does the opposite of what the objective asks for</li> <li><code>block</code> objective - added property variables <code>absoluteLeft</code>, <code>absoluteTotal</code>, <code>absoluteAmount</code> that always return absolute values</li> <li><code>hunger</code> condition and event</li> <li><code>variable</code> condition - forceSync argument forces the condition to be checked on the main thread</li> <li><code>variable</code> condition - now supports variables as both the input and the regular expression</li> <li><code>command</code> event - now suppress console output</li> <li><code>cancelconversation</code> event</li> <li><code>time</code> event - now supports subtraction and world selection, which made it persistent and static</li> <li><code>globalpoint</code> event - new syntax for manipulating global points</li> <li><code>experience</code> event - it's now possible to change xp, change and set levels and set the xp bar</li> <li><code>deleteglobalpoint</code> event</li> <li><code>score</code> event - more options for manipulating the scoreboard</li> <li><code>item</code> variable - new <code>name</code> and <code>lore</code> argument and now supports items from other packages</li> <li><code>randomnumber</code> variable added - supports variables</li> <li><code>give</code> event - new <code>backpack</code> argument to place items in the backpack (if a valid QuestItem)</li> <li><code>party</code> event - new optional <code>amount</code> of maximal affected players</li> <li><code>drop</code> event</li> <li><code>itemdurability</code> event, condition and variable</li> <li><code>numbercompare</code> condition</li> <li><code>cancelOnLogout</code> argument for <code>folder</code> event</li> <li><code>npcinteract</code> objective - now supports the argument <code>interaction</code> to choose between left, right or both clicks</li> <li><code>log</code> event</li> <li><code>party</code> event - new range 0 and -1 to select players in the same world or server wide</li> <li><code>stage</code> objective, condition and event</li> <li><code>first</code> event - attempts to run a list of events until one successfully runs, like a compressed <code>if</code> event</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Java 17 is now required</li> <li>changed package names from <code>pl.betoncraft.betonquest</code> to <code>org.betonquest.betonquest</code></li> <li>Changed quest package structure<ul> <li>Quest packages are now searched and loaded from the folder <code>BetonQuest/QuestPackages/</code></li> <li>Quest packages can now contain more quest packages in sub folders</li> <li>Relative paths can now navigate downwards and not only upwards</li> <li><code>main.yml</code> was renamed to <code>package.yml</code></li> <li>Any file and folder structure with any file and folder names is now allowed, except <code>package.yml</code>, as that file   indicates a quest package</li> <li><code>events</code>, <code>objectives</code>, <code>conditions</code>, <code>journal</code> and <code>items</code> are now defined in a config section matching their   names</li> <li><code>conversations</code> and <code>menus</code> are now defined in a config section matching their names and a unique identifier like   the file name before</li> <li>The <code>enabled</code> boolean is now defined in the <code>package</code> section</li> </ul> </li> <li>all objectives that can be advanced without directly completing now support notify</li> <li>all objectives that can be advanced without directly completing now support <code>left</code>, <code>amount</code> and <code>total</code> variables<ul> <li>the <code>left</code> and <code>amount</code> variables of some objectives were swapped and have been corrected: <code>left</code> is the amount   left, <code>amount</code> is the amount done</li> </ul> </li> <li>NPC Holograms are reworked<ul> <li>individual refresh rate for each hologram</li> <li>the boolean follow is now set per hologram</li> <li>the vector offset origin has been changed. The hologram is now directly above the NPCs head by default. This means all previously custom vectors are now increased by three blocks on the y-axis.</li> </ul> </li> <li>npc_effects are reworked<ul> <li>the section changed its naming from <code>npc_effects</code> to <code>effectlib</code></li> <li>the section <code>disabled</code> got removed</li> <li>the section <code>check_interval</code> is now an inner section of the effect and now called <code>checkinterval</code></li> <li>next to the <code>npcs</code> section there is now an <code>locations</code> section</li> <li>effects will now follow npcs if they're pathing to another spot</li> </ul> </li> <li>AureliumSkills updated to version Beta1.2.5</li> <li>PikaMug Quests updated to version 4.1.3</li> <li>Items now support AIR</li> <li>Menus now support new <code>click</code> options <code>shiftLeft</code>, <code>shiftRight</code> and <code>middleMouse</code> to execute events on item clicks<ul> <li>Therefore <code>left</code> and <code>right</code> in the <code>click</code> section no longer include shift clicks</li> </ul> </li> <li><code>folder</code> event - now executes events immediately if no delay is set</li> <li><code>weather</code> event - now has an optional variable duration (in seconds) and an optional world param</li> <li><code>paste</code> event - can now be static</li> <li><code>chestput</code> objective - can now block other players from accessing a chest while someone is putting items inside</li> <li>The location and region objectives now register the movement of players inside a vehicle</li> <li>written book is now readable as a quest item</li> <li>HolographicDisplays updated to 3.0.0</li> <li>Added staticness indicator to variables that can be executed without a direct player connection</li> <li>written book quest items can now be read</li> <li><code>experience</code> objective event and condition were reworked</li> <li>condition and objective do not support raw experience anymore</li> <li>all allow decimal level and variables now</li> <li>changed backpack configuration. \"\" will hide the compass or canceler</li> <li><code>smelt</code> objective - now requires a QuestItem instead of a BlockSelector</li> <li><code>cancelquest</code> command - has its own permission now</li> <li><code>compass</code> command - has its own permission now</li> <li><code>language</code> command - is now persistent</li> <li><code>point</code> command - list can now be filtered by beginning letters</li> <li><code>tag</code> command - list can now be filtered by beginning letters</li> <li><code>globalpoint</code> command - list can now be filtered by beginning letters</li> <li><code>globaltag</code> command - list can now be filtered by beginning letters</li> <li><code>journal</code> command - list can now be filtered by beginning letters</li> <li><code>objective</code> command - list can now be filtered by beginning letters</li> <li><code>variable</code> condition supports escapable underscores to avoid replacement</li> <li><code>kill</code> event - now kills the player, instead of dealing damage, which is more reliable</li> <li><code>lightning</code> event - now has a new noDamage argument</li> <li><code>clear</code> and <code>killmob' events - got replaced by new</code>removeentity` event</li> <li>the line length of <code>SlowTellRaw</code> conversation IO from 60 to 50 to fit the actual minecraft chat</li> <li>Item enchantments was changed to include zero as a legal value, not just positive numbers</li> <li>the objectives mmocorecastskill and mmoitemcastability were merged into the mmoskill objective</li> <li><code>command</code> event no longer runs for all players on the server if a variable is used</li> <li><code>math</code> and <code>version</code> variables - now static</li> <li><code>alternative</code> and <code>check</code> condition - now static</li> <li><code>open_events</code> in a menu are now called before the menu actually opens</li> <li><code>conversation</code> event now support a start option</li> <li><code>riding</code> condition - renamed to <code>ride</code></li> <li><code>vehicle</code> objective - renamed to <code>ride</code></li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_8","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_8","title":"Removed","text":"<ul> <li>deprecated internals, code and old features</li> <li>Support for MMOLib</li> <li><code>message</code> event</li> <li><code>title</code> event</li> <li><code>playsound</code> event</li> </ul>"},{"location":"Documentation/CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>added missing spaces to time left property of delay objective </li> <li>catchup now works even if the schedule was never executed before</li> <li>q version now works again</li> <li>RPGMenu error when teleport events are used as click events</li> <li>RPGMenu bound items not always working</li> <li>npc_holograms do now show errors during reload and not one tick later</li> <li>the first slot in backpack stays empty when journal is in player inventory</li> <li>npc_holograms are not shown correctly with multiple defined npcs</li> <li>spectator mode is now disabled for chest conversation io to prevent being stuck in the conversation</li> <li>packet chat interceptor does not catch action bar anymore</li> <li>time event does not work with floating point values</li> <li>global variable recursive resolution cross packages</li> <li>inaccurate location variable decimal rounding</li> <li>NPC holograms from Citizens are not hidden correctly</li> <li><code>location</code> objective - is now more robust if the player changes a world</li> <li><code>brew</code> objective - now counts newly brewed potions even if there were already some potions of the desired type in</li> <li><code>chestput</code> objective - did now work with double chests other slots present</li> <li><code>menu</code>(open) event - showed the previous menu again</li> <li>non .yml files cause errors when loading quest packages</li> <li><code>pickrandom</code> event - did not calculate chance correctly</li> <li><code>pickrandom</code> event - did not allow dashes in event names</li> <li><code>action</code> objective - ignored offhand at all</li> <li><code>enchant</code> objective - did not work at all, now has <code>amount</code> and <code>requirementMode</code> parameters</li> <li>Hologram topX line not working with profiles</li> <li>the craft objective could be completed without consuming materials</li> <li>LocationObjective resolves variable for a player who does not have the objective, and so maybe also don't have the variable</li> <li>performance when using many conditions / events / ... repeatedly</li> <li><code>/q journal</code> command allowed invalid journal pointers</li> <li>AsyncSaver will shut itself down if the database connection is lost, resulting in data loss</li> <li>Journal entries did count color codes as line length, affecting the formatting of pages</li> <li>Notification categories could be modified during runtime with the notify event</li> <li>Leading spaces are now preserved in conversation messages and journal entries </li> <li>giving <code>air</code> with the give command or the give event crashes the server</li> <li>duplication of holograms when reloading BetonQuest and the hologram is hidden</li> <li><code>menu</code> conversation IO kicked players when conversation started in the air caused by flying detection</li> <li><code>menu</code> conversation IO did not stopped scrolling at the bottom and began to scroll from the top again</li> <li>removed the hearts of the Armorstand in the Menu Conversation IO</li> <li>journal entries now keep their leading whitespaces</li> <li>exceptions in <code>sudo</code> and <code>command</code> events leading to broken conversations that could not be exited</li> <li>the NPC's head could be stolen from conversations with the <code>chest</code> style</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_8","title":"Security","text":"<ul> <li>it was possible to put a QuestItem into a chest</li> <li>bump log4j dependency 2.15.0 to fix CVE-2021-44228</li> <li><code>take</code> event - is now threadsafe</li> </ul>"},{"location":"Documentation/CHANGELOG/#11211-2023-12-25","title":"[1.12.11] - 2023-12-25","text":""},{"location":"Documentation/CHANGELOG/#added_9","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>the MythicMobs integration was updated to MythicMobs 5.3.5</li> <li>the MythicLib integration was updated to MythicLib 1.6-SNAPSHOT</li> <li>the objectives mmocorecastskill and mmoitemcastability were merged into the mmoskill objective</li> <li>the MMOCore-API integration was updated to MMOCore-API 1.12-SNAPSHOT</li> <li>the MMOItems-API integration was updated to MMOItems-API 6.9.4-SNAPSHOT</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_9","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_9","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>conversation could have a deadlock and a player can get stuck in a conversation</li> <li>conversation could not be canceled due to a race condition</li> <li>JobsReborn ObjectivePaymentEvent couldn't be used</li> <li>ProtocolLib warning for Minecraft 1.20.2</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_9","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#11210-2023-02-18","title":"[1.12.10] - 2023-02-18","text":""},{"location":"Documentation/CHANGELOG/#added_10","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_10","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_10","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_10","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>ProtocolLib's based <code>packet</code> interceptor was fixed for MC 1.19, now ProtocolLib 5.0.0 is required</li> <li>conversation IO chest did not show the correct NPC heads</li> <li><code>objective</code> event - static calls did not remove the objective for online players</li> <li>legacy <code>\u00a7x</code> HEX color format not working in some contexts</li> <li>eating of items when entering the chest conversation io actually consumed the item</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_10","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1129-2022-06-22","title":"[1.12.9] - 2022-06-22","text":""},{"location":"Documentation/CHANGELOG/#added_11","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_11","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_11","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_11","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li><code>weather</code> event - storm did not work</li> <li>1.19 ProtocolLib warnings about deprecated packages</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_11","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1128-2022-03-07","title":"[1.12.8] - 2022-03-07","text":""},{"location":"Documentation/CHANGELOG/#added_12","title":"Added","text":"<ul> <li>new line support for <code>journal_lore</code> in <code>messages.yml</code></li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>PikaMug Quests updated to version 4.1.3</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_12","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_12","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>reload with an invalid PlayerHider causes a NPE</li> <li>QuestItems could be eaten, this was caused by a changed mc behavior</li> <li>command, sudo and opsudo events didn't work with conditions</li> <li>interact objective did not work with armorstands</li> <li>MMOItemsGiveEvent did not check if item actually exists</li> <li>notify IO <code>subtitle</code> and <code>title</code> with only a subtitle was not send</li> <li>npcHider not working for Citizens with ModelEngine trait</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_12","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1127-2021-12-11","title":"[1.12.7] - 2021-12-11","text":""},{"location":"Documentation/CHANGELOG/#added_13","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_13","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_13","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_13","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>exception during reload, when npc_holograms are disabled</li> <li><code>entities</code> condition and <code>clear</code> event now support not living entities</li> <li>mmoitems item creation only worked with uppercase id's</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_13","title":"Security","text":"<ul> <li>updated log4j to 2.15.0 which fixes CVE-2021-44228</li> </ul>"},{"location":"Documentation/CHANGELOG/#1126-2021-10-14","title":"[1.12.6] - 2021-10-14","text":""},{"location":"Documentation/CHANGELOG/#added_14","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li><code>action</code> objective cancels now the event, before other plugins check for it (better third-party support)</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_14","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_14","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>added missing config options to the default config</li> <li>version check for ProtocolLibIntegrator</li> <li>quest item empty name comparison</li> <li>customized built-in messages that use the advancementIO</li> <li>BlockSelector without a namespace but starting with <code>:</code> did not work and threw an exception</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_14","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1125-2021-08-11","title":"[1.12.5] - 2021-08-11","text":""},{"location":"Documentation/CHANGELOG/#added_15","title":"Added","text":"<ul> <li>Version checks for ProtocolLib and Shopkeepers support</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_15","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_15","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_15","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li>MMOCoreClassCondition used the class display name instead of the class ID to compare classes.</li> <li>the take event called Paper's ItemStack.getI18NDisplayName() instead of Spigot's ItemStack.getItemMeta().getDisplayName</li> <li>fixed hooking in ProtocolLib</li> <li>max_npc_distance was set to 5.3 to prevent instant quiting of conversations</li> <li>conversation IO menu sometimes leave an armorstand spawned</li> <li>sometimes messages in a conversation are not sent when the packet interceptor is used</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_15","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1124-2021-07-05","title":"[1.12.4] - 2021-07-05","text":""},{"location":"Documentation/CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Vietnamese translation</li> <li>added invOrder setting to (mmoitem)take event</li> <li>the mmoitemtake event &amp; mmoitem condition now also check the backpack<ul> <li>this will not work until the item rework / until the backpack contains NBT data</li> </ul> </li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_16","title":"Changed","text":"<ul> <li><code>/q create package</code> command does now create an empty package</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_16","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_16","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li><code>brew</code> objective triggers all the time and counts correctly</li> <li>only generate default package if BetonQuest folder is empty</li> <li>fix backpack passing references instead of clones</li> <li>fixed combat event packet that changed with MC 1.17</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_16","title":"Security","text":"<ul> <li>the take event is now threadsafe</li> </ul>"},{"location":"Documentation/CHANGELOG/#1123-2021-05-05","title":"[1.12.3] - 2021-05-05","text":""},{"location":"Documentation/CHANGELOG/#added_17","title":"Added","text":"<ul> <li>FastAsyncWorldEdit compatibility</li> <li>craft objective variable <code>total</code></li> <li>curly braces in math.calc variables for using variables with math symbols</li> <li>player attribute to QuestCompassTargetChangeEvent</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_17","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_17","title":"Deprecated","text":"<ul> <li>math variable now allows rounding output with the ~ operator</li> </ul>"},{"location":"Documentation/CHANGELOG/#removed_17","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li>parsing of math variable</li> <li>craft objective: multi-craft, drop-craft, hotbar/offhand-craft, shift-Q-craft and any illegal crafting is correctly detected,</li> <li>craft objective variables <code>left</code> and <code>amount</code> were swapped</li> <li>NPC hider for not spawned NPCs</li> <li>Conversation IO Chest load NPC skull async from Citizens instead of sync</li> <li>block selector didn't respect regex boundary</li> <li>block selector regex errors are now properly handled</li> <li><code>default_journal_slot: -1</code> now uses the first free slot instead of the last hotbar slot</li> <li>mmobkill objective notify argument not working correctly</li> <li><code>fish</code> objective didn't count the amount of fish caught in one go (if modified by e.g. mcMMO)</li> <li>fixed smelt objective: only taking out normally did count, shift-extract got canceled</li> <li>empty values in <code>variable</code> objective now don't break on player join</li> <li>PacketInterceptor sync wait lag</li> <li>notifications using the chatIO were catched by the conversation interceptor</li> <li>case insensitive <code>password</code> objective did not work if the password contained upper case letters</li> <li>global variables didn't work in quester names</li> <li>quest items couldn't interact with any blocks, which also prevented them from mining blocks</li> <li>the shear objective's sheep couldn't have underscores in their names</li> <li>backpack passing references instead of clones</li> <li>compass event now allows global variables</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_17","title":"Security","text":"<ul> <li>it was possible to put a QuestItem into a chest</li> </ul>"},{"location":"Documentation/CHANGELOG/#1122-2021-03-14","title":"[1.12.2] - 2021-03-14","text":""},{"location":"Documentation/CHANGELOG/#added_18","title":"Added","text":""},{"location":"Documentation/CHANGELOG/#changed_18","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_18","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_18","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li><code>npcrange</code> objective is triggered at wrong time</li> <li>Citizens compatibility for not spawned NPCs</li> <li>NotifyIOs are case-sensitive</li> <li>all mmo objectives trigger for everyone</li> <li>command event includes 'conditions:...' into the command</li> <li>tags and points are now thread safe</li> <li>compatibility for packet interceptor on papermc</li> <li>fix books not parsing color codes</li> <li>action objective for any block ignored location</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_18","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1121-2021-02-05","title":"[1.12.1] - 2021-02-05","text":""},{"location":"Documentation/CHANGELOG/#added_19","title":"Added","text":"<ul> <li>Ingame update notification if the updater found an update</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_19","title":"Changed","text":""},{"location":"Documentation/CHANGELOG/#deprecated_19","title":"Deprecated","text":""},{"location":"Documentation/CHANGELOG/#removed_19","title":"Removed","text":""},{"location":"Documentation/CHANGELOG/#fixes_6","title":"Fixes","text":"<ul> <li>The Autoupdater got a small fix, and the fail safety for broken downloads was improved</li> <li><code>npcrange</code> objective does not throw errors when the player is in a different world than the NPC</li> <li>The block objectives notify could not be disabled</li> <li>fixed ConcurrentModificationException in EntityHider</li> <li>fixed notify enabled by default for some objectives</li> <li>fixed some grammar mistakes in debug messages</li> <li>fixed npc teleport and walk operations in unloaded chunks</li> <li>fixed inaccurate location variable decimal rounding</li> <li>fixed NullPointerException for NPCs with conversation</li> <li>fixed resuming to path finding when conversation interrupt movement</li> <li>fixes Die objective teleporting player during the tick</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_19","title":"Security","text":""},{"location":"Documentation/CHANGELOG/#1120-2021-01-10","title":"[1.12.0] - 2021-01-10","text":""},{"location":"Documentation/CHANGELOG/#added_20","title":"Added","text":"<ul> <li>Tags and Objectives can now be removed with a static event for all players, even if they are not online<ul> <li>deletepoint event can now also be called to delete all points for all players</li> <li>journal del event can now also be called as static</li> </ul> </li> <li>Added integration for TeamRequiem plugins (MMOCore, MMOItems, MMOLib)<ul> <li>Conditions:<ul> <li>MMOClass condition (type &amp; class)</li> <li>MMOProfession condition</li> <li>MMOAttribute condition</li> <li>MMOItems item condition (item in inventory)</li> <li>MMOItems hand condition (item in main/offhand)</li> <li>MMOLib stats condition (a ton of stats from Core and Items combined)</li> </ul> </li> <li>Objectives:<ul> <li>Level X Profession to X Level</li> <li>Craft / Upgrade X Item within Inventory</li> <li>Craft X item</li> <li>Apply Gem Stone to Item</li> <li>Upgrade Item via Consumable</li> <li>Cast Item ability</li> <li>Cast Class ability</li> <li>Mine MMOBlock</li> </ul> </li> <li>Events:<ul> <li>Add mmo class level or exp</li> <li>Add mmo professional level or exp</li> <li>Add Skill points</li> <li>Add attribute points</li> <li>Add attribute reallocation points</li> <li>Add class points</li> <li>Give Item \ufe0f</li> <li>Take Item</li> </ul> </li> </ul> </li> <li>equal argument for condition 'empty'</li> <li>Condition 'wand' can now have an option '</li> <li>Implementing 1.15 support for Events and Conditions</li> <li>New Chat event, that write chat messages for a player</li> <li>Added 'pickup' objective</li> <li>Added stopnpc event, that will stop the movenpc event</li> <li>Added teleportnpc event, that will stop the movenpc event and teleport the npc to a given location</li> <li>Added option check_interval for holograms in custom.yml and added GlobalVariable support</li> <li>Added deletepoint event to delete player points</li> <li>Added mythicmobdistance condition that will check if a specific MythicMobs entity is near the player</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added fail argument in password objective</li> <li>Added notify option to point event</li> <li>Added an interceptor that does not intercept: 'none'</li> <li>Added ConditionVariable. It returns true or false based on whether a player meets a condition.</li> <li>Improved bStats</li> <li>Added login objective</li> <li>Added period argument to folder event</li> <li>Added variable support to the Notify system</li> <li>Added variable support to the PickRandomEvent</li> <li>Added \"acceptNPCLeftClick: true / false\" config option</li> <li>Added optional \"minlevel\" and \"maxlevel\" arguments to mmobkill objective</li> <li>Added new options 'inside/outside' for npcrange objective, support for multiple npcs and improved performance</li> <li>Added new Event QuestCompassTargetChangeEvent that is triggered when a new CompassTarget is set. It is also possible to cancel it</li> <li>added multi language support for Notify system</li> <li>Added 'notifyall' event to broadcast a notification</li> <li>Added new notification IO 'sound'</li> <li>Added 'jump' objective</li> <li>Added left, amount and total properties to player kill objective</li> <li>Added 'neutralMobDeathAllPlayers' argument to the <code>mmobkill</code> objective</li> <li>Added custom model data support for items</li> <li>Added new config option 'npcInteractionLimit' default 500 that limits the click on an NPC to every x milliseconds</li> <li>Added PlayerHider to hide specific players for specified players</li> </ul>"},{"location":"Documentation/CHANGELOG/#changed_20","title":"Changed","text":"<ul> <li>devbuilds always show notifications for new devbuilds, even when the user is not on a _DEV strategy</li> <li>Items for HolographicDisplays are now defines in items.yml</li> <li>Command 'bq rename' can now be used for globalpoints</li> <li>The old updater was replaced with a new one</li> <li>AchievementCondition is replaced with AdvancementCondition</li> <li>Renamed objective Potion to Brew</li> <li>Renamed 'monsters' condition to 'entities'</li> <li>Renamed 'xp' event to 'experience'</li> <li>new config option mysql.enabled<ul> <li>if you already have an installation, you can add this manually to get rid of the mysql warning during startup</li> </ul> </li> <li>events in conversation options are now executed before npc or player responses are printed</li> <li>message event now ignores chat interceptors during conversation</li> <li>tame objective now works with all tamable mobs, including possible future ones</li> <li>improved chestput waring for locations without a chest</li> <li>reworked location variable: %location.(xyz|x|y|z|yaw|pitch|world|ulfShort|ulfLong)(.NUMBER)%</li> <li>multiple conditions and objectives now use the block selector. The same applies for the setblock event.</li> <li>static events now allow comma separated event list</li> <li>changed the <code>npc_effects</code> behavior to be package wide instead of global if no NPC is defined in the custom.yml</li> <li>EventHandlers in general updated to ignore canceled events</li> <li>improved performance for condition checks (Bug where it took seconds to check for conditions)</li> <li>improved performance for conversation checks (Bug where it took seconds to check for conversation options)</li> <li>The plugin will no longer be loaded before the worlds are loaded</li> <li>Citizens Holograms are now more robust on reload and reload faster</li> <li>Added player death/respawn behavior to Region Objective and improved performance</li> <li>changed smelting and fish objective from material to BlockSelector</li> </ul>"},{"location":"Documentation/CHANGELOG/#deprecated_20","title":"Deprecated","text":"<ul> <li>Marked message event for removal in BQ 2.0</li> <li>Marked playsound event for removal in BQ 2.0</li> <li>Marked title event for removal in BQ 2.0</li> </ul>"},{"location":"Documentation/CHANGELOG/#removed_20","title":"Removed","text":"<ul> <li>Removed Deprecated Exceptions</li> <li>Removed RacesAndClasses support</li> <li>Removed LegendQuest support</li> <li>Removed BoutifulAPI support</li> <li>Removed the CLAY NPC</li> <li>removed legacy material support</li> <li>removed BetonLangAPI support</li> <li>removed PlayerPoints support (this can still be used via Vault)</li> </ul>"},{"location":"Documentation/CHANGELOG/#fixes_7","title":"Fixes","text":"<ul> <li>event priority for block objective</li> <li>linebreaks in strings</li> <li>notify:1 for block objective did not work</li> <li>asynchronous database access for objectives</li> <li>Renaming an NPC will not cause an NPE for a NPC Hologram</li> <li>Objective 'craft' now supports shift-clicking</li> <li>Fixed generation of default package</li> <li>fixed line breaks</li> <li>fixed events notify interval of 1</li> <li>fixed potion/brew objective notify</li> <li>fixed the bug and removed its workaround when chest converationIO has no available start points</li> <li>fixed journal line breaking</li> <li>fixed movement of movenpc event</li> <li>fixed npcmove event</li> <li>fixed a bug, where a player causes an exception when he spams right left clicks in menu conversationIO</li> <li>fixed outdated Brewery dependency</li> <li>fixed message duplication when using the packet interceptor</li> <li>fixed Journal interaction with Lectern</li> <li>fixed QuestItems ignoring durability</li> <li>fixed QuestItem interaction with Lectern, Campfire and Composter</li> <li>update journal after closing magic inventory</li> <li>fixed lever event not toggling the lever</li> <li>fixed ConcurrentModificationException in PlayerData</li> <li>fixed issue where the PacketInterceptor prints the message tag in the chat</li> <li>fixed database backups breaking with some languages</li> <li>fixed when PlaceholderAPI variables contains dots</li> <li>fixed quester name not support &amp; as color code</li> <li>fixed Region Objective listen to player teleport event</li> <li>packet Interceptor stops 1 second AFTER the end of the conversation to allow slow messages to still have its chat protection</li> <li>fixed notify couldn't use variables that contain <code>:</code></li> <li>improved stability for brew objective when other plugins affect brewing</li> <li>fixed region and npcregion condition</li> <li>fixed debugging does not start on server startup</li> <li>fixed ghost holograms caused by reloading BQ</li> <li>fixed deadlock (Server crash) in Conversations with a large amount of npc and player options with a large amount of conditions</li> <li>fixed door event not working correctly</li> <li>fixed <code>1 give</code> command exceptions</li> </ul>"},{"location":"Documentation/CHANGELOG/#security_20","title":"Security","text":"<ul> <li>fixed issue, where objectives that count things are out of sync with the database. This has also affected BungeeCord support</li> </ul>"},{"location":"Documentation/CHANGELOG/#1110-2020-01-02","title":"[1.11.0] - 2020-01-02","text":""},{"location":"Documentation/CHANGELOG/#added_21","title":"Added","text":"<ul> <li>Support Minecraft 1.8 - 1.13.2+</li> <li>New Block Selector to select blocks by material and attributes. Can use wildcards as well.</li> <li>New 'mooncycle' condition - Determine what phase the moon is in</li> <li>Chest ConversationIO can now be configured to show NPC text per option.</li> <li>New 'extends' keyword in conversation to allow inheritance</li> <li>New 'conversation' condition that will return true if there is at least one conversation option available to an NPC</li> <li>New 'nujobs_canlevel' condition - True if player can level in Jobs Reborn</li> <li>New 'nujobs_hasjob' condition - True if player has job in Jobs Reborn</li> <li>New 'nujobs_jobfull' condition - True if a job is full in Jobs Reborn</li> <li>New 'nujobs_joblevel' condition - True if player has level in Jobs Reborn</li> <li>New 'nujobs_addexp' event - Add experience to player in Jobs Reborn</li> <li>New 'nujobs_addlevel' event - Add a level to player in Jobs Reborn</li> <li>New 'nujobs_dellevel' event - Remove a level from player in Jobs Reborn</li> <li>New 'nujobs_joinjob' event - Joins a player to a job in Jobs Reborn</li> <li>New 'nujobs_leavejob' event - Leaves a job in Jobs Reborn</li> <li>New 'nujobs_setlevel' event - Set a player's level in Jobs Reborn</li> <li>New 'nujobs_joinjob' objective - Triggers when player joins job in Jobs Reborn</li> <li>New 'nujobs_leavejob' objective - Triggers when a player leaves job in Jobs Reborn</li> <li>New 'nujobs_levelup' objective - Triggers when a player levels up in Jobs Reborn</li> <li>New 'nujobs_payment' objective - Triggers when a player receives money from Jobs Reborn</li> <li>New Notification System</li> <li>New 'notify' event - Create custom notifications on the ActionBar, BossBar, Title, Subtitle and Achievement</li> <li>New 'menu' conversation IO - Requires ProtocolLib. See: https://www.youtube.com/watch?v=Qtn7Dpdf4jw&amp;lc</li> <li>New 'packet' chat interceptor - Requires ProtocolLib.</li> <li>new '/q debug' command - Enable or disable the debug mode</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes","title":"Changes","text":"<ul> <li>Event 'effect' can have 'ambient', 'hidden' and 'noicon' parameters</li> <li>Event 'effect' has '--ambient' parameter deprecated with a non fatal warning.</li> <li>Priority for 'journal_main_page' entries not unique anymore, it only orders the entries. Same priority sort it alphabetic</li> <li>Objective 'interact' can have 'loc', 'range' parameters</li> <li>Objective 'region' can optionally have 'entry' and/or 'exit' to only trigger when entering or exiting named region</li> <li>The old 'Debug' class was replaced by a more useful and powerful 'LogUtils' class</li> </ul>"},{"location":"Documentation/CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>Resolve variables in journal pages.</li> <li>WATER and LAVA can be specified in Action Objective</li> <li>Journals without dates now don't leave blank lines</li> <li>Journal separator can be disabled or customized</li> <li>NPCs now spawn correct, if they have a npc_hologram</li> <li>fixed NPE when no journal entry exists</li> <li>The default package is now compatible with all versions</li> </ul>"},{"location":"Documentation/CHANGELOG/#110-2019-09-16","title":"[1.10] - 2019-09-16","text":"<ul> <li>Development versions can be full of bugs. If you find any, please report them on GitHub Issues.</li> <li>This version is only compatible to Shopkeepers v2.2.0 and above</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_22","title":"Added","text":"<ul> <li>npc holograms above the head that follow the npc (requires HolographicDisplays)</li> <li>New 'facing' condition - check if player is facing a direction </li> <li>New 'looking' condition - check if player looks at a block</li> <li>New 'deleffect' event - delete potion effects of a player</li> <li>New '%citizen%' variable - display a npcs name or coordinates (requires Citizens)</li> <li>New 'npcrange' objective - player has to go towards a npc (requires Citizens)</li> <li>New 'npcdistance' condition - check if a player is close to a npc (requires Citizens)</li> <li>New 'npclocation' condition - check if a npc is at a location (requires Citizens)</li> <li>New 'npcregion' condition - check if a npc is inside a region (requires Citizens &amp; WorldGuard)</li> <li>New 'killmob' event - remove the mobs that you spawned with 'spawn' event</li> <li>New '/q version' command - get the version used</li> <li>New 'partialdate' condition - check if the date matches a pattern</li> <li>New 'dayofweek' condition - check if its weekend or monday</li> <li>New 'realtime' condition - check if its a specific time</li> <li>New 'xp' event - give a player xp.</li> <li>Global objecties (objectives that are active for all players directly after start)</li> <li>Global tags and points (tags ad points that are not set for one specific player)</li> <li>New 'globaltag' event </li> <li>New 'globaltag' condition</li> <li>New 'globalpoint' event </li> <li>New 'globalpoint' condition</li> <li>New 'opsudo' event - Sudo commands with op permissions</li> <li>Brewery integration ('drunk', 'drunkquality' and 'hasbrew'conditions, 'givebrew' and 'takebrew' events) </li> <li>New 'title' event - display titles without the whole command hassle</li> <li>New 'playsound' event - plays a sound</li> <li>New 'fly' condition - check if the player is flying with Elytra</li> <li>New 'biome' condition - check the player's current biome</li> <li>New 'interact' objective - interact with an entity</li> <li>Conversations can individually override conversation IO type</li> <li>NPCs can be individually hidden from players if ProtocolLib is installed</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_1","title":"Changes","text":"<ul> <li>'compass' event can now directly set a players compass</li> <li>holograms from HolographicDisplays now can display items</li> <li>'movenpc' event now allows multiple locations to create a path</li> <li>'enchant' objective now allows multiple enchantments</li> <li>'particle' event can now create client side only particles</li> <li>'chest' converstionIO now dosn't display messages to chat for the old behavior use 'combined'</li> <li>'money' event can now notify you about how much you recieved</li> <li>'mmobkill' objective now allows multiple mobs</li> <li>Translation system is integrated with BetonLangAPI</li> <li>NPC heads in \"chest\" conversation IO will display correct Citizens skin</li> <li>NPC particles (EffectLib integration) can be displayed to individual players</li> <li>Condition command allows checking static conditions</li> <li>'testforblock' condition can now check for specific data value</li> <li>'delay' objective and 'folder' event accept more time units</li> <li>'password' objective also accepts commands</li> <li>Commands can be tab-completed</li> </ul>"},{"location":"Documentation/CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>Fixed bug where players could take out items from the chest conversationIO</li> <li>Removed possibilities of dropping/transfering quest items and the journal</li> <li>Lots of smaller bugfixes</li> </ul>"},{"location":"Documentation/CHANGELOG/#196-2017-11-27","title":"[1.9.6] - 2017-11-27","text":""},{"location":"Documentation/CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>Update version to 1.9.6</li> </ul>"},{"location":"Documentation/CHANGELOG/#195-2017-11-27","title":"[1.9.5] - 2017-11-27","text":""},{"location":"Documentation/CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>Fixed global locations loading before the worlds</li> <li>Fixed loading order of Citizens/EffectLib integration</li> <li>Fixed restarting of persistent objectives not working correctly</li> <li>Fixed \"unbreakable\" tag not being read from items</li> </ul>"},{"location":"Documentation/CHANGELOG/#194-2017-11-02","title":"[1.9.4] - 2017-11-02","text":""},{"location":"Documentation/CHANGELOG/#fixed_17","title":"Fixed","text":"<ul> <li>Fixed broken integration loading</li> </ul>"},{"location":"Documentation/CHANGELOG/#193-2017-11-01","title":"[1.9.3] - 2017-11-01","text":""},{"location":"Documentation/CHANGELOG/#fixed_18","title":"Fixed","text":"<ul> <li>NPC and mob kills will be correctly registered when killed by indirect means</li> <li>Replaced error with a nice message when config updating fails to start</li> <li>Unbreakable items are no longer breakable in newer Spigot releases</li> <li>Moved compatibility hooks to the first server tick to hook into lazy plugins</li> <li>Colors of text in \"chest\" conversations are now correctly applied over text breaks</li> <li>Added a nice message when conversation option is missing \"text\"</li> <li>Fixed a rare crash when NPC was stopped and its target was outside loaded chunks</li> <li>Fixed checking item amounts in the backpack</li> <li>Allowed negative data in items for compatibility with dark magics</li> <li>Removed Denizen script checking, since it didn't work sometimes</li> </ul>"},{"location":"Documentation/CHANGELOG/#192-2017-07-09","title":"[1.9.2] - 2017-07-09","text":""},{"location":"Documentation/CHANGELOG/#fixed_19","title":"Fixed","text":"<ul> <li>Conversations won't allow taking items from GUI windows</li> <li>When using wrong 'point' or 'item' variable there will be a nice error message</li> <li>NPCs can be safely despawned while in the middle of a conversation</li> <li>Error on '/q reload' when NPC particles are disabled is now gone</li> <li>Items for compass buttons are now correctly loaded</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_2","title":"Changes","text":"<ul> <li>These events are now correctly persistent: clear, explosion, lightning, setblock, spawn</li> <li>BetonQuest is using bStats instead of McStats</li> </ul>"},{"location":"Documentation/CHANGELOG/#191-2017-04-18","title":"[1.9.1] - 2017-04-18","text":""},{"location":"Documentation/CHANGELOG/#fixed_20","title":"Fixed","text":"<ul> <li>Holograms are now correctly loaded</li> </ul>"},{"location":"Documentation/CHANGELOG/#19-2017-04-03","title":"[1.9] - 2017-04-03","text":"<p>Notes: - This version breaks compatibility with plugins hooking into BetonQuest. I'm sorry for that. Ask devs to update these plugins. - The error reporting feature was improved. If you see a lot of error messages when reloading the plugin (not stack traces, just regular, human-readable messages), it's probably because there are real problems in your quests. - BetonQuest won't accept \".yml\" extensions at the end of conversation names in \"main.yml\". If your conversations aren't working (the plugin says they don't exist), check if you have these extensions IN THE \"MAIN.YML\" file and remove them.</p>"},{"location":"Documentation/CHANGELOG/#fixed_21","title":"Fixed","text":"<ul> <li>'action' objective now detects fire interaction</li> <li>'empty' condition now skips armor and off-hand slots</li> <li>Items can be used cross-package</li> <li>New sound names are now used by default</li> <li>Fixed doubled quest items when dropping them is blocked by another plugin</li> <li>Lore and name now appear on heads and written books with custom data</li> <li>Fix error when trying to add air (empty hand) with \"/q item\" command</li> <li>The main page now can exceed a single page in the journal</li> <li>The plugin will reconnect to the database if something goes wrong</li> <li>Fishing objective now only accepts stuff from water</li> <li>Properties in 'mobkill' objective (left and amount) has switched places</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_3","title":"Changes","text":"<ul> <li>Complete rewrite of item conditioning - read the docs to discover new features (previous syntax is still working without any behavior changes)</li> <li>Books in items.yml now automatically wrap pages, like the journal and main page</li> <li>Main page and entries in the journal can manually split pages with '|' character</li> <li>New lines in conversations can be made with \"\\n\"</li> <li>Interval in 'delay' objective is now configurable</li> <li>'craft' and 'potion' objectives now use items defined in items.yml file</li> <li>Potion items are now defined with 'type:' argument instead of data value</li> <li>You can now use spaces between \"first\" options in conversations</li> <li>Static events can now be fired with \"/q event - eventID\" command</li> <li>Locations can have vectors defined directly in instruction strings</li> <li>Locations can be variables which resolve to location format</li> <li>Point condition can now check exact point amount with 'equal' argument</li> <li>In 'chest' conversation IO items can be specified with durability values after a colon</li> <li>Mobs spawned with 'spawn' event can have armor, items in hands and custom drops</li> <li>Unbreakability of quest items can be disabled (if you want to use \"unbreakable\" tag instead)</li> <li>Ranges in locations are now a separate argument (\"10;20;30;world;4\" is now \"10;20;30;world 4\")</li> <li>\"main.yml\" is now the only required file in the package. Empty files can be deleted</li> <li>Custom settings (i.e. EffectLib particle effects) are moved from \"main.yml\" to \"custom.yml\"</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_23","title":"Added","text":"<ul> <li>Compatibility with Shopkeepers ('shopkeeper' event, 'shopamount' condition)</li> <li>Compatibility with PlaceholderAPI ('ph' variable and 'betonquest' placeholder)</li> <li>Compatibility with HolographicDisplays (holograms visible based on conditions)</li> <li>Compatibility with RacesAndClasses (race, class, exp, level, mana conditions/events/variables)</li> <li>Compatibility with LegendQuest (race, class, attribute, karma conditions/variables)</li> <li>Compatibility with WorldEdit ('paste' a schematic event)</li> <li>New condition 'riding' - check if the player is riding an entity</li> <li>New condition 'world' - check the world in which the player is</li> <li>New condition 'gamemode' - check player's game mode</li> <li>New condition 'achievement' - check if the player has an achievement</li> <li>New condition 'variable' - check if a variable matches a pattern</li> <li>New event 'lever' - switches a lever</li> <li>New event 'door' - opens/closes doors, trapdoors and gates</li> <li>New event 'if' - run one of two events, depending on condition</li> <li>New event 'movenpc' - move Citizens NPC to a location</li> <li>New event 'variable' - set a variable in \"variable\" objective</li> <li>New objective 'vehicle' - entering a vehicle entity</li> <li>New objective 'variable' - lets players define their own variables for you to use</li> <li>New objective 'kill' - kill players who meet specified conditions</li> <li>New objective 'breed' - breed animals (only 1.10.2+)</li> <li>New variable '%location%' - resolves to player's location</li> <li>Keyword \"unbreakable\" can be used in items to make them unbreakable</li> <li>When a conversation option is selected, a Bukkit event is called (for developers)</li> <li>Chat can be paused while in conversation, it will display when finished</li> <li>Objectives can be completed for players with \"/q objective player complete\"</li> <li>Option 'full_main_page' controls if the main page is a separate page in the journal</li> <li>Mobs spawned with 'spawn' can be \"marked\"; you can require marked mobs in 'mobkill' objective</li> <li>Firework support in items</li> <li>Relative package paths, where '_' means \"one package up\"</li> </ul>"},{"location":"Documentation/CHANGELOG/#185-2016-05-14","title":"[1.8.5] - 2016-05-14","text":""},{"location":"Documentation/CHANGELOG/#fixed_22","title":"Fixed","text":"<ul> <li>Objectives are now correctly deleted with \"objective delete\" event and do notreappear after \"/q reload\".</li> <li>Objectives are no longer duplicated in the database when using \"/q reload\".</li> </ul>"},{"location":"Documentation/CHANGELOG/#184-2016-05-06","title":"[1.8.4] - 2016-05-06","text":""},{"location":"Documentation/CHANGELOG/#fixed_23","title":"Fixed","text":"<ul> <li>Conversations are no longer started twice</li> </ul>"},{"location":"Documentation/CHANGELOG/#183-2016-05-06","title":"[1.8.3] - 2016-05-06","text":""},{"location":"Documentation/CHANGELOG/#fixed_24","title":"Fixed","text":"<ul> <li>Events are no longer run in async thread when completing \"password\" objective</li> <li>Replaced stacktrace with error message when objective is incorrect in \"objective\" event</li> <li>Made color codes work with \"one_entry_per_page\" setting enabled</li> <li>Fixed a bug where taken backpack items were not removed from the database</li> <li>Quest items can now be equipped</li> <li>\"die\" objective now correctly handles damage done to the player</li> <li>Fixed error when conversation is started without any possible options</li> <li>Fixed error when killing NPCs with equipment</li> <li>Fixed problems with relogging while in conversations with \"stop\" option enabled</li> <li>Fixed error when loading corrupted item from the database</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_4","title":"Changes","text":"<ul> <li>Updater is now based on GitHub Releases, no longer downloads major updates automatically, it is more configurable and can also download development versions with \"/q update --dev\"</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_24","title":"Added","text":"<ul> <li>Added console message about the cause of \"/q give\" errors (tells you what is wrong with item instruction string)</li> </ul>"},{"location":"Documentation/CHANGELOG/#182-2016-02-18","title":"[1.8.2] - 2016-02-18","text":""},{"location":"Documentation/CHANGELOG/#fixed_25","title":"Fixed","text":"<ul> <li>Fixed NPE when killing a mob without any \"mobkill\" objectives</li> </ul>"},{"location":"Documentation/CHANGELOG/#181-2016-02-18","title":"[1.8.1] - 2016-02-18","text":""},{"location":"Documentation/CHANGELOG/#fixed_26","title":"Fixed","text":"<ul> <li>Removing journal entries from the database now works correctly</li> <li>MobKill objective now correctly handles kills</li> <li>Nested package names are now correctly resolved</li> <li>The formatting at the end of every main page line is reset</li> <li>Fixed Apache dependency problem</li> <li>Material name is no longer displayed in \"chest\" GUI conversations</li> <li>Fixed \"notify\" option in give/take events</li> </ul>"},{"location":"Documentation/CHANGELOG/#18-2016-02-13","title":"[1.8] - 2016-02-13","text":"<p>Notes: - As always in big updates, compatibility with plugins hooking into BetonQuest is broken. You need to check if everything is working.</p>"},{"location":"Documentation/CHANGELOG/#fixed_27","title":"Fixed","text":"<ul> <li>Die objective now reacts to death caused by other plugins</li> <li>Static events now are started correctly</li> <li>Static events now are canceled correctly</li> <li>Action objective now correctly checks locations</li> <li>Combat tag is removed after death</li> <li>Block, Craft and MythicMobs MobKill objectives now correctly save data</li> <li>Take event now correctly takes items from inventory, armor slots and backpack</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_25","title":"Added","text":"<ul> <li>New variable system in conversations (check out the documentation)</li> <li>More options for journal, including one entry per page and removing date</li> <li>Compatibility with mcMMO (level condition and experience event)</li> <li>Compatibility with EffectLib ('particle' event, NPC particles)</li> <li>Compatibility with PlayerPoints (points event and condition)</li> <li>Compatibility with Heroes (class and skill condition, experience event, Heroes kills in 'mobkill' objective)</li> <li>Compatibility with Magic ('wand' condition)</li> <li>Compatibility with Denizen (running task scripts with 'script' event)</li> <li>Compatibility with SkillAPI (class and level condition)</li> <li>Compatibility with Quests (checking for done quests, starting them, custom event reward, custom condition requirement)</li> <li>Optional prefix for conversations (contributed by Jack McKalling)</li> <li>Optional material for buttons in \"chest\" conversation IO</li> <li>Configurable main page in the journal</li> <li>New argument in objectives: \"persistent\" - makes them repeat after completing</li> <li>New condition 'check' - allows for specifying multiple instructions in one</li> <li>New condition 'objective' - checks if the player has an active objective</li> <li>New condition 'score' - check scores on scoreboards</li> <li>New condition 'chestitem' - checks if a chest contains items</li> <li>New event 'run' - allows for specifying multiple instructions in one</li> <li>New event 'givejournal' - gives journal to the player</li> <li>New event 'sudo' - forces the player to run a command</li> <li>New event 'compass' - point player's compass to a location</li> <li>New event 'cancel' - cancels a quest (as in main.yml)</li> <li>New event 'score' - modify scores on scoreboards</li> <li>New events 'chestgive', 'chesttake' and 'chestclear' - put and remove items in chests</li> <li>New objective 'logout' - the player needs to leave the server</li> <li>New objective 'password' - the player needs to type the password in the chat</li> <li>New objective 'fish' - catching fish</li> <li>New objective 'enchant' - enchanting an item</li> <li>New objective 'shear' - shearing a sheep</li> <li>New objective 'chestput' - putting items in a chest</li> <li>New objective 'potion' - brewing a potion</li> <li>New commands: /cancelquest and /compass - directly open backpack sub-pages</li> <li>New subcommand '/q delete' - delete all specific tags/points/objectives/entries</li> <li>New subcommand '/q rename' - rename all specific tags/points/objectives/entries</li> <li>New subcommand '/q give' - gives you an item from items.yml</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_5","title":"Changes","text":"<ul> <li>Administrative messages are now English-only in new installations</li> <li>Journal event can remove entries from the journal</li> <li>In conversations, %quester% variable changed to %npc%</li> <li>In inventory GUI there is NPC's text in every option, for convenience</li> <li>Conversations can point to NPC options in other conversations within the package</li> <li>You can use spaces between events, conditions and pointers in conversations</li> <li>All tags and points are internally associated with a package now</li> <li>Some conditions are now static and persistent (just like events)</li> <li>Point event can now multiply points</li> <li>Vault Money event can now multiply money</li> <li>Journal event can now use \"update\" argument for updating variables on the main page</li> <li>Packages can now be moved to another directories</li> <li>Quest cancelers are now defined in a more convenient way</li> <li>/q command renamed to /betonquest, /j to /journal; previous forms are now aliases</li> <li>Conditions and events in objective instructions (and conditions in event instructions) can now be defined with \"condition:\" and \"event:\" argument (without \"s\" at the end)</li> </ul>"},{"location":"Documentation/CHANGELOG/#176-2015-10-17","title":"[1.7.6] - 2015-10-17","text":""},{"location":"Documentation/CHANGELOG/#fixed_28","title":"Fixed","text":"<ul> <li>Conversation can no longer be started multiple times at once if it happens on the same tick</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_26","title":"Added","text":"<ul> <li>Dutch translation by Jack McKalling</li> </ul>"},{"location":"Documentation/CHANGELOG/#175-2015-09-12","title":"[1.7.5] - 2015-09-12","text":""},{"location":"Documentation/CHANGELOG/#fixed_29","title":"Fixed","text":"<ul> <li>Restored compatibility with MythicMobs 2.1.0</li> </ul>"},{"location":"Documentation/CHANGELOG/#174-2015-08-29","title":"[1.7.4] - 2015-08-29","text":""},{"location":"Documentation/CHANGELOG/#fixed_30","title":"Fixed","text":"<ul> <li>Fixed error when player was quitting with active \"stop\" conversation while he had not changed his language with /ql command</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_6","title":"Changes","text":"<ul> <li>Inventory GUI will close itself if there's nothing left to display</li> </ul>"},{"location":"Documentation/CHANGELOG/#173-2015-08-20","title":"[1.7.3] - 2015-08-20","text":""},{"location":"Documentation/CHANGELOG/#fixed_31","title":"Fixed","text":"<ul> <li>Combat tagging does not work if the attack has been canceled</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_7","title":"Changes","text":"<ul> <li>Options in conversation can also be defined using \"event:\", \"condition:\" and \"pointers:\" argument names (with and without 's' at the end). \"text:\" argument is unchanged.</li> </ul>"},{"location":"Documentation/CHANGELOG/#172-2015-07-27","title":"[1.7.2] - 2015-07-27","text":""},{"location":"Documentation/CHANGELOG/#fixed_32","title":"Fixed","text":"<ul> <li>\"mobkill\" objective now displays correct amount of mobs left to kill</li> <li>\"delay\" objective can be set to 0 delay</li> </ul>"},{"location":"Documentation/CHANGELOG/#171-2015-07-19","title":"[1.7.1] - 2015-07-19","text":""},{"location":"Documentation/CHANGELOG/#fixed_33","title":"Fixed","text":"<ul> <li>Quests are loaded after other plugins register their types</li> <li>Journal condition correctly resolves package names</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_8","title":"Changes","text":"<ul> <li>Updated French translation</li> </ul>"},{"location":"Documentation/CHANGELOG/#17-2015-07-17","title":"[1.7] - 2015-07-17","text":"<p>Notes: - BetonQuest no longer supports servers without UUID handling - There were a lot of changes since previous version, check carefully if everything is working - Compatibility with plugins hooking INTO BetonQuest is broken, they need to update</p>"},{"location":"Documentation/CHANGELOG/#fixed_34","title":"Fixed","text":"<ul> <li>Objectives no longer mysteriously double events</li> <li>Greatly improved performance in almost every aspect</li> <li>Finally fixed issues with special characters on some servers</li> <li>Fixed database saving/loading issues</li> <li>Fixed player options in conversations being white on next lines when using tellraw</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_27","title":"Added","text":"<ul> <li>Quest canceling system</li> <li>New inventory GUI for conversations</li> <li>Added the \"random\" parameter in \"folder\" event - choose randomly X events to fire</li> <li>Action objective can be \"canceled\" - the click will not do anything</li> <li>Added \"static events\" mechanism for firing events at specified time of the day</li> <li>Optional message when the player is pulled back by stop option</li> <li>Optional message for take and give events</li> <li>Optional message when advancing in \"block\" and \"mobkill\" objectives</li> <li>Variable system for quick changing quest parameters (for example location of a quest)</li> <li>\"/q vector\" command for easy calculating location vector variables</li> <li>New \"empty\" condition - amount of empty inventory slots</li> <li>New \"party\" condition - manages the conditions in the party</li> <li>New \"monsters\" condition - true if there are monsters in the area</li> <li>New \"clear\" event - kills specified monsters in the area</li> <li>New \"region\" objective - reach WorldGuard region</li> <li>Blacklist of commands which cannot be used while in conversation</li> <li>Option to disable compatibility with other plugins</li> <li>Added remove_items_after_respawn option - for servers using keepInventory gamerule</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_9","title":"Changes","text":"<ul> <li>The plugin now uses package system: configuration has been moved into \"default\" package</li> <li>Objectives has returned to \"objectives.yml\" - it's improving performance</li> <li>The database is now updated in real time</li> <li>All quests can (but don't have to) be translated into multiple languages</li> <li>Players can change their language with /questlang command</li> <li>Conversations with stop option are resumed when the player logs out and in again</li> <li>Metrics are now toggled in PluginMetrics/config.yml</li> <li>All conditions, events, objectives, conversations etc. are loaded when the plugin starts/reloads</li> <li>Citizens NPC will stop when talked to</li> <li>Quest blocks cannot be placed, quest items will not break</li> <li>Conversations cannot be started while in combat</li> <li>Cannot fight while in conversation</li> <li>Tellraw conversations no longer spam the console</li> <li>Mobs can be spawned with a name (spawnmob event, \"name:\" argument)</li> <li>/q command is now more beautiful</li> <li>Removed unnecessary argument prefixes from conditions and events</li> <li>Removed \"tag:\" from objective instruction strings</li> <li>Conversations no longer need those empty lines everywhere ('')</li> <li>Dependencies updated: WorldGuard/WorldEdit 6.1, MythicMobs 2.0.4</li> </ul>"},{"location":"Documentation/CHANGELOG/#162-2015-04-10","title":"[1.6.2] - 2015-04-10","text":"<ul> <li>Fixed errors on data loading when MySQL is being used.</li> <li>Changes messages system to use simple file as default. If you want to use advanced translation rename \"advanced-messages.yml\" to \"messages.yml\".</li> </ul>"},{"location":"Documentation/CHANGELOG/#161-2015-03-26","title":"[1.6.1] - 2015-03-26","text":"<ul> <li>Fixed errors on updating journals when using MySQL.</li> </ul>"},{"location":"Documentation/CHANGELOG/#16-2015-03-16","title":"[1.6] - 2015-03-16","text":"<p>Notes: - There is a bug/feature in 1.8 which adds '\u00a70' at the end of every line in books generated by plugins. This breaks the conditions/events based on books with more than one line of text. The detailed instruction on how to work it around is in \"Other important stuff\" chapter, in the part about items.</p>"},{"location":"Documentation/CHANGELOG/#fixed_35","title":"Fixed","text":"<ul> <li>Items given by event that don't fit in the inventory will now drop instead of being deleted This does not apply to quest items, they will be added to backpack</li> <li>Events fired from conversations won't throw async errors</li> <li>Conversation can be started after plugin's reload without relogging</li> <li>/q reload no longer lags the server</li> <li>Corrected description in /q command</li> <li>Added input validation for global locations - if event is incorrect it will display an error instead of breaking the whole functionality</li> <li>The plugin should run fine on machines not supporting some special characters</li> <li>Inverted item condition now behave correctly</li> <li>Time condition now checks time correctly</li> </ul>"},{"location":"Documentation/CHANGELOG/#added_28","title":"Added","text":"<ul> <li>Added backpack for storing quest items, which cannot be dropped in any way</li> <li>Added database backups</li> <li>Added prefix for the database. New installations will use \"betonquest_\" prefix for tables, existing configuration will use empty prefix to maintain compatibility with other programs</li> <li>Players can chat while in conversations by prefixing their messages with '#' character</li> <li>New \"random\" condition - true with specified probability</li> <li>New \"sneak\" condition - true if player is sneaking</li> <li>New \"journal\" condition - true if player has journal entry</li> <li>New \"testforblock\" condition - true if block at given location matches given material</li> <li>New \"arrow\" objective - completed when arrow hits the specified target</li> <li>New \"experience\" objective - completed when player reaches certain level</li> <li>New \"npcinteract\" objective - completed when player right-clicks Citizens NPC</li> <li>New \"damage\" event - damages the player</li> <li>Skript support (event, effect and condition)</li> <li>WorldGuard support (region condition)</li> <li>Errors are logged to the \"error.log\" file in \"logs\" directory</li> <li>Debug option in config.yml for logging plugin's activity to \"debug.log\" file</li> <li>New commands for opening backpack: b, bb, backpack, bbackpack or betonbackpack</li> <li>Items are now aware of leather armor color, head owner and enchantments in books</li> </ul>"},{"location":"Documentation/CHANGELOG/#changes_10","title":"Changes","text":"<ul> <li>Added and changed a lot of subcommands in /q command:<ul> <li>event and condition can be run for every online player</li> <li>tag, point, objective and (new) journal can edit every (even offline) player</li> <li>config (new) can set configuration files from command line</li> <li>backup (new) backups the whole configuration and database</li> </ul> </li> <li>Folder event now runs these events even after the player logs out: command, tag, objective, delete, point, setblock</li> <li>Changed /j command to open the backpack instead of just giving the journal</li> <li>Tellraw clicking on options in conversation now ignores old (used) options</li> <li>Using color codes in journal entries is now possible</li> <li>Give/take events and item condition can now check for multiple items with syntax 'give stick:2,stone:4,sword'</li> <li>Give/take events and item/hand conditions can now check for items only without enchantments/effects/name/lore etc.</li> <li>Inverting conditions is now done by prefixing their name with \"!\" (in the place where you use them, like conversation, not in conditions.yml)</li> <li>Configuration updater is no longer based on plugin's version</li> <li>Backup files are now kept in \"backups\" directory, old ones are moved to it</li> <li>Changed internal structure of the code (may matter to developers - QuestEvent, Condition and Objective classes have been moved from \"core\" package to \"api\", update your imports)</li> </ul>"},{"location":"Documentation/CHANGELOG/#154-2015-03-12","title":"[1.5.4] - 2015-03-12","text":"<ul> <li>This version is almost the same as 1.5.3. The only difference is that it can load database backups created by 1.6 version. When updating to 1.6, the database format will change, so it won't be possible to go back, unless by loading the backup using this version of the plugin.</li> </ul>"},{"location":"Documentation/CHANGELOG/#153-2014-12-26","title":"[1.5.3] - 2014-12-26","text":"<ul> <li>Small fix of /q purge command not working on offline players.</li> </ul>"},{"location":"Documentation/CHANGELOG/#152-2014-12-23","title":"[1.5.2] - 2014-12-23","text":"<ul> <li>Fixed errors that were spamming the console when a player with active Location objective was teleporting to other worlds.</li> </ul>"},{"location":"Documentation/CHANGELOG/#151-2014-12-22","title":"[1.5.1] - 2014-12-22","text":""},{"location":"Documentation/CHANGELOG/#changes_11","title":"Changes","text":"<ul> <li>Multiple tags in one event are now possible</li> <li>Change /q event command to run from console</li> <li>Add color codes to item's name and lore</li> <li>Fix \"stop\" option in conversations not working</li> <li>Fix NPE on unknown answer in conversations</li> </ul>"},{"location":"Documentation/CHANGELOG/#15-2014-12-21","title":"[1.5] - 2014-12-21","text":""},{"location":"Documentation/CHANGELOG/#changes_12","title":"Changes","text":"<ul> <li>Added support for MythicMobs and Vault (see wiki for more info)</li> <li>AutoUpdater is now enabled by default! If you want you can change this and reload the plugin, nothing will be downloaded in that case</li> <li>Book saving format has changed. All books were automatically converted, but you need to check them if everything looks like it's supposed to.</li> <li>Command event accepts multiple commands separated by \"|\", eg. \"command say beton|say quest\"</li> <li>Event command now accepts optional  argument at the end; this will fire event for  player. eg. \"/q event wood_reward Steve\" <li>Journal title and lore can now use colors (&amp;4 etc.) and journal is colorful; options in config.yml</li> <li>Added aliases for /q command: bq, bquest, bquests, betonquest, betonquests, quest, quests</li> <li>Added aliases for /j command: bj, journal, bjournal, betonjournal</li> <li>Objectives are now defined directly in event instruction, not in objectives.yml (which was deleted, if you want to restore something check the backup)</li> <li>Replies in conversations are now optionally clickable (tellraw option in config.yml)</li> <li>Added permission for starting a conversation: betonquest.conversation</li> <li>Conversation starting/ending, updating journal, plugin's update and full inventory can now make sounds; you can find a list of possible values here: jd.bukkit.org/rb/apidocs/org/bukkit/Sound.html</li> <li>Conditions for events are now defined as 'event_conditions:' instead of simply 'conditions:'. This is to distinguish conditions for objectives and for events, as both of them can exist in one instruction</li> <li>Updater is now run when disabling the plugin (it does matter if your server restarts every night) Notes:</li> <li>All Objective events has been converted to new format. The objectives.yml file has been deleted, so if it contained any objectives not covered by an event they may seem lost. However there is a backup file and you can extract everything from it. Please refer to the wiki to learn how objectives are now defined or just study converted ones (it's pretty straightforward).</li> <li>AutoUpdater is now enabled by default. Every future update will be working exactly like before, all changes will be automatically updated by a converter, there is always a backup and you are informed about all changes in this file. So it's pretty safe to say that keeping this plugin up to date won't give you any trouble. If you don't want to have latest fixes and features you can disable updating, but this will make the developer sad.</li> <li>Because of changes in how books behave since 1.8, you may experience some strange bugs with saving books to items.yml. Generally, you should open a book before saving it using /q item command. And don't start or end your books with \" character, as it's part of a workaround of this bug/feature.</li>"},{"location":"Documentation/CHANGELOG/#143-2014-12-15","title":"[1.4.3] - 2014-12-15","text":"<ul> <li>Removed debug messages from ActionObjective. You could have told me, any of you guys...</li> </ul>"},{"location":"Documentation/CHANGELOG/#142-2014-12-09","title":"[1.4.2] - 2014-12-09","text":"<ul> <li>Really fixed an updater.</li> </ul>"},{"location":"Documentation/CHANGELOG/#141-2014-12-09","title":"[1.4.1] - 2014-12-09","text":"<ul> <li>Fixed few bugs in Action objective.</li> <li>Fixed updater, hopefully.</li> </ul>"},{"location":"Documentation/CHANGELOG/#14-2014-12-07","title":"[1.4] - 2014-12-07","text":""},{"location":"Documentation/CHANGELOG/#changes_13","title":"Changes","text":"<ul> <li>Conversations are now divided into multiple files in \"conversations\" directory</li> <li>Items are now saved to items.yml file and referenced by \"take\", \"give\", \"item\" and \"hand\" events/conditions</li> <li>Added /q item  command which saves currently held item to the config as specified itemID <li>Added location to Action objective, which checks the location of the block (unlike location condition which checks the location of the player)</li> <li>Added /q event  command which fires specified event <li>Fixed multiple bugs with conversation starting and ending</li> <li>Block NPCs can now be used with Citizens enabled</li> <li>Added NPCKill objective for killing NPCs</li> <li>Added SetBlock event for setting a block at specified location</li> <li>Improved Material matching in configs</li> <li>Modified Action objective for greater flexibility:<ul> <li>It is now possible to detect clicking in air</li> <li>It is no longer possible to detect clicking on any block (as this accepts clicking on air)</li> <li>It can be used to detect book reading (with the help of updated Hand condition)</li> </ul> </li> <li>Added AutoUpdater; it's disabled by default Notes:</li> <li>Conversion of configuration should have been done automatically, you don't have to worry about anything. If something went wrong, you can revert changes from generated backup file, which contains all your previous configs.</li> <li>You can enable AutoUpdater by setting \"autoupdate\" to true in config.yml. It is completely safe because all next versions will generate backups and convert all files automatically. You will be notified on joining the server about the new changelog file.</li> <li>Please refer to the wiki for changes in formatting instruction strings for various things: https://github.com/Co0sh/BetonQuest/wiki</li> <li>You probably should also change the names of converted items to something else than \"item12\". But that works too.</li>"},{"location":"Documentation/CHANGELOG/#13-2014-11-30","title":"[1.3] - 2014-11-30","text":""},{"location":"Documentation/CHANGELOG/#changes_14","title":"Changes","text":"<ul> <li>UUID support (optional)</li> <li>NPCs made from a clay block, head and sign, for servers without Citizens2 plugin</li> <li>Global, long and persistent delay for events (as an objective)</li> <li>Folder event for multiple events, with optional short delay</li> <li>French translation (thanks to fastlockel)</li> <li>If you want to convert names to UUIDs run the plugin once and then change in the config \"uuid: false\" to true. Do not touch the \"convert: true\" option unless you want your database wiped! Conversion will happen on next plugin reload (eg. /q reload). This is not revertable!</li> <li>Remember to backup your config files before updating! It shouldn't destroy anything but you never know.</li> </ul>"},{"location":"Documentation/CHANGELOG/#12-2014-11-23","title":"[1.2] - 2014-11-23","text":"<ul> <li>Global locations now automatically run only once, no need for blocking it with tags and conditions. They use however tags that follow the syntax \"global_\", where  is global location objective tag. <li>Added optional respawn location for canceled death objective, just add \"respawn:100.5;200;300.5;world;90;0\" to instruction string.</li> <li>Added German translation, thanks to coalaa!</li> <li>Added optional movement blocking while in conversation, add option \"stop: true\" or \"stop: false\" in every conversation.</li> <li>Changed priority of conversation chat event to lowest, should work even for muted players.</li> <li>Fixed data values in block objective.</li> <li>Added metrics, you can disable them by setting \"metrics: false\" in config.yml</li> <li>Added support for SQLite, plugin will use it when connecting to MySQL fails.</li> <li>Fixed death objective not working every time and not removing all effects.</li>"},{"location":"Documentation/CHANGELOG/#11-2014-11-08","title":"[1.1] - 2014-11-08","text":"<ul> <li>Fixed many bugs including but not limited to:<ul> <li>negated conjunction condition</li> <li>unnecessary debug messages</li> <li>not working global locations</li> </ul> </li> <li>Replaced config examples with default quest</li> <li>Leaving data values in item's definition will make plugin ignore data value in most cases</li> <li>Improved journal to stop text leaks</li> <li>Item names now replace _ with spaces</li> </ul>"},{"location":"Documentation/CHANGELOG/#10-2014-11-06","title":"[1.0] - 2014-11-06","text":"<ul> <li>Initial release</li> </ul>"},{"location":"Documentation/Frequently-Asked-Questions/","title":"FAQ","text":"<p>If you have any questions please read this page first. You can easily look for your questions using the table of contents  to the right. It's very likely that it has been already asked and answered.  If not, feel free to ask us in the Discord </p>"},{"location":"Documentation/Frequently-Asked-Questions/#where-is-the-command-for-creating-quests","title":"Where is the command for creating quests?","text":"<p>There is no such command. BetonQuest is too complex to edit it using commands or chest GUI's.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#can-you-add-particles-over-npcs-heads-like-in-quests-plugin","title":"Can you add particles over NPCs' heads like in \"Quests\" plugin?","text":"<p>Yes! Check out the EffectLib compatibility documentation.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#can-i-assign-multiple-conversation-files-to-one-npc","title":"Can I assign multiple conversation files to one NPC?","text":"<p>No. You can use cross-conversation-pointers though.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#can-i-delete-all-tags-from-a-player-at-once","title":"Can I delete all tags from a player at once?","text":"<p>No. You either need to run all <code>/q t del PLAYER PACKAGE.TAG</code> commands, or you can use <code>/q purge PLAYER</code> to reset an entire player profile. If you want this as a scripted part of your quest however: Either use a folder event that holds all tag-deleting events. Or use a <code>run</code> event in which you specify all tag-deleting events at once. (We will improve this don't worry)</p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-do-i-start-an-objective-from-a-conversation","title":"How do I start an objective from a conversation?","text":"<p>Use the objective event.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#why-is-x-thing-not-working","title":"Why is X thing not working?","text":"<p>If something stopped working before asking for help please do /q reload and READ THE OUTPUT IN CONSOLE! You will be able to see which events etc. loaded and which didn't with the reasons why. You may be able to fix it yourself from this or use this information, so we can better help you!</p> <p>Also double check you saved your files and if needed re-upload them to your server. This is insanely common and can be overlooked!</p>"},{"location":"Documentation/Frequently-Asked-Questions/#i-have-an-error-which-says-cannot-load-pluginsbetonquestsomefileyml-what-is-wrong","title":"I have an error which says \"Cannot load plugins/BetonQuest/{someFile}.yml\", what is wrong?","text":"<p>You have incorrect YAML syntax in your conversation file. Usually it's because you started a line with <code>!</code> or <code>&amp;</code>, forgot colons or made some weird things with apostrophes.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-to-get-a-formatted-version-of-the-blockobjectives-variables","title":"How to get a formatted version of the BlockObjective's variables?","text":"<p>The math variable is perfect for this. <code>/papi parse USER %betonquest_BlockVar:math.calc:|objective.test.left|%</code></p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-to-display-1-10-in-objective-notify","title":"How to display \"1 / 10\" in objective notify","text":"<p>This problem can be solved by scripting a small custom message system.</p> <p>The core ideas of that system are:</p> <ul> <li> <p>An objective always has an amount of 1 as we want to show a message upon each progression towards our goal.</p> </li> <li> <p>The objective instantly restarts after it is finished thanks to the <code>persistent</code> argument.    It will be deleted using the objective event once it's finished.</p> </li> <li> <p>The systems logic is essentially just a point variable that is increased on each completion and a notify event being run.   That notify event displays the current objective progress.</p> </li> <li> <p>The objective gets reset with an event that has a condition bound to it. That means that the event will only be run once   the condition is true. in this case the player needs 10 points / needs to have mined 10 blocks.</p> </li> </ul> <p>Here is an example for the block objective. <pre><code>objectives:\n  mineStone: \"block stone -1 persistent events:blockBroken\"\n\nevents:\n  blockBroken: \"folder addPoint,sendNotify,checkForCompletion\"\n\n  addPoint: \"point blockCounter 1\"\n  sendNotify: \"notify &amp;a%point.blockCounter.amount%&amp;8/&amp;210 &amp;7stone broken. io:chat\"\n\n  checkForCompletion: \"folder deleteObjective,deletePoint conditions:has10Points\"\n  deleteObjective: \"objective remove mineStone\"\n  deletePoint: \"deletepoint blockCounter\"\n\nconditions:\n  has10Points: \"point blockCounter 10\"\n</code></pre></p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-can-i-let-the-npc-say-things-across-multiple-lines","title":"How can I let the NPC say things across multiple lines?","text":"<p>You need to use the PIPE <code>|</code> character at the start of the multiline string. <pre><code>text: |\n  This is line one.\n  This is line two.\n\n          You\n        can also\n  format this using spaces.\n</code></pre></p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-to-deal-with-unresolvable-variables-that-show-0","title":"How to deal with unresolvable variables that show \"0\"?","text":"<p>You can just add them together using <code>math.calc</code>. <pre><code>%math.calc:objective.PickWheat1.left+objective.PickWheat2.left+objective.PickWheat3.left+objective.PickWheat4.left'\n</code></pre></p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-to-match-different-items-with-just-one-condition","title":"How to match different items with just one condition?","text":"<p>If you want a player to have e.g. <code>potato + poisonous_potato = 64</code> in his inventory you can make a special item in your  <code>items</code> section file that matches items based of their names.  More specifically, you can have a Block Selector that is a regex. It would look like this in the example: <pre><code>items:\n  anyPotato: \".*potato.*\"\n\nconditions:\n  hasAnyPotato: \"item anyPotato\"\n</code></pre></p>"},{"location":"Documentation/Frequently-Asked-Questions/#how-to-store-custom-text-in-a-variable-how-to-use-the-variable-objective","title":"How to store custom text in a variable / How to use the variable objective?","text":"<ol> <li> <p>Start a variable objective for the player. It serves as a variable storage: <pre><code>objectives:\n  myVariableStorage: \"variable no-chat\"\n</code></pre></p> </li> <li> <p>Assign values to that storage using a key and a value. Both can be any text you like: <pre><code>events:\n  addBlock: \"variable myVariableStorage blockName REDSTONE\"\n  addLocation: \"variable myVariableStorage location 123;456;789;world\"\n</code></pre></p> </li> <li> <p>Read from your variable storage using the storages name and the data key. <pre><code>conditions:\n  hasHeartBlock: \"testforblock %objective.myVariableStorage.location% %objective.myVariableStorage.blockName%\"\n</code></pre></p> </li> </ol>"},{"location":"Documentation/Frequently-Asked-Questions/#error-quester-is-not-defined","title":"Error \"Quester is not defined\"","text":"<p>You either actually did not define the <code>quester: someName</code> option at the top of your conversation, or your YAML syntax is invalid. YAML Syntax Errors are the HUGE red lines that you see when you do /q reload. They lead to the file not being properly read -&gt; All kinds of errors like \"can't find quester etc.\" Copy your file into http://www.yamllint.com/ to confirm that it is actually a YAML error and fix your syntax. Best practise is to define all options like this: <code>myOptionName: \"myData\"</code> The double quotes prevent YAMl issues with e.g. <code>!</code>.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#other-plugins-override-betonquest-commands-betonquest-overrides-other-commands","title":"Other plugins override BetonQuest commands / BetonQuest overrides other commands!","text":"<p>You can change which command is used, using a Bukkit feature: https://bukkit.fandom.com/wiki/Commands.yml</p>"},{"location":"Documentation/Frequently-Asked-Questions/#handling-death-in-your-quests","title":"Handling death in your quests","text":"<p>Sometimes, while writing a dangerous quest you will want something specific to happen when the player dies. If it's a boss battle you may want to fail the quest, if it's a dungeon you may want to respawn the player at the beginning of a level etc. You can do that with <code>die</code> objective - simply start it for the player at the beginning of the quest and make it fire events that will do the thing you want (like teleporting the player to desired respawn point, removing tags set during the quest etc). You can add <code>persistent</code> argument to the objective instruction string to make it active even after completing it. Remember to <code>delete</code> it after the quest is done!</p>"},{"location":"Documentation/Frequently-Asked-Questions/#creating-regions-for-one-player-at-the-time","title":"Creating regions for one player at the time","text":"<p>Imagine you have a room to which the player is teleported. Then suddenly mobs start to spawn and the player must kill them (because it's a trap or something). The player has killed all the mobs, he got a tag and wants to proceed but all of the sudden another player teleports into the room and all the mobs start to spawn again. The first player is quickly killed and the second one easily kills all mobs. You can prevent such situations by using <code>party</code> condition. Just check with it if the party consisting of \"players inside the room\" has greater amount of players than 1. Set the range to something big enough so it covers the room and the party condition can be tag or location.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#racing-with-folder-event","title":"Racing with folder event","text":"<p>Since <code>folder</code> event can run <code>tag</code> events even for offline players you can create races. Create <code>location</code> objective where you want the finish line to be and condition it with negated \"race_failed\" tag (or similar). It will mean that \"if the player has not failed the race, he can win it by reaching the location\". Now when the race starts fire <code>folder</code> event with the amount of time you want to give your players to complete the race. This event should set \"race_failed\" tag. If the player reaches the location before this tag is set, he will fire all events in that <code>location</code> objective, but if the time has passed, the objective will not be completed. You can figure the rest out for yourself.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#random-daily-quests","title":"Random daily quests","text":"<p>Starting the random quest must be blocked with a special tag. If there is no such tag, the conversation option should appear. Create a few quests, each of them started with single <code>folder</code> event (they must be started by single event!). Now add those events to another <code>folder</code> event and make it <code>random:1</code>. At the end of every quest add <code>delay</code> which will reset the special blocking tag. Now add that <code>folder</code> event to the conversation option. When the player chooses it he will start one random quest, and the conversation option will become available after defined in <code>delay</code> objective time after completing the quest.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#the-same-random-daily-quest-for-every-player","title":"The same random daily quest for every player","text":"<p>To do this use something called \"Schedules Run a scheduled <code>folder</code> event every day at some late hour (for example 4am). The <code>folder</code> event should be <code>random:1</code> and contain several different <code>globaltag</code> events. These events will set a specific tag. Now when the player starts the conversation and asks about the daily quest the NPC should check (using the <code>globaltag</code> condition) which tag is currently set and give the player different quests based on that. Of course, the scheduled folder event also needs to remove the current tag before setting a new one.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#global-quests-all-players-work-together","title":"Global Quests (all players work together)","text":"<p>There is no easy way to do this (yet). Additionally, every use case differs. Let's assume you have some sort of event on your server where your player's need to fish 100 salmons. The quest package is only installed during the event.</p> <p>Create an objective that is immediately fired upon the first interaction (this means setting the amount to one for most objectives). That objective must be <code>persistent</code> so it restarts immediately upon completion. It also has to be <code>global</code> so every player will receive it upon joining the server. <pre><code># fish a salmon to progress the global quest\ngQuest: fish SALMON 1 events:gQuestProgress global persistent\n</code></pre> The objective would trigger a folder event that increases a <code>globalpoint</code> variable by one and tries to run the events that are fired upon completion. That globalpoint variable tracks the players combined progress. The \"completion events\" must be limited by a <code>globalpoint</code> condition that checks whether the <code>globalpoint</code> variable has reached a certain value.</p> eventsconditions <pre><code># 1. increase the global variable 2. wait one tick for the change to process 3. attempt to run the completion events\ngQuestProgress: folder gQuestIncrementCounter,gQuestCheckCompletion period:1 ticks\n# Adds 1 to the global variable\ngQuestIncrementCounter: globalpoint gQuest 1\n# Runs completion events only when the condition is met (= the global variable reached X points)\ngQuestCheckCompletion: folder gQuestNotify,gQuestOnCompletion,gDeleteObjective condition:gQuestComplete\n# Deletes the objective from everyone that fished a salmon after the goal was met\nqDeleteObjective: \"objective delete gQuest\"\n</code></pre> <pre><code># Complete at one hundred collected\ngquest_complete: globalpoint gquest 100\n</code></pre> <p>Downsides to this approach:</p> <ul> <li> <p>Only the player that fished the final salmon (number 100) will get the reward immediately. All other players need to fish an additional salmon to trigger the completion logic. Therefore a central NPC that also gives out rewards and shows the progress is recommended.</p> </li> <li> <p>Since some players logged off during the event while still having the objective, a clean-up package should be installed after the event. It will remove the objective from them - this is important as BetonQuest will complain about objectives that are still active for a player but are not referenced in any quest package. This will happen since you have to remove the event package after the event.</p> </li> </ul> <p>Such a package holds the original objective and clean-up objective:</p> objectivesevents <pre><code># Old objective just without global &amp; persistent to make sure no one get's it automatically\ngQuest: fish SALMON 1 events:gQuestProgress\n# Cleanup objective that is immediately completed when someone joins\nlogin events:deleteOldObjective global\n</code></pre> <pre><code># Deletes the old objective from the current player\ndeleteOldObjective: \"objective delete gQuest\"\n</code></pre>"},{"location":"Documentation/Frequently-Asked-Questions/#make-the-npc-react-randomly","title":"Make the NPC react randomly","text":"<p>Imagine you want to lie to NPC and he has 15% chance of believing you completely, 35% of being suspicious and 50% of not believing at all. The common denominator for those percentages is 20, so we can write it as 3/20, 7/20 and 10/20. The NPC will check options one after another until it finds one which meets all conditions. We will use <code>random</code> condition with our options. The first one will have <code>3-20</code> chance (that's the format used by <code>random</code> condition). If this condition fails, the NPC will check next option. But it won't be <code>7-20</code>, because we already \"used\" 3 of 20. If you wrote it like that, the chance would be too low. That's why it will be <code>7-17</code>. The third option should have <code>10-10</code> (because <code>17 - 7 = 10</code> and 50% is 10/20), but as you can see it will always be true. It's because we want the last option to be shown if both previous fail. You don't have to add the last condition at all.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#quest-gui","title":"Quest GUI","text":"<p>If you want your players to be able to choose a quest everywhere, every time, then you can create a conversation which can be started with an item. This one is a little hacky but it shows flexibility of BetonQuest. First you need a conversation which behaves as a quest choosing GUI. Name the NPC \"Quester\", add one option for each quest etc. Now you need an objective which will start this conversation using <code>conversation</code> event. It should be <code>action</code> objective, set to right click on any block. Add <code>hand</code> condition to make it accept only clicks with a specific item and make the objective <code>persistent</code> (so players can use it multiple times). The item used here should be marked as Quest Item so players can't drop it. Now define new global location covering your whole map and using it start the objective and give players the item. This way all players (existing and new) will get the quest item, which opens a GUI with quests when right clicked.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#non-linear-objectives-in-quests","title":"Non-Linear Objectives in Quests","text":"<p>If ever you're making a quest that has the player completing multiple objectives at once in order to complete the quest itself, you may want to add the option of being able to complete the objectives in a non-linear fashion (Objective C -&gt; Objective A -&gt; Objective B -&gt; Completed). There are multiple ways of doing this but this one is probably the simplest. Firstly, create as many objectives as you want. We are going to be working with three objectives:</p> objectives <pre><code>Objective_A: Objective_Arguments events:Rewards\nObjective_B: Objective_Arguments events:Rewards\nObjective_C: Objective_Arguments events:Rewards\n</code></pre> <p>Now that the player has been given these three objectives, we will also create three <code>objective</code> conditions that check the player for these objectives:</p> conditions <pre><code>Has_Objective_A: objective Objective_A\nHas_Objective_B: objective Objective_B\nHas_Objective_C: objective Objective_C\n</code></pre> <p>We will also create one <code>and</code> condition, which means a player must (or must not, depending on negation)  meet all conditions in order for it to return as true. In this case, the player must not be in the process of completing these objectives. The <code>!</code> in front of the ConditionIDs negates the arguments within the condition. Make sure you have wrapped the condition with <code>'</code> or <code>\"</code> depending on your preferences.</p> conditions <pre><code>All_Objectives_Done: 'and !Has_Objective_A,!Has_Objective_B,!Has_Objective_C'\n</code></pre> <p>Finally, create the event that you wanted to use to give the quest rewards to the player. To this event, you will add the <code>All_Objectives_Done</code> condition. This ensures that the event will not be fired unless the player has completed all objectives.</p> events <pre><code>Rewards: RewardEventArguments condition:All_Objectives_Done\n</code></pre> <p>Now, simply add this <code>Rewards</code> event to every one of your objectives and you have now created a way for players to complete a quest's objective in a non-linear fashion! You can add as many or as little objectives as you want, you just have to add the additional objectives to the conditions.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#creating-quest-menus","title":"Creating quest menus","text":"<p>To create a menu that gives the player an overview of his open quests just define one menu item for each quest. Set the conditions for this item, so it is only displayed if the quest is not finished (use the tag condition). Then assign all those items to a row of slots so that they are sorted perfectly.</p> <p>You can also add click events to display npc locations, add compass targets, directly open the conversations or cancel the quest.</p> <p>Or you could define separate items for open and finished quests or even to show the progress. Just be a bit creative.</p>"},{"location":"Documentation/Frequently-Asked-Questions/#menus-displaying-players-stats","title":"Menus displaying players stats","text":"<p>You may also use menus to display the stats of a player. Just use variables in the text or for the amount of an item.</p> <p>For example try displaying a players money using the variable from Vault integration or use PlaceholderAPI to show placeholders from many other plugins.</p>"},{"location":"Documentation/Overview/","title":"Overview","text":"<p>This is the complete reference documentation for BetonQuest. It has in depth explanations for all of BetonQuest's features, config options and permissions. </p> <p> New here? Start with the tutorials!</p>"},{"location":"Documentation/Overview/#betonquest-fundamentals","title":"BetonQuest Fundamentals","text":"<ul> <li> <p> Scripting Reference</p> <p>Learn the ins and outs of BetonQuest's scripting language.</p> <p> About Scripting</p> </li> <li> <p> Conversations</p> <p>Write immersive conversations between NPCs and players.</p> <p> Conversations</p> </li> <li> <p> Visual Effects</p> <p>Customize your server with quest npcs, holograms, particles and more.</p> <p> Visual Effects</p> </li> <li> <p> Quest Menus</p> <p>Create custom GUI menus for your quests and server.</p> <p> Quest Menus</p> </li> </ul>"},{"location":"Documentation/Configuration/Commands-and-permissions/","title":"Commands and permissions","text":""},{"location":"Documentation/Configuration/Commands-and-permissions/#commands","title":"Commands","text":"<p>Required arguments are displayed as such: <code>&lt;argument&gt;</code>. Optional arguments are displayed as such: <code>[argument]</code>.</p> <ul> <li><code>/j</code> - Gives the journal</li> <li><code>/backpack</code> - Opens the backpack</li> <li><code>/compass</code> - Opens the quest tracking compass</li> <li><code>/cancelquest</code> - Opens the quest canceler menu</li> <li><code>/q</code> - Lists all available admin commands</li> <li><code>/q reload</code> - Reloads the plugin</li> <li><code>/q objectives &lt;playerName&gt; &lt;list/add/del/complete&gt; &lt;objectiveName/filter&gt;</code> - Shows player's currently active objectives</li> <li><code>/q tags &lt;playerName&gt; &lt;list/add/del&gt; &lt;tag/filter&gt;</code> - Lists all player's tags</li> <li><code>/q globaltags &lt;list/add/del/purge&gt; &lt;tag/filter&gt;</code> - Manges global tags</li> <li><code>/q points &lt;playerName&gt; &lt;list/add/del&gt; &lt;category/filter&gt; &lt;amount&gt;</code> - Lists all player's points in all categories</li> <li><code>/q globalpoints &lt;list/add/del/purge&gt; &lt;category/filter&gt; &lt;amount&gt;</code> - Manges global points</li> <li><code>/q journal &lt;playerName&gt; &lt;list/add/del&gt; &lt;package.pointer/filter&gt; &lt;date&gt;</code> </li> <li><code>/q event &lt;playerName&gt; &lt;package.eventID&gt;</code> - Fires an event for the player</li> <li><code>/q condition &lt;playerName&gt; &lt;package.conditionID&gt;</code> - Shows if the player meet specified condition or not</li> <li><code>/q item &lt;package.itemID&gt;</code> - Creates an item based on what you're holding in hand</li> <li><code>/q variable &lt;playerName&gt; &lt;package.objectiveID&gt; &lt;list/set/del&gt; [key/filter] [value]</code> - Manage variables stored in <code>variable</code> objectives</li> <li><code>/q give &lt;package.itemID&gt;</code> - Gives you an item defined in the configuration</li> <li><code>/q purge &lt;playerName&gt;</code> - Deletes all player's data from the database</li> <li><code>/q rename &lt;tag/point/globalpoint/objective/entry&gt; &lt;oldName&gt; &lt;newName&gt;</code> - Renames all specified things in the database</li> <li><code>/q delete &lt;tag/point/objective/entry&gt; &lt;name&gt;</code> - Deletes all specified things in the database</li> <li><code>/q backup</code> - Creates a backup of configuration files and database</li> <li><code>/q update</code> - Updates the plugin to the newest version.</li> <li><code>/q version</code>: Displays the versions of BetonQuest, the server and all hooked plugins</li> <li><code>/q debug [true/false/ingame]</code>: Enable debug mode and write all down in a log file or disable the debug mode</li> <li><code>/q download &lt;gitHubNamespace&gt; &lt;ref&gt; &lt;type&gt; &lt;sourcePath&gt; [targetPath] [recursive] [overwrite]</code>: Download quests and templates from a GitHub repository</li> <li><code>/questlang &lt;lang&gt;</code> - Changes the language for the player. <code>default</code> language will use the language defined in config.yml.</li> <li><code>/rpgmenu reload &lt;menu&gt;</code> - Allows reloading all configuration files or just reloading the configuration of one specific menu.</li> <li><code>/rpgmenu list</code> - Lists all currently loaded menus and allows opening them just by clicking on them.</li> <li><code>/rpgmenu open &lt;menu&gt; [player]</code> - Opens a menu for you or another player. Opening conditions of the menu will be ignored when using this command.</li> </ul> <p>The filter only works on the list and will match all objectives/tags/points that start with the filter.  Please note, that the names are a composition of the package name and the name of the objective/tag/point.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#custom-menu-opening-commands","title":"Custom Menu Opening commands","text":"<p>The plugin lets you create a new command for each menu which allows all players to open the menu. You can also specify BetonQuest conditions so that the menu can only be opened if the player matches specific conditions. Have a look at the menu settings for more information.</p> <p>The server must be restarted to unregister command tab completions.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#aliases","title":"Aliases","text":"<ul> <li><code>/j</code>: bj, journal, bjournal, betonjournal, betonquestjournal</li> <li><code>/backpack</code>: b, bb, bbackpack, betonbackpack, betonquestbackpack</li> <li><code>/compass</code>: bc, bcompass, betoncompass, betonquestcompass</li> <li><code>/cancelquest</code>: bcq, bcancelquest, betoncancelquest, betonquestcancelquest</li> <li><code>/q</code>: bq, bquest, bquests, betonquest, betonquests, quest, quests<ul> <li><code>objective</code>: o, objectives</li> <li><code>tag</code>: t, tags</li> <li><code>point</code>: p, points</li> <li><code>event</code>: e, events</li> <li><code>condition</code>: c, conditions</li> <li><code>journal</code>: j, journals</li> <li><code>item</code>: i, items</li> <li><code>give</code>: g</li> <li><code>variable</code>: var</li> <li><code>rename</code>: r</li> <li><code>delete</code>: d, del</li> <li><code>create</code>: package</li> </ul> </li> <li><code>/questlang</code>: ql</li> <li><code>/rpgmenu</code>: rpgmenus, menu, menus, rpgm, qm</li> </ul>"},{"location":"Documentation/Configuration/Commands-and-permissions/#permissions","title":"Permissions","text":"<ul> <li><code>betonquest.admin</code> - allows using admin commands (/q, /rpgmenu ...)</li> <li><code>betonquest.journal</code> - allows using /j command (default for players)</li> <li><code>betonquest.backpack</code> - allows using /backpack command (default for players)</li> <li><code>betonquest.compass</code> - allows using /compass command (default for players)</li> <li><code>betonquest.cancelquest</code> - allows using /cancelquest command (default for players)</li> <li><code>betonquest.conversation</code> - allows talking with NPCs (default for players)</li> <li><code>betonquest.language</code> - allows changing the language (default for players)</li> </ul>"},{"location":"Documentation/Configuration/Commands-and-permissions/#betonquest-administration-command-betonquest","title":"BetonQuest administration command: <code>/betonquest</code>","text":"<p>Aliases: <code>/q</code>, <code>/bq</code>, <code>/quest</code>, <code>/quests</code>, <code>/bquest</code>, <code>/bquests</code>, <code>/betonquest</code>, <code>/betonquests</code></p> <p>Permission: <code>betonquest.admin</code></p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#reload-the-plugin-reload","title":"Reload the plugin: <code>reload</code>","text":"<p>Reloading loads all data from configuration, but not everything is updated. Player's data isn't touched to avoid lags made by database saving. The database is also the same, you will have to reload/restart the whole server for the database to change.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#interact-with-quest-primitives","title":"Interact with quest primitives","text":""},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-objectives-objective","title":"Manage objectives: <code>objective</code>","text":"<p>Objective subcommand allows you to list all active objectives (shown as their labels) of the player. It can also directly add or cancel objectives using instruction strings. You can also complete the objective for the player using <code>complete</code> argument - it will run all events and remove the objective.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-tags-tag","title":"Manage tags: <code>tag</code>","text":"<p>Tags subcommand allows you to easily list and modify tags. '<code>/q tags Beton</code>' would list tags for player Beton. '<code>/q tags Beton add test</code>' would add \"test\" tag for that player, and '<code>/q tags Beton del test</code>' would remove it.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-points-point","title":"Manage points: <code>point</code>","text":"<p>Points subcommand is similar - listing points is done the same way. Adding points to a category looks like that: '<code>/q points Beton add reputation 20</code>' (adding 20 points to \"reputation\" category). You can also subtract points with negative amounts. Removing the whole point category can be achieved by '<code>/q points Beton del reputation</code>'.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#run-events-event","title":"Run events: <code>event</code>","text":"<p>Running events for online players can be done with event argument: '<code>/q event Beton quest.give_emeralds</code>' would run <code>give_emeralds</code> for player Beton (if he's online) from the package <code>quest</code>. If you want to run a static event, replace player's name with <code>-</code>.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#check-conditions-condition","title":"Check conditions: <code>condition</code>,","text":"<p>There is also condition argument for checking conditions, for example '<code>/q condition Beton has_food</code>'. Events and conditions need to be defined in their files, this command doesn't accept raw instructions. If you want to check a static condition replace the player's name with <code>-</code>.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-the-journal-journal","title":"Manage the journal: <code>journal</code>","text":"<p>Journal subcommand works in the same way as those two above. Adding and removing looks like <code>/q journal Beton add quest.wood_started</code> (or <code>del</code>), and you can also specify the date of entry when adding it, by appending date written like this: <code>23.04.2014_16:52</code> at the end of the command. Note that there is <code>_</code> character instead of space!</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-items-give-and-item","title":"Manage items: <code>give</code> and <code>item</code>","text":"<p>If you need to create for example \"Nettlebane\" quest item, just hold it in your hand and type '<code>/q item nettlebane</code>'. It will copy the item you're holding into the items.yml file and save it there with the name you specified (in this case \"nettlebane\"). You can skip the package name here as well.</p> <p>The '<code>/q give package.item</code>' command will simply give you specified item.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#manage-variables-variable","title":"Manage variables: <code>variable</code>","text":"<p>This command relates to active variable objectives. You can list all <code>key-value</code> pairs with an optional objective filter. Further can such a value be set for a key with <code>set &lt;key&gt; &lt;value&gt;</code>or an existing pair removed by using <code>del &lt;key&gt;</code>.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#purge-player-data-purge","title":"Purge player data: <code>purge</code>","text":"<p>You can purge specific player with '<code>/q purge Beton</code>' command, where Beton is the name of the player. To purge the entire database at once simply change the prefix in config.yml or delete database.db file.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#delete-data-from-the-database-delete","title":"Delete data from the database: <code>delete</code>","text":"<p>Delete command ('<code>/q delete</code>') allows you to delete from the database every tag, point, objective or journal entry with specified name.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#rename-a-quest-primitive-without-loosing-data-rename","title":"Rename a quest-primitive without loosing data: <code>rename</code>","text":"<p>Rename command ('<code>/q rename</code>') allows you to rename every tag, point, globalpoint, objective or journal entry in the database. In case of an objective it will also rename the objective in objectives section in the configuration file, so it continues to work correctly.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#create-a-backup-backup","title":"Create a backup: <code>backup</code>","text":"<p>If you want to backup your configuration and database make sure that your server is empty  (this process requires all data to be saved to database -&gt; all players offline) and run '<code>/q backup</code>' command. You will get a zip file containing all your data, ready to be unzipped for restoring the plugin.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#update-the-plugin-update","title":"Update the plugin: <code>update</code>","text":"<p>Update command ('<code>/q update</code>') will try to download the newest version of the plugin and save it to the update folder. This folder is then handled by the server to update the plugin. If you accidentally use this command but do not wish to update the plugin, you should remove <code>BetonQuest.jar</code> file from the <code>plugins/update</code> folder before restarting/reloading the server.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#debug-quests-and-betonquest-debug","title":"Debug quests and BetonQuest: <code>debug</code>","text":"<p>The debug command ('<code>/q debug</code>') allows you to enable or disable the debug mode. If the debug mode is enabled after server startup ('<code>/q debug true</code>'), all log entries from the configured log history time frame are written to the <code>/plugins/BetonQuest/logs/latest.log</code> file as history and writing will be continued until the debug mode is disabled using ('<code>/q debug false</code>'). The <code>latest.log</code> is renamed to the current date and time on server startup. It's useful if you search for more information about an issue and can help developers to fix bugs.</p> <p>The command ('<code>/q debug ingame</code>') allows you to manage your ingame debugging. The ingame debugging sends you live information about quests to your chat. Running the command without any argument shows your active filters. If you don't have any filters active you will see all console output from <code>/q reload</code>. If you have filters active you only see information from the selected packages. Appending a package name activates the filter for that package. You can also use <code>*</code> / <code>MyFolder-*</code> instead of a package name to address all packages / all packages of a folder. Appending a level allows you to select which types of messages are displayed. The default level <code>error</code> shows all <code>WARNINGS</code> and <code>ERRORS</code> from the log. If you want to see more information use the levels <code>info</code> or <code>debug</code>. Beware though, the debug level might be spammy.</p>"},{"location":"Documentation/Configuration/Commands-and-permissions/#download-from-github-download","title":"Download from GitHub: <code>download</code>","text":"<p>The download command (<code>/q download</code>) can be used to download tutorial quests &amp; quest templates from the Quest-Tutorials repository. For example <code>/q download BetonQuest/Quest-Tutorials refs/tags/v2.0.0 QuestPackages /default</code> will download the <code>default</code> tutorial quest and place it in the same folder. The first argument (<code>gitHubNamespace</code>) is the github repository in the format user/repo or organisation/repo. Before you can download from a repo you need to add the namespace to the <code>repo_whitelist</code> in the BetonQuest config. This is a security measure that prevents users from screwing up all your quests or downloading malicious files if they get the permission to run this command by accident. The second argument (<code>ref</code>) is either a commit SHA or a git reference to a specific commit that should be downloaded. For a branch (eg. <code>main</code>)  <code>refs/heads/main</code> works. For a tag it is <code>refs/tags/tagname</code>. Pull request references ( eg. <code>refs/pull/1731/head</code>) are also possible but must be enabled in the config. Keep in mind that anyone can open a pullrequest so use this very carefully. Third argument (<code>type</code>) is either <code>QuestPackages</code> or <code>QuestTemplates</code> depending on what type you want to download. As 4<sup>th</sup> argument (<code>sourcePath</code>) you define what folders to download from the repo. It is appended to the type to get the full Path in the repo. Optionally you may add a 5<sup>th</sup> parameter: <code>targetPath</code> is where in your BetonQuest folder the files shall be put, relative to either the QuestPackages or QuestTemplates folder defined as <code>type</code>. If you want to place some QuestTemplates inside <code>QuestPackages</code> you can do this by adding <code>../QuestTemplates/</code> to the beginning of the target path. Additionally you can add tags to the end of the command to control behavior of the downloader: If <code>recursive</code> is added nested packages or templates will be downloaded while by default they will be skipped. The tag <code>overwrite</code> defines that already existing files may be overwritten. By default, an error is logged and the download is stopped.</p>"},{"location":"Documentation/Configuration/Configuration/","title":"Configuration","text":"<p>The configuration of BetonQuest is mainly done in the <code>config.yml</code> file. All of its options are described on this page. There is also additional information about backups, updates and database transfers. If you fail to understand options just keep their default values. You can always change them when you have gained a more complete understanding of this plugin. </p>"},{"location":"Documentation/Configuration/Configuration/#config-options","title":"Config Options","text":"<p>Warning</p> <p>Do not touch <code>version:</code> option! It may corrupt your files!</p>"},{"location":"Documentation/Configuration/Configuration/#mysql-database","title":"MySQL Database","text":""},{"location":"Documentation/Configuration/Configuration/#setup","title":"Setup","text":"<p>In order to use a MySQL Database for saving all the data you need to fill out the mysql config section. <pre><code>mysql:\n  enabled: true   #Set this to true.\n  host: ''        #This is the IP of your MySQL server. If it runs on the same machine as your server use localhost or 127.0.0.1 \n  port: ''        #This is the port your MySQL server runs on.\n  user: ''        #The name of the database user that is used to connect to the database server.\n  pass: ''        #The password of that user.\n  base: ''        #The database that BetonQuest will write to. You need to create it in your database server.\n  prefix: betonquest_  #The table prefix of BetonQuest's data in the database.\n  reconnect_interval: 1000 #The time intervall the database tries to reconnect if the connection gets lost\n</code></pre></p>"},{"location":"Documentation/Configuration/Configuration/#migrating-a-database-from-sqlite-to-mysql-and-back","title":"Migrating a database from SQLite to MySQL and back","text":"<p>Follow these few simple steps to migrate your database easily:</p> <ol> <li>Create a backup with /q backup command.</li> <li>Extract database backup from it.</li> <li>Turn the server off.</li> <li>Place the database-backup.yml file inside the plugin's directory.</li> <li>Edit which database type you want to use by setting the <code>enabled</code> option in the <code>mysql</code> section to true or false.</li> <li>Start the server.</li> <li>Check for errors.</li> <li>If there are no errors, enjoy your migrated database.</li> <li>If there are any errors, post them to the developer or try to fix them if you know how.</li> </ol>"},{"location":"Documentation/Configuration/Configuration/#default-language","title":"Default Language","text":"<p><code>language:</code> is the default translation of the plugin for every new player. Currently, there are 9 languages available:  English (en), Polish (pl), German (de), French (fr), Spanish (es), Chinese (cn), Dutch (nl), Italian (it) and Hungarian (hu).</p>"},{"location":"Documentation/Configuration/Configuration/#updating","title":"Updating","text":"<p>The <code>update</code> section controls the Auto-Updater. It has the following settings:</p> <ul> <li><code>enabled</code> (default <code>true</code>). Enables or disables the Updater. If set to false, it is not possible to update with the   updater and no version checks are executed.</li> <li><code>strategy</code> (default <code>MINOR</code>). The update strategy is the most important feature of the Auto-Updater. An explanation is   available here.</li> <li><code>automatic</code> (default <code>true</code>). If true the updater will download new Versions automatically. Otherwise, the updater   will only download new versions when the update command is executed. Advice is   available here.</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#journal-slots","title":"Journal slots","text":"<p><code>default_journal_slot</code> is the inventory slot in which the journal will appear after using the <code>/journal</code> command. BetonQuest will try to move items out of the way if the slot is occupied. If the inventory is full the journal will not be added. You can disable this behaviour by setting the option to <code>-1</code>. BetonQuest will then just use any free slot.</p>"},{"location":"Documentation/Configuration/Configuration/#npc-left-click","title":"Npc left click","text":"<p><code>npcs.accept_left_click</code> activates that a conversation with an NPC can also be started by left clicking the NPC and not only by right clicking the NPC.</p>"},{"location":"Documentation/Configuration/Configuration/#npc-interact-limit","title":"Npc interact limit","text":"<p><code>npcs.interaction_limit</code> prevents NPC / BetonQuest conversation click spamming. The time's unit is milliseconds. Default value: <code>500</code></p>"},{"location":"Documentation/Configuration/Configuration/#conversation-end-distance","title":"Conversation End Distance","text":"<p><code>max_conversation_distance</code> is the distance you need to walk away from the NPC for the conversation to end (in the case of using chat-based conversation interface).</p>"},{"location":"Documentation/Configuration/Configuration/#default-conversation-style","title":"Default Conversation Style","text":"<p><code>default_conversation_IO</code> is a comma-separated list of conversation styles. The first one that is loaded (depending on the available 3<sup>rd</sup> party plugin integrations) is used. See conversation styles for supported styles.</p>"},{"location":"Documentation/Configuration/Configuration/#default-chat-interceptor","title":"Default Chat interceptor","text":"<p><code>default_interceptor</code> is a comma-separated list of chat interceptors. The first one that is loaded (depending on the available 3<sup>rd</sup> party plugin integrations) is used. See chat interceptors for supported chat interceptors.</p>"},{"location":"Documentation/Configuration/Configuration/#default-hologram-plugin","title":"Default Hologram Plugin","text":"<p>The holograms related features work with multiple plugins. You can use the <code>default_hologram</code> option to set which plugin should be used.</p> <p><code>default_hologram: DecentHolograms,HolographicDisplays</code> will make DecentHolograms the default hologram plugin. If it is not installed,  HolographicDisplays will be used instead. If you want to use HolographicDisplays as the default, you can use <code>default_hologram: HolographicDisplays</code></p>"},{"location":"Documentation/Configuration/Configuration/#conversation-chat-display-options","title":"Conversation Chat Display options","text":"<p><code>display_chat_after_conversation</code> this will prevent all chat messages from displaying during a conversation and it will show them once it's finished.</p>"},{"location":"Documentation/Configuration/Configuration/#combat-delay","title":"Combat Delay","text":"<p><code>combat_delay</code> is a delay (in seconds) the player must wait before starting a conversation after combat.</p>"},{"location":"Documentation/Configuration/Configuration/#conversation-pullback-message","title":"Conversation pullback message","text":"<p><code>notify_pullback</code> will display a message every time the player is pulled back by the <code>stop</code> option in conversations (in the case of chat-based conversations). It notifies players that they are in a conversation, and the pullback is not a bug.</p>"},{"location":"Documentation/Configuration/Configuration/#adjusting-the-backpack-to-the-keepinventory-gamerule","title":"Adjusting the backpack to the KeepInventory gamerule","text":"<p><code>remove_items_after_respawn</code> option should be turned on if \"keepInventory\" gamerule is not being used.  It prevents other plugins from duplicating quest items after death.</p> <p>When a player dies, their quest items are removed from drops and stored in the backpack, but some plugins may try to restore all items to the player (for example WorldGuard custom flag keep-inventory). That is why BetonQuest removes the quest items that are in a player's inventory after they respawn again, to be sure they were not re-added.  The \"keepInventory\" gamerule, however, works differently - the items are never dropped, so they cannot be added to backpack.  Removing them from the inventory would destroy them forever. Sadly, Bukkit does not allow for gamerule checking, so it is up to you to decide.</p> <p>Once again, if you have \"keepInventory\" gamerule true, this setting has to be false and vice versa.</p>"},{"location":"Documentation/Configuration/Configuration/#quest-items-break-behaviour","title":"Quest Items break behaviour","text":"<p><code>quest_items_unbreakable</code> controls whether quest items can be broken by using them. This was used in the past when the <code>unbreakable</code> tag couldn't be added to items. Turn it off and make your quest items unbreakable by vanilla means.</p>"},{"location":"Documentation/Configuration/Configuration/#player-hider-interval","title":"Player Hider interval","text":"<p><code>player_hider_check_interval</code> the interval in which the PlayerHider checks the conditions and updates the player's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value. </p>"},{"location":"Documentation/Configuration/Configuration/#npc-hider-interval","title":"NPC Hider interval","text":"<p><code>npc_hider_check_interval</code> is the interval in which the NPCHider checks the conditions and updates the NPC's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value.</p>"},{"location":"Documentation/Configuration/Configuration/#hologram-update-interval","title":"Hologram update interval","text":"<p><code>hologram_update_interval</code> is the interval in which the holograms check the conditions and update content and visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value.</p>"},{"location":"Documentation/Configuration/Configuration/#sounds","title":"Sounds","text":"<p>This section defines what sounds will be played on these occasions:</p> <ul> <li><code>start</code> when a conversation starts</li> <li><code>end</code> when a conversation ends</li> </ul> <p>A list of all possible sounds for the latest Minecraft version can be found here. And sounds can be disabled by setting them to <code>false</code>.</p>"},{"location":"Documentation/Configuration/Configuration/#conversation-command-banlist","title":"Conversation Command Banlist","text":"<p><code>cmd_blacklist</code> is a list of commands that cannot be used during a conversation. Remember that you can only type single words (command names) here!</p>"},{"location":"Documentation/Configuration/Configuration/#compatibility-hooks","title":"Compatibility Hooks","text":"<p><code>hook</code> controls compatibility with other plugins. You can turn off each hook here.</p>"},{"location":"Documentation/Configuration/Configuration/#journal","title":"Journal","text":"<p><code>journal</code> controls various settings of the journal:</p> <ul> <li><code>chars_per_page</code> is the number of characters before a page break. If it is set too high, the text on a journal page can overflow and become invisible.    This was replaced by <code>chars_per_line</code> and <code>lines_per_page</code> and is only required if you don't like the new behaviour.</li> <li><code>chars_per_line</code> is the number of characters before a line break.    If it is set too high, the text on a journal page can overflow and become invisible.    If this is not set, BQ will fall back on the old page wrapping behaviour configured through <code>chars_per_page</code>.</li> <li><code>lines_per_page</code> is the number of lines before a new page. If it is set too high, the text on a journal page can overflow and become invisible.     This is only required if <code>chars_per_line</code> is set.</li> <li><code>one_entry_per_page</code> makes each entry take a single page. Note that it will not expand to other pages even if it overflows, so keep your entries short.</li> <li><code>reversed_order</code> controls the chronological order of entries in the journal. By default, the entries are ordered from newest to oldest.    It is reversible, but this will force players to click through many pages to get to the most recent entry.</li> <li><code>hide_date</code> hides the date of each entry. Set it to true if you don't want this functionality.</li> <li><code>full_main_page</code> makes the main page always take a full page. If a lot of information is being displayed, it is advised to make this true.    If you use the main page only for small notifications, set it to false, so the entries can follow immediately.</li> <li><code>show_separator</code> shows a separator between journal entries (default: true). Customize the separator in <code>config.yml</code> with the key <code>journal.separator</code>.</li> <li><code>show_in_backpack</code> whether to display the journal in the backpack when there is no journal in the player's inventory.</li> <li><code>lock_default_journal_slot</code> locks the journal to the <code>default_journal_slot</code>.</li> <li><code>give_on_respawn</code> adds the journal to the player inventory.</li> <li><code>custom_model_data</code> sets the custom model data of the journal item.</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#journal-colors","title":"Journal Colors","text":"<p><code>journal_colors</code> controls the colors used in the journal. It takes color codes without the <code>&amp;</code> character.</p> <ul> <li><code>date.day</code> is the day number</li> <li><code>date.hour</code> is the hour number</li> <li><code>line</code> is the delimiter between entries</li> <li><code>text</code> is the text of the entry</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#conversation-colors","title":"Conversation Colors","text":"<p><code>conversation_colors</code> controls the colors of the conversation. It takes color names.  If you want to add a font style (bold, italic etc.) do so after placing a comma.</p> <ul> <li><code>npc</code> is the name of the NPC</li> <li><code>player</code> is the name of the player</li> <li><code>text</code> is the NPC's text</li> <li><code>answer</code> is the text of player's answer (after choosing it)</li> <li><code>number</code> is the option number</li> <li><code>option</code> is the text of an option</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#conversation-settings-chestio-slowtellrawio","title":"Conversation Settings: ChestIO &amp; SlowTellrawIO","text":"<ul> <li><code>conversation_IO_config</code> manages settings for individual conversation IO's:</li> <li><code>chest</code> manages settings for the chest conversation IO<ul> <li><code>show_number</code> will show the player number option if true (default: true)</li> <li><code>show_npc_text</code> will show the npc text in every player option if true (default: true)</li> </ul> </li> <li><code>slowtellraw</code> manages settings for the slowtellraw conversation IO<ul> <li><code>message_delay</code> is the delay ticks between each message (default: 2)</li> </ul> </li> </ul>"},{"location":"Documentation/Configuration/Configuration/#quest-downloader","title":"Quest downloader","text":"<p><code>download</code> controls security restrictions for the <code>/q download</code> command:</p> <ul> <li><code>pullrequests</code> defines if pull requests may be downloaded. Only enable this if you really know what you are doing!   Everyone can open pull requests that could contain malicious files and if a permission misconfiguration occurs this   will make your server vulnerable to attacks.</li> <li><code>repo_whitelist</code> is a list of trusted github repositories from which quests and templates can be downloaded.   By default only or official tutorial repo BetonQuest/Quest-Tutorials   is on this list.</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#items","title":"Items","text":"<p>The items section allows you to override the default items that are displayed across BetonQuest's GUIs. All items you specify here need to be defined in a package. You need to reference the item with a full path.</p> <p>The <code>cancel_button</code> and <code>compass_button</code> can be removed from the backpack by setting their values to <code>\"\"</code>.</p> <pre><code>items:\n  backpack: #(1)!\n    previous_button: \"my_package.backpack_previous_button\" #(2)!\n    next_button: \"my_package.backpack_next_button\" #(3)!\n    cancel_button: \"my_package.backpack_cancel_button\" #(4)!\n    compass_button: \"my_package.backpack_compass_button\" #(5)!\n</code></pre> <ol> <li>All items that are used by the backpack.</li> <li>The button to go to the previous backpack page.</li> <li>The button to go to the next backpack page.</li> <li>The quest cancelers. Can be removed from the backpack by setting the value to <code>\"\"</code>.</li> <li>The quest compass. Can be removed from the backpack by setting the value to <code>\"\"</code>.</li> </ol>"},{"location":"Documentation/Configuration/Configuration/#menu","title":"Menu","text":"<ul> <li><code>default_close</code>:  Sets if menus should close by default when an item is clicked (<code>true</code>) or if they should stay open (<code>false</code>).   Each menu can also override this.</li> </ul>"},{"location":"Documentation/Configuration/Configuration/#misc-settings","title":"Misc settings","text":"<ul> <li><code>date_format</code> is the Java date format   used in journal dates. It needs to have a space between the day and hour.</li> <li><code>debug</code> control debug log settings. The debug log contains a lot of additional information about the plugin's activity.<ul> <li><code>enabled</code> if enabled the debug log is printed to the latest.log file in the BetonQuest/logs directory.   Turning this on can slow your server down.</li> <li><code>history_in_minutes</code> the plugin always caches debugging activity to the memory.    Once <code>debug</code> is enabled this history is printed to the log file and no longer stored in memory.    This is invaluable for debugging issues that happened in the past without having debug enabled all the time.    The downside is that depending on the amount of scripts and players this can be a lot of data occupying your memory.    So if you have memory issues, you can reduce the time the history is stored in memory down to 0 minutes to disable it.</li> </ul> </li> <li><code>message_parser</code> sets the default message parser.   For more information, see the Message Formatting page.</li> </ul>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/","title":"Migration 1.X to 2.X","text":"<p>This guide explains how to migrate from BetonQuest 1.12.X or any BetonQuest 2.0.0 dev build to BetonQuest 2.0.0.</p> <p>The majority of changes will be migrated automatically. However, some things must be migrated manually.</p> <p>The migration will first find any 1.12 packages in the BetonQuest plugin folder and migrate them to the 2.0 package format. It will then place them inside the newly introduced QuestPackages folder. Then it updates everything inside the QuestPackages folder to the new 2.0 syntax. This way the migration works for both 1.12 and 2.0.0-DEV packages.</p> <p>Warning</p> <p>Before you start migrating, you should backup your server!</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#changes","title":"Changes","text":"<p>Steps marked with  are migrated automatically. Steps marked with  must be done manually.</p> <ul> <li>2.0.0-DEV-87 - Rename to <code>ride</code> </li> <li>2.0.0-DEV-98 - RPGMenu Merge </li> <li>2.0.0-DEV-238 - Package Structure Rework </li> <li>2.0.0-DEV-337 - Event Scheduling Rework </li> <li>2.0.0-DEV-450 - Package section </li> <li>2.0.0-DEV-485 - Experience changes </li> <li>2.0.0-DEV-538 - Smelt Objective </li> <li>2.0.0-DEV-539 - NPC Holograms </li> <li>2.0.0-DEV-644 - Database migration for profiles </li> <li>2.0.0-DEV-647 - EffectLib </li> <li>2.0.0-DEV-674 - MMO Updates </li> <li>2.0.0-DEV-749 - Static Event Rework </li> <li>2.0.0-DEV-769 - RemoveEntity-Event </li> <li>2.1.0-DEV-1 - Instruction Quoting </li> <li>2.1.1-DEV-2 - Rename AuraSkills </li> <li>2.2.0-DEV-89 - Rename Fabled </li> </ul>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-87-rename-to-ride","title":"2.0.0-DEV-87 - Rename to <code>ride</code>","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>To unify the naming for riding a vehicle, we renamed the condition (<code>riding</code>) and the objective (<code>vehicle</code>) to <code>ride</code>.</p> Old Syntax (conditions.yml)<pre><code>rideHorse: riding Horse\n</code></pre> New Syntax (conditions.yml)<pre><code>rideHorse: ride Horse\n</code></pre> Old Syntax (objectives.yml)<pre><code>rideHorse: vehicle Horse events:teleport\n</code></pre> New Syntax (objectives.yml)<pre><code>rideHorse: ride Horse events:teleport\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-98-rpgmenu-merge","title":"2.0.0-DEV-98 - RPGMenu Merge","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>All existing RPGMenu users must update their RPGMenu config file. Simply rename it from <code>rpgmenu.config.yml</code> to <code>menuConfig.yml</code>.</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-238-package-structure-rework","title":"2.0.0-DEV-238 - Package Structure Rework","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <ul> <li>Ensure your server is running on Java 17</li> <li>Move your current Quests to the folder \"BetonQuest/QuestPackages\"`, as quests are now loaded from there</li> <li>Rename all \"main.yml\" files to \"package.yml\"</li> <li>Quest packages can now contain nested quest packages in sub folders. You can also have any file and folder structure   with any file and folder names you want. Only the \"package.yml\" is reserved as indicator for a quest   package.</li> <li> <p>Therefore, the \"events.yml`, \"objectives.yml\", \"conditions.yml\", \"journal.yml\" and \"items.yml\" files must     be updated to the following format:     Every type that was previously a separate file with a special name is now identified by a \"parent-section\". It's     the names of the type / the name the file previously had. Let's take a look at an example for events and conditions:</p> Old events.yml<pre><code>myEvent: \"teleport 1;2;3;world\"\nmyOtherEvent: \"point level 1\"\n</code></pre> New events.yml<pre><code>events:\n  myEvent: \"teleport 1;2;3;world\"\n  myOtherEvent: \"point level 1\"\n</code></pre> old conditions.yml<pre><code>myCondition: \"location 300;200;300;world\"\n</code></pre> New conditions.yml<pre><code>conditions:\n  myCondition: \"location 300;200;300;world\"\n</code></pre> <p>This allows you to freely name the files. Also, it is no longer necessary that events, conditions etc. are in separate files. You could also put everything in a single file or use any other file structure:</p> anyFileName.yml<pre><code>events:\n  myEvent: \"teleport 1;2;3;world\"\n  myOtherEvent: \"point level 1\"\nconditions:\n  myCondition: \"location 300;200;300;world\"\n</code></pre> <p>Warning</p> <p>You must do this change for all types, not just events and conditions! </p> </li> <li> <p>Alongside the previous change, conversations and menus must also be updated to the following format:   Add an extra prefix matching their type and the file name:</p> Old lisa.yml<pre><code>quester: Lisa\nfirst: option1, option2\nNPC_options:\n  option1:\n  # ...\n</code></pre> <p> New anyFileName.yml<pre><code>conversations:\n  lisa: #(1)!\n    quester: Lisa\n    first: option1, option2\n    NPC_options:\n      option1:\n      # ...\n</code></pre> <ol> <li>This key is now the conversation name that you must refer to when linking NPCs to conversations. </li> </ol> <p>Or alternatively: New anyFileName.yml<pre><code>conversations.lisa:\n  quester: Lisa\n  first: option1, option2\n  NPC_options:\n    option1:\n    # ...\n</code></pre></p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-337-event-scheduling-rework","title":"2.0.0-DEV-337 - Event Scheduling Rework","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <ul> <li>All your static events need to be converted to the new scheduling system.   The <code>realtime-daily</code> schedule makes this easy:</li> </ul> Old Syntax<pre><code>static:\n  '09:00': beton\n  '11:23': some_command,command_announcement\n</code></pre> New Syntax<pre><code>schedules:\n  betonAt09: #(1)!\n    type: realtime-daily #(2)!\n    time: '09:00' #(3)!\n    events: beton #(4)!\n  cmdAt1123:\n    type: realtime-daily\n    time: '11:23'\n    events: some_command,command_announcement\n</code></pre> <ol> <li> <p>A name for the new schedule.     Can be anything you want for organizing your schedules.</p> </li> <li> <p>The type schedule <code>realtime-daily</code> was created for easy updating.      It behaves just like the old static events.</p> </li> <li> <p>The former key is now the time value.     You still have to put it in 'quotes'.</p> </li> <li> <p>The former value is now the events value.</p> </li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-450-package-section","title":"2.0.0-DEV-450 - Package Section","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <ul> <li>There is now a new section <code>package</code> for organizing package related settings.   As a result of this the <code>enabled</code> boolean was moved to this section.   If you use the <code>enabled</code> boolean you need to move it to the <code>package</code> section.</li> </ul> Old Syntax<pre><code>enabled: false\n</code></pre> New Syntax<pre><code>package:\n  enabled: false\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-485-experience-changes","title":"2.0.0-DEV-485 - Experience changes","text":"<p>Due to a misuse of the Server API, all code regarding player experience (<code>experience</code> event, condition and objective) had to be changed. It is not possible to obtain the amount of experience points a player has, only their level can be obtained.</p> <p>If you used any of these elements you might have to adjust the configured values because the behaviour changed as follows:</p> <ul> <li>The <code>experience</code> objective and condition do not allow raw experience anymore. Only levels are supported from now on.</li> <li>The <code>experience</code> objective, condition and event now supports decimal numbers.   For example, you can use <code>experience 1.5</code> to check for one and a half level.   You can convert raw experience points to levels, using such decimal numbers.</li> </ul>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-538-smelt-objective","title":"2.0.0-DEV-538 - Smelt Objective","text":"<p>The <code>smelt</code> objective now requires a quest item instead of a BlockSelector. Therefore, you now need to define the item you want to smelt in the items section. It is recommended to use the <code>/q item packageName.ItemName</code> command to save the target item from in-game. This will save the item you currently hold in your hand to the given package with the given name. After you did this, you need to replace the BlockSelector in the <code>smelt</code> objective with the item's name. </p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-539-npc-and-non-npc-holograms","title":"2.0.0-DEV-539 - NPC and Non-NPC Holograms","text":"<p>Potentially Faulty Automatic Migration</p> <p>In some cases this migration will not be run although the configuration is in the 1.12 format.  This is the case because it is not possible to reliably detect if the configuration must be migrated - it simply has not changed enough. If the (NPC-)hologram section does NOT contain one of the following keys the migration will NOT be run: </p> <ul> <li><code>follow</code></li> <li><code>check_interval</code> </li> </ul> <p>If this is the case you need to update the configration manually. See the steps below.</p> <p>Both NPC and Non-NPC Holograms were reworked. Mainly three things have to be changed:</p> <ul> <li>The <code>vector</code> is now above the head of the NPC by default. This was previously achieved with <code>0;3;0</code>. Therefore, every hologram that has defined a vector is now three blocks higher than before. If it is set to <code>0;3;0</code> delete the vector argument. Otherwise, subtract <code>3</code> from the y-axis.</li> <li>The <code>follow</code> boolean can now be set for each NPC Hologram, so you have to add it to each NPC Hologram. It's off by default. Don't add it to still-standing NPCs. This will save you a lot of performance.</li> <li>The <code>check_interval</code> can now be set for each NPC Hologram as well. This allows for finer control over how much server resources are used.</li> </ul> Old Syntax<pre><code>npc_holograms:\n  check_interval: 200\n  follow: true\n  default:\n    lines:\n      - \"Some text!\"\n    conditions: \"has_some_quest\"\n    vector: 0;3;0\n    npcs:\n      - 0\n      - 22\n</code></pre> New Syntax<pre><code>npc_holograms:\n  default:\n    lines:\n      - \"Some text!\"\n    conditions: \"has_some_quest\"\n    vector: 0;0;0 #(1)!\n    check_interval: 200 #(2)!\n    follow: true #(3)!\n    npcs:\n      - 0\n      - 22\n</code></pre> <ol> <li>You can delete this if you had <code>0;3;0</code> previously as the origin was changed. Subtract 3 from the y-axis for any other value.</li> <li>You can delete this if you had the default value of <code>200</code> (or whatever you set in \"config.yml\").</li> <li>You can delete this if you had the default value of <code>false</code>.</li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-644-database-migration-for-profiles","title":"2.0.0-DEV-644 - Database migration for profiles","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>The database migrated to a new format for profiles and every profile will have a name. You can set a initial creation name in your config.yml, so every new generated profile (through migration or joining of a new player) will get this name.  If you don't set a initial name, the initial name will be \"default\".</p> config.yml<pre><code>profiles:\n  initial_name: player # (1)!\n</code></pre> <ol> <li>Only set this if you want to change the initial name. If you don't set this, the initial name will be \"default\".</li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-647-effectlib","title":"2.0.0-DEV-647 - EffectLib","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>The EffectLib integration was rewritten. With this rewrite, the following things are now possible:</p> <ul> <li>NPC effects will now move with the NPC</li> <li>Effects can be assigned to locations</li> </ul> <p>The following changes need to be done:</p> <ul> <li>Rename <code>npc_effects</code> to <code>effectlib</code>.</li> <li>Add <code>pitch: -90</code> to preserve the old rotation to NPC effects.</li> <li>Remove <code>check_interval</code> from the npc_effects section</li> <li>Remove <code>disabled</code> from the npc_effects section</li> </ul> Old Syntax<pre><code>npc_effects:\n   check_interval: 50\n   disabled: false\n   farmer:\n      class: VortexEffect\n      iterations: 20\n      particle: crit_magic\n      helixes: 3\n      circles: 1\n      grow: 0.1\n      radius: 0.5\n      interval: 30\n      npcs:\n         - 1\n      conditions:\n         - '!con_tag_started'\n         - '!con_tag_finished'\n</code></pre> New Syntax<pre><code>effectlib: \n   farmer: \n      class: VortexEffect \n      iterations: 20 \n      particle: crit_magic \n      helixes: 3\n      circles: 1\n      grow: 0.1\n      radius: 0.5\n      pitch: -60 #(4)!\n      yaw: 90\n      interval: 30 #(1)!\n      checkinterval: 80 #(2)!\n      npcs: #(3)!\n         - 1 \n      locations:\n         - 171;72;-127;world\n      conditions: \n         - '!con_tag_started'\n         - '!con_tag_finished'\n</code></pre> <ol> <li>This field is optional. You can delete this if you had the default value of <code>100</code>.</li> <li>This field is new and optional. It replaces the old <code>check_interval</code> field. You can delete this if you had the default value of <code>100</code>.</li> <li>In case you never had the <code>npcs</code> field and the effect were played on every npc in the package, you now need to add the <code>npcs</code> section with every npc the effect should be played at.</li> <li>In case you never had the <code>pitch</code> field, you need to use the default value of <code>-90</code>. </li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-674-mmo-updates","title":"2.0.0-DEV-674 - MMO Updates","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>A change related to the integration of the MMO suite by Phoenix Development was made.  The objectives <code>mmocorecastskill</code> and <code>mmoitemcastability</code> were merged into the <code>mmoskill</code> objective. The <code>mmoskill</code> objective works exactly like its predecessors, but also supports defining one or more trigger types.</p> <p>See the objective's documentation for more information.</p> Old Syntax<pre><code>castMMOCoreSkill: \"mmocorecastskill DEEP_WOUND\"\ncastMMOItemSkill: \"mmoitemcastability DEEP_WOUND\"\n</code></pre> New Syntax<pre><code>castMMOCoreSkill: \"mmoskill DEEP_WOUND trigger:CAST\"\ncastMMOItemSkill: \"mmoskill DEEP_WOUND trigger:RIGHT_CLICK\"\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-749-static-event-rework","title":"2.0.0-DEV-749 - Static Event Rework","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>Until now if you used non-static events in a schedule, they were executed for every player that was online at the time. If you run such a schedule now you will get a warning message in the console similar to this:</p> <p>Example</p> <pre><code>[15:27:10 WARN]: [BetonQuest] Cannot fire non-static event 'announcements.ringBell' without a player!\n</code></pre> <p>To fix this wrap the event in a <code>runForAll</code> event:</p> Old Syntax<pre><code>events:\n  # Events that require a player (non-static events).\n  bell_sound: 'notify io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  # Player independent events (static events).\n  notify_goodNight: 'notifyall &amp;6Good night, sleep well!'\n\n\nschedules:\n  sayGoodNight:\n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring,notify_goodNight\n</code></pre> New Syntax<pre><code>events:\n  # Events that require a player (non-static events).\n  bell_sound: 'notify io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  # Player independent events (static events).\n  notify_goodNight: 'notifyall &amp;6Good night, sleep well!'\n  bell_ring_all: 'runForAll events:bell_ring' #(1)!\n\nschedules:\n  sayGoodNight:\n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring_all,notify_goodNight #(2)!\n</code></pre> <ol> <li>Runs <code>bell_ring</code> for all online players.</li> <li><code>notify_goodNight</code> is a static event, so no need to wrap it in <code>runForAll</code>.</li> </ol> <p>While this seems like more work for the same functionality it gives you more control over how events are run. With this change we finally allow using conditions in schedules! Just keep in mind you can only add player dependent conditions if the event is run player dependent (wrapped inside <code>runForAll</code>).</p> <p>Tip</p> <p>To check if your event still works inside a schedule or if it must be wrapped, use the following command to run the event without a player:</p> <p><pre><code>/q event - &lt;package&gt;.&lt;event&gt;\n</code></pre> The <code>-</code> is important, it means run independent .</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#200-dev-769-removeentity-event","title":"2.0.0-DEV-769 - RemoveEntity-Event","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>As you probably noticed, the <code>ClearEntity</code> event and the <code>KillMob</code> event did almost the same thing. Both got merged into the RemoveEntity event, while keeping the syntax more or less the same.</p> Old Syntax<pre><code>events:\n  clearArea: 'clear ZOMBIE,CREEPER 100;200;300;world 10 name:Monster'\n  killBolec: 'killmob ZOMBIE 100;200;300;world 40 name:Bolec'\n</code></pre> New Syntax<pre><code>events:\n  clearArea: 'removeentity ZOMBIE,CREEPER 100;200;300;world 10 name:Monster'\n  killBolec: 'removeentity ZOMBIE 100;200;300;world 40 name:Bolec kill'\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#210-dev-1-instruction-quoting","title":"2.1.0-DEV-1 - Instruction Quoting","text":"<p>BetonQuest had quoting support since November 2018, but unfortunately it was broken from the very start and also never properly documented.</p> <p>You probably don't need to change anything, but it is recommended to read how quoting works.</p> <p>If you are facing errors for instructions containing the double quote character <code>\"</code> then you might need to escape them:</p> Old Syntax<pre><code>events:\n  literal: notify \"special\\secret\"message #(1)!\n  quoted: notify this\" was quoted\" previously #(2)!\n  parameter: tag add x condition:\"with space\"\nconditions:\n  \"with space\": tag \"other tag\"\n</code></pre> <ol> <li>Output: \"special\\secret\"message</li> <li>Output: this was quoted previously</li> </ol> New Syntax<pre><code>events:\n  literal: notify \"\\\"special\\\\secret\\\"message\" #(1)!\n  quoted: notify \"this was quoted previously\" #(2)!\n  parameter: tag add x \"condition:with space\" #(3)!\nconditions:\n  \"with space\": tag \"other tag\"\n</code></pre> <ol> <li>When quoting add <code>\\</code> before every <code>\"</code> and already existing <code>\\</code>.</li> <li>Do not quote only a part of a message, but instead the full message.</li> <li>Move the quote before the parameter name.</li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#211-dev-2-rename-auraskills","title":"2.1.1-DEV-2 - Rename AuraSkills","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>AureliumSkills was renamed to AuraSkills, so all conditions and events where renamed as well.</p> Old Syntax<pre><code>conditions:\n  skillLevel: aureliumskillslevel fighting 5\n  statLevel: aureliumstatslevel luck 5\nevents:\n  giveSkillXP: aureliumskillsxp farming 5\n</code></pre> New Syntax<pre><code>conditions:\n  skillLevel: auraskillslevel fighting 5\n  statLevel: auraskillsstatslevel luck 5\nevents:\n  giveSkillXP: auraskillsxp farming 5\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-1-2/#220-dev-90-rename-fabled","title":"2.2.0-DEV-90 - Rename Fabled","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>ProSkillAPI was renamed to Fabled, so all conditions were renamed as well.</p> Old Syntax<pre><code>conditions:\n  class: skillapiclass warrior\n  level: skillapilevel warrior 3\n</code></pre> New Syntax<pre><code>conditions:\n  class: fabledclass warrior\n  level: fabledlevel warrior 3\n</code></pre>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/","title":"Migration 2.X to 3.X","text":"<p>This guide explains how to migrate from the latest BetonQuest 2.X version to BetonQuest 3.X.</p> <p>The majority of changes will be migrated automatically. However, some things must be migrated manually.</p> <p>Warning</p> <p>Before you start migrating, you should backup your server!</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#changes","title":"Changes","text":"<p>Steps marked with  are migrated automatically. Steps marked with  must be done manually.</p> <ul> <li>3.0.0-DEV-58 - Delete messages.yml </li> <li>3.0.0-DEV-65 - Delete menuConfig.yml </li> <li>3.0.0-DEV-71 - Renamed Translation Keys </li> <li>3.0.0-DEV-114 - Npc Rework </li> <li>3.0.0-DEV-135 - Citizens Adaption to NpcID </li> </ul>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#300-dev-58-delete-messagesyml","title":"3.0.0-DEV-58 - Delete messages.yml","text":"<p>The <code>messages.yml</code> file has been removed. All messages are now stored in the <code>lang</code> folder, you can also customize them there and add new languages. If you still have the old messages.yml file, you get a warning in the console. If you dont have any custom messages, you can delete the file safely otherwise you should move the messages to the new location.</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#300-dev-65-delete-menuconfigyml","title":"3.0.0-DEV-65 - Delete menuConfig.yml","text":"<p>The <code>menuConfig.yml</code> file has been removed. If you had the option <code>default_close</code> configured, you can now find this option in the <code>config.yml</code> file. All translations in the config where also moved to the <code>lang</code> folder, so also here you need to move your custom translations.</p>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#300-dev-71-renamed-translation-keys","title":"3.0.0-DEV-71 - Renamed Translation Keys","text":"Automated Migration <p>The migration is automated. You shouldn't have to do anything.</p> <p>All translations where moved from the messages.yml file to individual files in the <code>lang</code> folder. Also all keys for the langusges have been renamed to match the new lang-region format, where lang and region are always two letters. So the mapping of the old to the new keys is as follows:</p> Old Key New Key Old Key New Key Old Key New Key Old Key New Key en en-US de de-DE es es-ES fr fr-FR hu hu-HU it it-IT nl nl-NL pl pl-PL pt-br pt-BR pt-pt pt-PT ru ru-RU vi vi-VN cn zh-CN <p>If you have custom translations, you need to move them to the new <code>lang</code> folder. Because the keys have been renamed, you need to rename the keys in some parts of config files and scripts.</p> new config.yml<pre><code>    language: en-US\n</code></pre> Old Syntax Events<pre><code>events:\n  notify: notify {en} English text {de} Deutscher text\n</code></pre> New Syntax Events<pre><code>events:\n  notify: notify {en-US} English text {de-DE} Deutscher text\n</code></pre> <p>And the most complicated change is everywhere you used multiple languages in sections, here is only one example:</p> Old Conversation<pre><code>conversations:\n  unkown:\n    quester:\n      en: Jane Doe\n      de: Erika Mustermann\n</code></pre> New Conversation<pre><code>conversations:\n  unkown:\n    quester:\n      en-US: Jane Doe\n      de-DE: Erika Mustermann\n</code></pre> <p>The same applies to all other sections where you used multiple languages, this should be a complete list:</p> <ul> <li><code>conversations.*.quester</code></li> <li><code>conversations.*.NPC_options.*.text</code></li> <li><code>conversations.*.player_options.*.text</code></li> <li><code>compass.*.name</code></li> <li><code>cancel.*.name</code></li> <li><code>journal.*</code></li> <li><code>journal_main_page.*.text</code></li> <li><code>menus.*.items.*.text</code></li> </ul>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#300-dev-114-npc-rework","title":"3.0.0-DEV-114 - Npc Rework","text":"<p>To support more Npc plugins than just Citizens the system got a rework.</p> <p>Npcs are now addressed with IDs and defined in the <code>npcs</code> section. Starting conversations with Npc interaction is moved inside the <code>npc_conversations</code> section.</p> <p>Also, the <code>teleportnpc</code> event got renamed to <code>npcteleport</code>.</p> <p>In addition, the <code>npc</code> variable to get the quester name of the current conversation got changed to <code>quester</code>. That change is automated.</p> <p>You can keep most of the syntax when you use the Citizens Npc id as their BetonQuest identifier, but changing the \"name\" makes the difference more clear.</p> <p>Also, the <code>citizens_npcs_by_name</code> configuration option was removed in favor of the <code>byName</code> argument.</p> Old Syntax<pre><code>npcs:\n  '0': \"HansConv\" #(1)!\n  '1': \"HansConv\"\nevents:\n  teleportNpc: teleportnpc 0 100;200;300;world #(2)!\nconditions:\n  nearNpc: npcdistance 0 10 #(2)!\n  nearNpcTwo: npcdistance 1 10\nconversations:\n  HansConv: #(3)!\n    quester: Hans\n    first: Hello\n    NPC_options:\n      Hello:\n        text: Hello Adventurer!\n</code></pre> <ol> <li>The conversation the interaction with the Npc will start.</li> <li>The <code>0</code> is here the citizens npc id.</li> <li>The conversation name as used in the <code>npcs</code> section.</li> </ol> New Syntax<pre><code>npcs:\n  0: \"citizens 0\" #(1)!\n  HansTwo: \"citizens 1\" #(2)!\n\nnpc_conversations:\n  0: HansConv #(3)!\n  HansTwo: HansConv #(4)!\nevents:\n  teleportNpc: npcteleport 0 100;200;300;world #(3)!\nconditions:\n  nearNpc: npcdistance 0 10 #(3)!\n  nearNpcTwo: npcdistance HansTwo 15 #(4)!\nconversations:\n  HansConv:\n    quester: Hans\n    first: Hello\n    NPC_options:\n      Hello:\n        text: Hello Adventurer!\n</code></pre> <ol> <li>The <code>0</code> before the ':' is now the BetonQuest ID, where the <code>citizens 0</code> defines the Npc with id \"0\" from the  Citizens integration. </li> <li>Here we use a name for the id to make the difference more clear.</li> <li>The <code>0</code> is here the BetonQuest NpcID but stays the same.</li> <li>An example of a \"renamed\" reference.</li> <li>The Npcs that start this conversation.</li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Migration-2-3/#300-dev-135-citizens-adaption-to-npcid","title":"3.0.0-DEV-135 - Citizens Adaption to NpcID","text":"<p>To streamline usage of Npcs the Citizens specific events and objective now also use the NpcID introduced in 3.0.0-DEV-114. Also, the <code>movenpc</code> and <code>stopnpc</code> events are renamed into <code>npcmove</code> and <code>npcstop</code>.</p> <p>As in the migration above stated you can either use a descriptive name as the id or use the numeric Citizens id of the Npc.</p> Old Syntax<pre><code>events:\n  move: movenpc 0 100;200;300;world #(1)!\n  stop: stopnpc 0\nobjectives:\n  kill: npckill 1 amount:5 events:reward\n</code></pre> <ol> <li>The <code>0</code> is here the citizens npc id.</li> </ol> New Syntax<pre><code>npcs:\n  0: \"citizens 0\" #(1)!\n  thief: \"citizens thief byName\"\n\nevents:\n  move: npcmove 0 100;200;300;world\n  stop: npcstop 0 #(2)!\nobjectives:\n  kill: npckill thief amount:5 events:reward\n</code></pre> <ol> <li>The <code>0</code> before the ':' is now the BetonQuest ID, where the <code>citizens 0</code> defines the Npc with id \"0\" from the  Citizens integration. </li> <li>The <code>0</code> is here the BetonQuest NpcID but stays the same.</li> </ol>"},{"location":"Documentation/Configuration/Version-Changes/Updating/","title":"Updating","text":""},{"location":"Documentation/Configuration/Version-Changes/Updating/#updating-betonquest","title":"Updating BetonQuest","text":"<p>BetonQuest has a comfortable Auto-Updater, that you can use without any problem, but there are some things that you need to be aware of. Alternatively you can install updated manual by your self.</p> <p>Read the update section to correctly set up the Auto-Updater.</p> <p>For a production/live system it is recommended to disable automatic updates and to check out the CHANGELOG before you execute <code>/q update</code> for manual updates.</p> <p>Updating BetonQuest</p> <p>If you update BetonQuest from a previous Major version you should check what you need to update manually.</p> <p>From 1.X to 2.X you should read the Migration-1-2 guide. From 2.X to 3.X you should read the Migration-2-3 guide.</p>"},{"location":"Documentation/Configuration/Version-Changes/Updating/#understanding-versioning","title":"Understanding Versioning","text":"<p>A plugin version is a number that consists of three parts in the format <code>MAJOR.MINOR.PATCH</code>. Example: <code>2.4.3</code></p> <p>When we release a new version of BetonQuest we will change these numbers in a specific way. Each number has a fixed meaning, that is explained in the following table.</p> Digit <code>MAJOR</code> (2) <code>MINOR</code> (4) <code>PATCH</code> (3) Bug Fixes New Features Breaking Changes"},{"location":"Documentation/Configuration/Version-Changes/Updating/#choose-an-update-strategy","title":"Choose an Update Strategy","text":"<p>Valid update strategies are: <code>MAJOR</code>, <code>MINOR</code>, <code>PATCH</code> and <code>MAJOR_DEV</code>, <code>MINOR_DEV</code>, <code>PATCH_DEV</code></p> <p><code>MINOR</code> and <code>PATCH</code> strategy are really safe to use, even on a production/live system. You will receive bugfixes and new features, that will not have an impact on your existing stuff. <code>MAJOR</code> strategy is not recommended for production/live systems, they can break everything. For a test system, you need to decide weather you want to stay on the latest version with <code>MAJOR</code> or you want to be more stable.</p> <p>By adding the <code>_DEV</code> suffix to the update strategy, you also download dev-builds for the corresponding version. Dev-builds can contain everything: Bug fixes and new features, but also new bugs or even worse it beaks something, so don't use this on a production/live system without checking out the changes.</p>"},{"location":"Documentation/Configuration/Version-Changes/Updating/#enable-or-disable-automatic-updates","title":"Enable or Disable automatic updates","text":"<p>Apart from the version you also have to choose if you want BetonQuest to update automatically or only after confirmation. Having automatic updates enabled is handy for <code>PATCH</code> and <code>MINOR</code> but risky on <code>MAJOR</code> strategies. Automatic updates for any <code>_DEV</code> version are dangerous as these can contain very severe bugs. Only use this for test servers.</p> <p>Disabling automatic updates still allows the use of <code>/q update</code>!</p>"},{"location":"Documentation/Configuration/Version-Changes/Updating/#backups-and-restoring","title":"Backups and Restoring","text":""},{"location":"Documentation/Configuration/Version-Changes/Updating/#creating-backups","title":"Creating Backups","text":"<p>After a manual or automatic update BetonQuest might update some quest packages or the database to a new format. If a file or the database is touched, an automatic backup will be created and is saved as a zip file to <code>BetonQuest/Backups/</code> to prevent losing your work due to errors.</p> <p>A backup can also be created manually by running the backup command.</p>"},{"location":"Documentation/Configuration/Version-Changes/Updating/#restoring-backups","title":"Restoring Backups","text":"<p>You find your backups as zip file in the folder <code>BetonQuest/Backups/</code> containing every configuration and a dump of you database. To restore a chosen backup stop your server, delete all the files in the folder <code>BetonQuest/</code>, except <code>BetonQuest/Backups/</code>, and replace them with the files from the chosen backup zip file and start your server again.</p> <p>If you only want to restore the database then stop your server, only delete the existing database file and extract the database backup file from the zip archive and start your server again.</p>"},{"location":"Documentation/Features/Conversations/","title":"Conversations","text":"<p>Conversations are the main way to interact with players in BetonQuest. They are used to display text, ask questions and  execute commands. This page contains the reference documentation for all conversation related features. Consider doing the conversation tutorial if you are just getting started.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#general-information","title":"General Information","text":"<p>A conversation is a sequence of questions and answers. It is started by a NPC and can be ended by both the player or the NPC.</p> Example conversation<pre><code>conversations: #(1)!\n  mayorHans: #(2)!\n    quester: \"Hans the Mayor\" #(3)!\n    first: \"welcome,blacksmithReminder\" #(4)!\n    stop: \"true\"  #(5)!\n    final_events: \"setCityState\" #(6)!\n    interceptor: \"simple\" #(7)!\n    NPC_options: #(8)!\n      welcome:\n        text: \"Good day, dear %player%! Welcome back to my town.\" #(10)!\n        events: \"playSound,giveMoney\" #(12)!\n        conditions: \"firstVisit,!criminal\" #(11)!\n        pointers: \"friendly,hostile\" #(13)!\n      blacksmithReminder:\n        text: \"Please visit the blacksmith, he has a task for you.\"\n        conditions: \"!criminal\"\n      howDareYou:\n        text: \"How dare you to talk to me like that?! Get out of my sight!\"\n    player_options: #(9)!\n      friendly:\n        text: \"Thank you your honor, I'm happy to be here.\"\n        event: \"givePresent\"\n        pointer: \"blacksmithReminder\"\n      hostile:\n        text: \"Your Honor, I come bearing a ultimatum letter from the people. They have grown tired of your corruption and greed.\"\n        condition: 'hasUltimatumLetter'\n        pointers: \"howDareYou\"\n</code></pre> <ol> <li>All conversation must be defined in a <code>conversations</code> section.</li> <li><code>mayorHans</code> is the name of the conversation, which is used to reference the conversation. </li> <li><code>Hans</code> is the visual name of NPC that is displayed during the conversation.</li> <li><code>first</code> are pointers to options the NPC will use at the beginning of the conversation. He will choose the first one that meets all conditions. You      define these options in <code>npc_options</code> branch.</li> <li><code>stop</code> determines if player can move away from an NPC while in this conversation (false) or if he's stopped every time     he tries to (true). If enabled, it will also suspend the conversation when the player quits, and resume it after he      joins back in. This way he will have to finish his conversation no matter what. You can modify     the distance at which the conversation is automatically stopped / player is teleported back with <code>max_conversation_distance</code> option in config.yml.</li> <li><code>final_events</code> are events that will fire when the conversation ends, no matter how it ends (so you can create e.g. guards attacking     the player if he tries to run). You can leave this option out if you don't need any final events.</li> <li><code>interceptor</code> optionally set a chat interceptor for this conversation. Multiple interceptors can be provided in a comma-separated list with the first valid one used. It's better to set this as a global config setting in config.yml.</li> <li><code>NPC_options</code> is a branch with texts said by the NPC.</li> <li><code>player_options</code> is a branch with options the player can choose from.</li> <li><code>text</code> defines what will display on screen. If you don't want to set any events/conditions/pointers to the option, just skip them. Only <code>text</code> is always required.</li> <li><code>conditions</code> are names of conditions which must be met for this option to display, separated by commas.</li> <li><code>events</code> is a list of event names that will fire when an option is chosen (either by NPC or a player), defined similar to conditions.</li> <li><code>pointer</code> is list of pointers to the opposite branch (from NPC branch it will point to options player can choose from when answering, and from player branch it will point to different NPC reactions).</li> </ol> <p>When an NPC wants to say something he will check conditions for the first option (in this case <code>welcome</code>). If they are met, he will choose it. Otherwise, he will skip to next option (note: conversation ends when there are no options left to choose). After choosing an option the NPC will execute any events defined in it and say it's text. Then the player will see options defined in the <code>player_options</code> branch to which the <code>pointers</code> setting points, in this case <code>friendly</code> and <code>hostile</code>. If the conditions for a player options is not met, the option is simply not displayed, similar to texts from NPC. The player will choose the option they want, and it will point back to other NPC text, which points to next player options and so on.</p> <p>If there are no possible options for player or NPC (either from not meeting any conditions or being not defined) the conversations ends. If the conversation ends unexpectedly, check the console - it could be an error in the configuration.</p> <p>This can and will be a little confusing, so you should name your options, conditions and events in a way which you will understand in the future. Don't worry though, if you make some mistake in configuration, the plugin will tell you this when running <code>/q reload</code>.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#binding-conversations-to-npcs","title":"Binding Conversations to NPCs","text":"<p>Conversations can be assigned to Npcs. This is done in the <code>npc_conversations</code> section:</p> Example<pre><code>npc_conversations:\n  Hans: mayorHans #(1)!\n</code></pre> <ol> <li>The key is the NpcID, the value a ConversationID.</li> </ol> <p>A Npc will only react to right clicks by default.  This can be changed by setting <code>npcs.accept_left_click</code> in the config.yml to <code>true</code>.</p> <p>You can assign the same conversation to multiple NPCs. It is not possible to assign multiple conversations to one npc. For this purpose, have a look at  cross-conversation-pointers though.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#conversation-displaying","title":"Conversation displaying","text":"<p>BetonQuest provides different conversation styles, so called \"conversationIO's\". They differ in their visual style and the way the player interacts with them.</p> <p>BetonQuest uses the <code>menu</code> style by default. If ProtocolLib is not installed, the <code>chest</code> style will be used. You can change this setting globally by changing the <code>default_conversation_IO</code> option in the config.yml file.</p> <p>It is also possible to override this setting per conversation. Add a <code>conversationIO: &lt;type&gt;</code> setting to the conversation file at the top of the YAML hierarchy (which is the same level as <code>quester</code> or <code>first</code> options).</p> <p>In both cases, you can choose from the following conversation styles:</p> <p>Conversation Styles</p> <code>menu</code><code>chest</code><code>combined</code><code>simple</code><code>tellraw</code><code>slowtellraw</code> <p>A modern conversation style that works with some of Minecraft's native controls.</p> <p>Requires ProtocolLib</p> Customizing the Menu Style <p>Customize the look of the menu style by adding the following lines to any of your quest packages. These are global settings that currently cannot be changed on a NPC level.</p> <pre><code>menu_conv_io:\n  start_new_lines: 10 # (1)!\n  line_length: 50 # (2)!\n  refresh_delay: 180 # (3)!\n  selectionCooldown: 10 # (4)!\n\n  npc_wrap: '&amp;l &amp;r' # (5)!\n  npc_text: '&amp;l &amp;r&amp;f{npc_text}' # (6)!\n  npc_text_reset: '&amp;f' # (7)!\n  option_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r' # (8)!\n  option_text: '&amp;l &amp;l &amp;l &amp;l &amp;r&amp;8[ &amp;b{option_text}&amp;8 ]' # (9)!\n  option_text_reset: '&amp;b' # (10)! \n  option_selected: '&amp;l &amp;r &amp;r&amp;7\u00bb&amp;r &amp;8[ &amp;f&amp;n{option_text}&amp;8 ]' # (11)!\n  option_selected_reset: '&amp;f' # (12)!\n  option_selected_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r&amp;f&amp;n' # (13)!\n\n  control_select: jump,left_click # (14)!\n  control_cancel: sneak # (15)! \n  control_move: scroll,move # (16)! \n\n  npc_name_type: chat # (17)!\n  npc_name_align: center # (18)!\n  npc_name_format: '&amp;e{npc_name}&amp;r' # (19)!\n  npc_name_newline_separator: true # (20)!\n  npc_text_fill_new_lines: true # (21)!\n</code></pre> <ol> <li>How many empty lines should be printed before the conversation starts.</li> <li>Maximum size of a line till its wrapped.</li> <li>Specify how many ticks to auto update display. Default 180.</li> <li>The cooldown for selecting another option after selecting an option. Measured in ticks. 20 ticks = 1 second.</li> <li>What text to prefix each new line in the NPC text that wraps.</li> <li>How to write the NPC text. Replaces {1} with the npcs text.</li> <li>When a color reset is found, what to replace it with.</li> <li>What text to prefix each new line in an option that wraps.</li> <li>How to write an option. Replaces {1} with the option text.</li> <li>When a color reset is found, what to replace it with.</li> <li>How to write a selected option. Replaces {1} with the option text.</li> <li>When a color reset is found, what to replace it with.</li> <li>What text to prefix each new line in a selected option that wraps.</li> <li>Comma separated actions to select options. Can be any of <code>jump</code>, <code>left_click</code>, <code>sneak</code>.</li> <li>Comma separated actions to cancel the conversation. Can be any of <code>jump</code>, <code>left_click</code>, <code>sneak</code>.</li> <li>Comma separated actions to move the selection. Can be any of <code>move</code>, <code>scroll</code>.</li> <li>Type of NPC name display. Can be one of: <code>none</code>, <code>chat</code>.</li> <li>For npc name type of <code>chat</code>, how to align name. One of: <code>left</code>, <code>right</code>, <code>center</code>.</li> <li>How to format the npc name.</li> <li>Whether an empty line is inserted after the NPC's name if there is space leftover.</li> <li>Weather to fill new lined between the NPC text and the player answer options</li> </ol> Text Variable Meaning <code>{npc_text</code> The text the NPC says <code>{option_text}</code> The option text <code>{npc_name}</code> The name of the NPC <p>   Sorry, your browser doesn't support embedded videos.  The blue overlay shows the player's key presses.</p> <p>A chest GUI with clickable buttons where the NPC's text and options will be shown as item lore.</p> Customizing the Chest Style <p>The colors of this style can be configured with the <code>conversation_colors</code> config option.</p> <p>The formatting of this style can be configured with the <code>conversation_IO_config.chest</code> config option.</p> <p>You can change the option's item to something else than ender pearls by adding a prefix to that option's text. The prefix is a name of the material (like in the items section) inside curly braces, with an optional damage value after a colon. Custom Model Data is not supported yet. Example of such option text: <code>{diamond_sword}I want to start a quest!</code>.</p> <p>   Sorry, your browser doesn't support embedded videos. </p> <p>The same as the chest style but the conversation is also displayed in the chat.</p> <p>A chat output. The user has to write a number into their chat to select an option.</p> Customizing the Simple Style <p>The colors of this style can be configured with the <code>conversation_colors</code> config option.</p> <p></p> <p>The same as the simple style but the user can also click the numbers instead of writing them in the chat.</p> Customizing the Simple Style <p>The colors of this style can be configured with the <code>conversation_colors</code> config option.</p> <p></p> <p>The same as tellraw style but the NPC's text is printed line by line, delayed by 0.5 seconds.</p> Customizing the Simple Style <p>The colors of this style can be configured with the <code>conversation_colors</code> config option.</p> <p>The delay between lines (in ticks) can be configured with the <code>conversation_IO_config.slowtellraw</code> config option.</p> <p></p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#cross-conversation-pointers","title":"Cross-Conversation Pointers","text":"<p>If you want to create a conversation with multiple NPCs at once or split a huge conversation into smaller,  more focused files, you can point to both npc and player options in other conversations. Use the  cross-package syntax to do so.</p> <p>There is one special case when you want to refer to the starting options of another conversation. In this case you do not specify an option name after the second point (<code>package.conversation.</code>).</p> Cross-conversation Pointers Examples<pre><code>myConversationOption:\n  text: \"Look carefully at that guard over there...\"\n  pointers: \"lookCareful,guardConv.lookDetected,mainStory.Mirko.interrupt\" #(1)!\nspecialOption:\n  text: \"This option points to the starting options of the conversation 'guardConv' in the package 'myPackage'.\"\n  pointers: \"myPackage.guardConv.\"\n</code></pre> <ol> <li><code>lookCareful</code> refers to another option in the same conversation named <code>lookCareful</code>.   <code>guardConv.lookDetected</code> refers to the option <code>lookDetected</code> in the conversation <code>guardConv</code> in the same package.   <code>mainStory.Mirko.interrupt</code> refers to the option <code>interrupt</code> in the conversation <code>Mirko</code> in the package <code>mainStory</code>.    </li> </ol>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#conversation-variables","title":"Conversation Variables","text":"<p>You can use variables in the conversations. They will be resolved and displayed to the player when he starts a conversation. Check the variables list for more information about which variables exist.</p> <p>Note</p> <p>If you use a variable incorrectly (for example trying to get a property of an objective which isn't active for the player, or using %quester% in <code>message</code> event), the variable will be replaced with empty string (\"\").</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#translations","title":"Translations","text":"<p>Conversation can be fully translated into multiple languages. A players can choose their preferred language with the /questlang command. You can translate every NPC option, player option and the NPC's name. This is how it's done:</p> <p><pre><code>quester:\n  en: \"Innkeeper\"\n  pl: \"Karczmarz\"\n  de: \"Gastwirt\"\nfirst: \"example1\" \nNPC_options:\n  example1:\n    text:\n      en: \"Good day, dear %player%! Welcome back to my town.\"\n      de: \"Guten Tag, lieber %player%! Willkommen zur\u00fcck in meiner Stadt.\" \nplayer_options:\n  example2:\n    text:\n      en: \"Thank you your honor, I'm happy to be here.\"\n      de: \"Danke, Euer Ehren, ich bin froh, hier zu sein.\"\n</code></pre> <code>en</code> and <code>de</code> are identifiers of languages present in the messages.yml config. If the conversation is not translated in the players' language, the plugin will fall back to the default language, as defined in config.yml.</p> <p>The same syntax can be applied in a few other features, e.g. the journal entries, quest cancelers and <code>notify</code> events.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#chat-interceptors","title":"Chat Interceptors","text":"<p>While engaged in a conversation, it can be distracting when messages from other players or system messages interfere with the dialogue. A chat interceptor provides a method of intercepting those messages and then sending them after the conversation has ended.</p> <p>You can specify the default chat interceptor by setting <code>default_interceptor</code> inside the <code>config.yml</code>. Additionally, you can overwrite the default for each conversation by setting the <code>interceptor</code> key inside your conversation file.</p> <p>The default configuration of BetonQuest sets the <code>default_interceptor</code> option to <code>packet,simple</code>. This means that it first tries to use the <code>packet</code> interceptor. If that fails it falls back to using the <code>simple</code> interceptor.</p> <p>BetonQuest adds following interceptors: <code>simple</code>, <code>packet</code> and <code>none</code>:</p> <p>The <code>simple</code> interceptor works with every server but only supports very basic functionality and may not work with plugins like Herochat.</p> <p>The <code>packet</code> interceptor requires the ProtocolLib plugin to be installed. It will work well in any kind of situation.</p> <p>The <code>none</code> interceptor is an interceptor that won't intercept messages. That sounds useless until you have a conversation that you want to be excluded from interception. In this case you can just set <code>interceptor: none</code> inside your conversation file.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Conversations/#advanced-extends","title":"Advanced: Extends","text":"<p>Conversations also support the concept of inheritance. Any option can include the key <code>extends</code> with a comma delimited list of other options of the same time. The first option that does not have any false conditions will have its text, pointers and events merged with the extending option. The extended option may itself extend other options. Infinite loops are detected.</p> <p><pre><code>NPC_options:\n\n  ## Normal Conversation Start\n  start:\n    text: 'What can I do for you'\n    extends: tonight, today\n\n  ## Useless addition as example\n  tonight:\n    # Always false\n    condition: random 0-1\n    text: ' tonight?'\n    extends: main_menu\n\n  today:\n    text: ' today?'\n    extends: main_menu\n\n  ## Main main_menu\n  main_menu:\n    pointers: i_have_questions, bye\n</code></pre> In the above example, the option start is extended by both tonight and today, both of whom are extended by main_menu. As tonight has a false condition the today option will win. The start option will have the pointers in main_menu added to it just as if they were defined directly in it and the text will be joined together from today. If you structure your conversation correctly you can make use of this to minimize duplication.</p>","tags":["Conversation"]},{"location":"Documentation/Features/Items/","title":"Quest Items","text":""},{"location":"Documentation/Features/Items/#item-basics","title":"Item Basics","text":"<p>Items in BetonQuest are defined in the items section. Each item has an instruction string, similarly to events, conditions etc. Basic syntax is very simple:</p> <pre><code>item: BLOCK_SELECTOR other arguments...\n</code></pre> <p>BLOCK_SELECTOR is a type of the item. It doesn't have to be all in uppercase. Other arguments specify data like name of the item, lore, enchantments or potion effects. There are two categories of these arguments: the ones you can apply to every item and type specific arguments. Examples would be name (for every item type) and text (only in books).</p> <p>Every argument is used in two ways: when creating an item and when checking if some existing item matches the instruction. The first case is pretty straightforward - BetonQuest takes all data you specified and creates an item, simple as that. Second case is more complicated. You can require some property of the item to exist, other not to exist, or skip this property check altogether. You can also accept an item only if some value (like enchantment level) is greater/less than x. You can use wildcards in the BLOCK_SELECTOR to match multiple types of items.</p> <p>These are arguments that can be applied to every item:</p> <ul> <li> <p><code>name</code> - the display name of the item. Underscores will be replaced with spaces. You can escape them with <code>\\_</code> and you can also escape the <code>\\</code> with <code>\\\\_</code>. You can also use <code>&amp;</code> color codes.  If you want to specifically say that the item must not have any name, use <code>none</code> keyword.</p> </li> <li> <p><code>lore</code> - text under the item's name. Default styling of lore is purple and italic.  You can escape them with <code>\\_</code> and you can also escape the <code>\\</code> with <code>\\\\_</code>. You can also use <code>&amp;</code> color codes. To make a new line use <code>;</code> character. If you require the item not to have a lore at all, use <code>none</code> keyword. By default, lore will match only if all lines are exactly the same. If you want to accept all items that contain specified lines (and/or more lines), add <code>lore-containing</code> argument to the instruction string.</p> </li> <li> <p><code>enchants</code> - a list of enchantments and their levels. Each enchantment consists of these things, separated by colons:</p> <ul> <li>name</li> <li>level (only positive numbers, including zero)</li> </ul> <p>For example <code>damage_all:3</code> is Sharpness III. You can specify additional enchantments by separating them with commas.</p> <p>You can require the item not to have any enchantments by using <code>none</code> keyword. You can also add <code>+</code>/<code>-</code> character to the enchantment level to make the check require levels greater/less (and equal) than specified. If you don't care about the level, replace the number with a question mark.</p> <p>By default, all specified enchantments are required. If you want to check if the item contains a matching enchantment (and/or more enchants), add <code>enchants-containing</code> argument to the instruction string. Each specified enchantment will be required on the item by default unless you prefix its name with <code>none-</code>, for example <code>none-knockback</code> means that the item must not have any knockback enchantment. Do not use <code>none-</code> prefix unless you're using <code>enchants-containing</code> argument, it doesn't make any sense and will break the check!</p> </li> <li> <p><code>unbreakable</code> - this makes the item unbreakable. You can specify it either as <code>unbreakable</code> or <code>unbreakable:true</code> to require an item to be unbreakable. If you want to check if the item is breakable, use <code>unbreakable:false</code>.</p> </li> <li> <p><code>custom-model-data</code> - set the custom model data of the item. You have to specify the data value: <code>custom-model-data:3</code>. To check that an item does not have custom model data set <code>no-custom-model-data</code>.</p> </li> <li> <p><code>flags</code> - item flags that govern the visibility of some item info (comma delimited) including:</p> <ul> <li>HIDE_ENCHANTS: Hide the item's enchants</li> <li>HIDE_ATTRIBUTES: Hide attributes like damage</li> <li>HIDE_UNBREAKABLE: Hide the unbreakable of the item state</li> <li>HIDE_DESTROYS: Hide what the item can break or destroy</li> <li>HIDE_PLACED_ON: Hide where the item can be placed</li> <li>HIDE_POTION_EFFECTS: Hide potion effects, book and firework info, map tool tips, banner patters, and enchantments</li> <li>HIDE_DYE: Hide the dye labels on colored leather armor</li> </ul> </li> </ul> Examples<pre><code>name:&amp;4Sword_made_of_Holy_Concrete\nname:none\nlore:&amp;cOnly_this_sword_can_kill_the_Lord_Ruler\nlore:&amp;2Quest_Item lore-containing\nlore:none\nenchants:damage_all:3+,none-knockback\nenchants:power:? enchants-containing\nenchants:none\nunbreakable\nunbreakable:false\nflags:HIDE_ENCHANTS,HIDE_ATTRIBUTES,HIDE_UNBREAKABLE\n</code></pre>"},{"location":"Documentation/Features/Items/#special-item-types","title":"Special Item Types","text":""},{"location":"Documentation/Features/Items/#books","title":"Books","text":"<p>This applies to a written book and a book and quill.</p> <ul> <li> <p><code>title</code> - the title of a book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. If you want to specifically say that the book must not have any title, use <code>none</code> keyword.</p> </li> <li> <p><code>author</code> - the author of a book. All underscores will be replaced with spaces, you cannot use color codes here. If you want to specifically say that the book must not have any author, use <code>none</code> keyword.</p> </li> <li> <p><code>text</code> - the text of the book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. The text will wrap to the next page if amount of characters exceeds <code>journal.chars_per_page</code> setting in config.yml. If you want to manually wrap the page, use <code>|</code> character. To go to new line use <code>\\n</code>. Keep in mind that you can't use any spaces here, you must only use underscores (<code>_</code>). This needs to be a single argument, even if it's really long. If you don't want the book to have any text, use <code>none</code> keyword instead.</p> </li> </ul> Examples<pre><code>title:Malleus_Maleficarum\nauthor:&amp;eGallus_Anonymus\ntext:Lorem_ipsum_dolor_sit_amet,\\nconsectetur_adipiscing_elit.|Pellentesque_ligula_urna(...)\n</code></pre>"},{"location":"Documentation/Features/Items/#potions","title":"Potions","text":"<p>This applies to potions, splash potions and lingering potions.</p> <ul> <li> <p><code>type</code> - type of a potion. Here's the list of possible types. Do not mistake this for a custom effect, this argument corresponds to the default vanilla potion types.</p> </li> <li> <p><code>extended</code> - extended property of the potion (you can achieve it in-game by adding redstone). It can be specified as <code>extended</code> or <code>extended:true</code>. If you want to check the potion that is NOT extended, use <code>extended:false</code>.</p> </li> <li> <p><code>upgraded</code> - upgraded property of the potion (you can achieve it in-game by adding glowstone). It can be specified as <code>upgraded</code> or <code>upgraded:true</code>. If you want to check the potion that is NOT upgraded, use <code>upgraded:false</code>.</p> </li> <li> <p><code>effects</code> - a list of custom effects. These are independent of the potion type. The effects must be separated by commas. Each effect consists of these things, separated by colons:</p> <ul> <li>type (this is different stuff that the link above!)</li> <li>power</li> <li>duration (in seconds)</li> </ul> <p>An example would be <code>WITHER:2:30</code>, which is a wither effect of level 2 for 30 seconds.</p> <p>If you want to target only potions without custom effects, use <code>none</code> keyword. You can target potions with level and time greater/less (and equal) than specified with <code>+</code>/<code>-</code> character after the number. If you don't care about the level/time, you can replace them with question mark.</p> <p>By default, all specified effects are required. If you want to check if the potion contains these effects among others, add <code>effects-containing</code> argument to the instruction string. Now if you want to make sure the potion doesn't contain a specific effect, prefix the effect name with <code>none-</code>. Don't use that prefix unless you're also using <code>effects-containing</code> argument, it doesn't make any sense and it will break the check.</p> </li> </ul> <p>Examples:</p> <pre><code>type:instant_heal\nextended\nupgraded:false\neffects:poison:1+:?,slow:?:45-\neffects:none-weakness,invisibility:?:? effects-containing\n</code></pre>"},{"location":"Documentation/Features/Items/#heads","title":"Heads","text":""},{"location":"Documentation/Features/Items/#player-heads","title":"Player Heads","text":"<ul> <li><code>owner</code> - this is the name of the head owner. It will not use color codes nor replace underscores with spaces. If you want to check for heads without any owner, use <code>none</code> keyword.</li> <li>Use <code>%player%</code> to get the current players head.</li> </ul> Examples<pre><code>owner:Co0sh\nowner:none\n</code></pre>"},{"location":"Documentation/Features/Items/#custom-heads","title":"Custom Heads","text":"<p>This applies to heads with custom texture (Base64 encoded).</p> <ul> <li><code>player-id</code> - this is the UUID of the head owner.</li> <li><code>texture</code> - this is the Base64 encoded JSON for the texture metadata.</li> </ul> <p>Examples:</p> <p>The metadata will be automatically extracted from an item in your hand when using the item command and produce something like the following item data:</p> <pre><code>player-id:66ab473e-d118-4e55-9717-431dfe7a69bc\ntexture:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYmIwNmIxOGQzZGZlZGFiNDQ0NjZlMGE3NGUxNTVhOGYyMTc4NzIwNDBhMDg1NTIwYTVhMGYzMGU4Y2QxODg1YyJ9fX0=\n</code></pre>"},{"location":"Documentation/Features/Items/#leather-armor","title":"Leather armor","text":"<p>This applies to all parts of leather armor.</p> <ul> <li><code>color</code> - this is the color of the armor piece. It can be either one of these values, a hexadecimal RGB value prefixed with <code>#</code> character or its decimal representation without the prefix. You can also check if the armor piece doesn't have any color with <code>none</code> keyword.</li> </ul> <p>Examples:</p> <pre><code>color:light_blue\ncolor:#ff00ff\ncolor:none\n</code></pre>"},{"location":"Documentation/Features/Items/#fireworks","title":"Fireworks","text":"<p>This applies to fireworks.</p> <ul> <li> <p><code>firework</code> - this is a list of effects of the firework rocket. They are separated by commas. Each effect consists of these things separated by colons:</p> <ul> <li>effect type</li> <li>a list of main colors (refer to leather armor colors above for syntax) separated by semicolons</li> <li>a list of fade colors</li> <li><code>true</code>/<code>false</code> keyword for trail effect</li> <li><code>true</code>/<code>false</code> keyword for flicker.</li> </ul> <p>Note the separation characters, this is important: commas separate effects, colons separate effect properties, semicolons separate colors.</p> <p>If you want to target fireworks without any effects, use <code>none</code> keyword. If you want to target any effect type, use question mark instead of the effect name. If you don't want the effect to have any main/fade colors, use <code>none</code> keyword in the place of colors. If you don't care about main/fade colors, use question marks in that place. If you don't care about trail/flicker effect, use question marks instead of <code>true</code>/<code>false</code> keyword.</p> <p>By default, the check will require all specified effects to be present on the firework. You can check if the firework contains specified effects among others by adding <code>firework-containing</code> argument to the instruction string. To match the item which must not have an effect, prefix the effect name with <code>none-</code> keyword. Don't use that prefix unless you're also using <code>firework-containing</code> argument, it doesn't make any sense and will break the check.</p> </li> <li> <p><code>power</code> - flight duration of the firework, in levels. You can use <code>+</code>/<code>-</code> character to target greater/less (and equal) levels.</p> </li> </ul> Examples<pre><code>firework:ball:red;white:green;blue:true:true,ball_large:green;yellow:pink;black:false:false\nfirework:burst:?:none:?:? firework-containing\nfirework:none-creeper firework-containing\nfirework:none\npower:3\npower:2+\n</code></pre>"},{"location":"Documentation/Features/Items/#firework-charges","title":"Firework charges","text":"<p>This applies to firework charges.</p> <ul> <li><code>firework</code> - this is almost the same as fireworks. You can only specify a single effect and the <code>power</code> argument has no effects.</li> </ul>"},{"location":"Documentation/Features/Items/#backpack","title":"Backpack","text":"<p>Sometimes you'll want some items to be persistent over death. The quest could be broken if the player loses them. Such an item wouldn't be dropped (on death), instead it would be placed in the player's backpack.</p> <p>You can add a specific line to an item's lore to make it persistent. It's <code>&amp;2Quest_Item</code> (<code>_</code> is a space in an item's definition) if your default language is english. The translation of the line can be found in messages.yml if a different default language is configured. It's also possible to change the translation. </p> <p>Note that this must be an entirely new line in the lore!    </p> Example<pre><code>important_sword: \"DIAMOND_SWORD name:Sword_for_destroying__The_Concrete lore:Made_of_pure_Mithril;&amp;2Quest_Item\"\n</code></pre> <p>The backpack can be opened with the /backpack command. The inventory window will open, displaying your stored items. The first slot is always the journal, and if you get it, the slot will stay empty. You can transfer quest items back and forth between inventories by clicking on them. Left click will transfer just one item, right click will try to transfer all items. Normal items cannot be stored into the backpack, so it's not an infinite inventory.</p> <p>If you will ever have more than one page of quest items, the buttons will appear. You can customize those buttons by creating <code>previous_button</code> and <code>next_button</code> items in the items section. Their name will be overwritten with the one defined in messages.yml.</p> <p>Quest items cannot be dropped in any way other than using them. This way you can create a quest for eating cookies by giving the player a stack of cookies flagged as quest items and not continuing until there are no more cookies in his inventory/backpack. The player cannot drop the cookies, so he must eat every one of them to complete the quest.</p> <p>Creative Mode</p> <p>Don't worry if the item-dropping filter isn't working for your items when you're in creative mode - it's not a bug. It's a feature. Creative-mode players should be able to easily put quest items in containers like TreasureChests.</p>"},{"location":"Documentation/Features/Journal/","title":"Journal","text":"<p>The journal is a book which can be used to display any quest related information in an immersive way.</p>"},{"location":"Documentation/Features/Journal/#basic-information","title":"Basic Information","text":"<p>The journal can be obtained with the /journal command or by selecting it from the quest item backpack (/backpack). It's a quest item, so you cannot put it into any chests, item frames and so on. If you ever feel the need to get rid of your journal: Just drop it! It will safely return to your backpack.</p> <p>The journal is updated with the <code>journal</code> event, based on the text entries written inside a journal section. The entries can use color codes, but the color will be lost between pages.  If you update these texts and reload the plugin, all players' journals will reflect changes. </p> <p>If you want to translate the entry do the same thing as with conversation options - go to new line, add language ID and the journal text for every language you want to include.</p>"},{"location":"Documentation/Features/Journal/#main-page","title":"Main Page","text":"<p>You can also add a main page to the journal. It's a list of texts, which will show only if specified conditions are met. You can define them in the <code>journal_main_page</code> section:</p> <pre><code>journal_main_page:\n  title:\n    priority: 1\n    text:\n      en: '&amp;eThe Journal'\n      pl: '&amp;eDziennik'\n    conditions: 'quest_started,!quest_completed'\n</code></pre> <p>Each string can have text in different languages, list of conditions separated by commas (these must be met for the text to show in the journal) and <code>priority</code>, which controls the order of texts. You can use conversation variables in the texts, but they will only be updated when the player gets his journal with the /journal command. Color codes are supported.</p> <p>If you want your main page take a separate page (so entries will be displayed on next free page), set <code>full_main_page</code> in config.yml to \"true\". If you want to manually wrap the page, use the pipe <code>|</code> character. Use \\n to create a new line.</p>"},{"location":"Documentation/Features/Journal/#configuration","title":"Configuration","text":"<p>You can control behavior of the journal in config.yml file, in the <code>journal</code> section. <code>chars_per_page</code> specifies how many characters will be placed on a single page. If you set it too high, the text will overflow outside the page, too low, there will be too many pages. <code>one_entry_per_page</code> allows you to place every entry on a single page. The <code>chars_per_page</code> setting is in this case ignored, BetonQuest will put entire entry on that page. <code>reversed_order</code> allows you to reverse order of entries and <code>hide_date</code> lets you remove the date from journal entries.</p> <p>The journal by default appears in the last slot of the hotbar. If you want to change that use <code>default_journal_slot</code> option in config.yml, experiment with different settings until you're ok with it.</p> <p>You can control colors in the journal in <code>journal_colors</code> section in config.yml: <code>date</code> is a color of date of every entry, <code>line</code> is a color of lines separating entries and <code>text</code> is just a color of a text. You need to use standard color codes without <code>&amp;</code> (eg. <code>'4'</code> for dark red).</p>"},{"location":"Documentation/Features/Message-Formatting/","title":"Message Formatting","text":"<p>Work in Progress</p> <p>This feature is still in development and does not work for every feature at the moment. Some features are marked as limited, that means that things like hover and click events are not supported. Currently supported are:</p> <ul> <li>Notify and NotifyAll Event</li> <li>Compass Names</li> <li>NPC Name Variable (limited)</li> <li>Journal (limited)</li> <li>Quest Cancler (limited)</li> <li>Conversation (limited)</li> <li>Plugin Messages / Translations (limited)</li> </ul> <p>Every string in BetonQuest can be formatted with a formatter. A formatter is a way to format a string with colors, styles, and more, while each formatter has its own syntax.</p> <p>In the <code>config.yml</code> file, you can set the default formatter with the <code>message_parser</code> setting. The default formatter is <code>legacyminimessage</code>.</p> <p>Anyway each string can set an individual formatter by prefixing the string with <code>@[FormatterName]</code>.</p>"},{"location":"Documentation/Features/Message-Formatting/#formatter","title":"Formatter","text":""},{"location":"Documentation/Features/Message-Formatting/#legacy","title":"Legacy","text":"<pre><code>legacy\n</code></pre> <p>The legacy formatter is the old common way to format strings. It's a really simple formatter that has a lot of  limitations, but it is still used by the community as it is the most known one. It uses the <code>&amp;</code> or <code>\u00a7</code> character followed by a color code or a style code character.</p> <p>You can read everything about minecraft formatting here.</p> <p>This formatter actually can parse a bit more as normally, like links get clickable, and colors in the adventure format <code>\u00a7#a25981</code> or the BungeeCord RGB format <code>\u00a7x\u00a7a\u00a72\u00a75\u00a79\u00a78\u00a71</code>.</p> <p>You can read everything about these formats here.</p> <p>Example</p> <pre><code>text1: '&amp;cHello &amp;e&amp;lWorld'\ntext2: '@[legacy]&amp;cHello &amp;e&amp;lWorld'\n</code></pre>"},{"location":"Documentation/Features/Message-Formatting/#minimessage","title":"MiniMessage","text":"<pre><code>minimessage\n</code></pre> <p>MiniMessage is the new standard for formatting strings. It's a really advanced formatter that has a lot of features. The formatting is based on tags like <code>&lt;red&gt;</code> and <code>&lt;bold&gt;</code>. You don't need to close them like <code>&lt;/red&gt;</code>, but that sometimes make it clear what exactly you are formatting.</p> <p>Everything about this format can be read here.</p> <p>Example</p> <pre><code>text1: '&lt;red&gt;Hello &lt;yellow&gt;&lt;bold&gt;World&lt;/bold&gt;'\ntext2: '@[minimessage]&lt;red&gt;Hello &lt;yellow&gt;&lt;bold&gt;World&lt;/bold&gt;'\n</code></pre>"},{"location":"Documentation/Features/Message-Formatting/#legacy-minimessage","title":"Legacy &amp; MiniMessage","text":"<pre><code>legacyminimessage\n</code></pre> <p>This formatter is a combination of the legacy and MiniMessage formatter. It allows you to use both formats. In that way, you can use the format that fits the best for every string. You can also use both formats in one string, but you need to be careful with that, as it can lead to unexpected results.</p> <p>Example</p> <pre><code>text1: '&amp;cHello &lt;yellow&gt;&lt;bold&gt;World&lt;/bold&gt;'\ntext2: '@[legacyminimessage]&amp;cHello &lt;yellow&gt;&lt;bold&gt;World&lt;/bold&gt;'\n</code></pre>"},{"location":"Documentation/Features/Message-Formatting/#minedown","title":"MineDown","text":"<pre><code>minedown\n</code></pre> <p>This formatter is a perfect alternative to MiniMessage. Mainly, it still supports the old legacy format, but also the new RGB format, as well as some more simple formatting. You don't need to write these tags like in MiniMessage, instead you write more advanced formats like this <code>[Text] (format)</code>.</p> <p>You can read everything about this format here.</p> <p>Example</p> <pre><code>text1: '[Hello](red) [World](yellow bold)'\ntext2: '@[minedown][Hello](red) [World](yellow bold)\n</code></pre>"},{"location":"Documentation/Features/Npcs/","title":"Npcs","text":"<p>Npcs are an essential part of every RPG for player ingame interaction. In BetonQuest Npcs can be used to start conversations or interact with them otherwise, as shown in the <code>Scripting</code> and <code>Visual Effects</code> section of the documentation.</p> <p>Info</p> <p>This Npc is not related to the NPC/Quester in Conversations</p>","tags":["Npcs"]},{"location":"Documentation/Features/Npcs/#provided-integrations","title":"Provided Integrations","text":"<p>BetonQuest provides Integrations for the following Npc plugins:</p> <ul> <li>Citizens</li> </ul>","tags":["Npcs"]},{"location":"Documentation/Features/Npcs/#referring-an-npc","title":"Referring an Npc","text":"<p>Npcs are defined in the <code>npcs</code> section. For exact instruction definition see the respective integration.</p>","tags":["Npcs"]},{"location":"Documentation/Features/Npcs/#conversations","title":"Conversations","text":"<p>You can start Conversations with Npc interaction by assigning them in the <code>npc_conversations</code> section of a quest package.</p>","tags":["Npcs"]},{"location":"Documentation/Features/Quest-Cancelers/","title":"Quest Cancelers","text":"Sorry, your browser doesn't support embedded videos.  <p>You can easily let players cancel their quests using the cancel option in the quest backpack (or <code>/cancelquest</code>).  Cancelers also provide an easy way to clean up all the data that was created during the quest. They can also be triggered by events.</p>"},{"location":"Documentation/Features/Quest-Cancelers/#setup","title":"Setup","text":"<p>Define a <code>cancel</code> section anywhere in your quest package. This section will contain all cancelers. Each canceler has an identifier. </p> Example<pre><code>cancel:\n  woodQuest:\n    name: \"&amp;2Wood for the Innkeeper\" #(1)!\n    conditions: \"wood_started,!wood_paid\" #(2)!\n    objectives: \"farmWood\" #(3)!\n    tags: \"wood_started,wood_done,wood_paid\" #(4)!\n    points: \"wood\" #(5)!\n    journal: \"wood_started,wood_done,wood_paid\" #(6)!\n    events: \"punishPlayer,sendMessage\" #(7)!\n    location: \"100;200;300;world\" #(8)!\n  dragonQuest:\n    name: \"&amp;4Dragon Slayer\"\n    conditions: \"dragon_started,!dragon_done\"\n    objectives: \"killDragon\"\n</code></pre> <ol> <li>Display name that will be shown in the GUI.The name can be translated with this syntax:    <pre><code>name:\n  en: '&amp;2Wood for Innkeeper' # English translation\n  de: '&amp;2Holz f\u00fcr den Gastwirt' # German translation\n</code></pre></li> <li>A list of conditions separated by commas. The player needs to meet all those conditions to be able to cancel this quest. Place there the ones which detect that the player has started the quest, but he has not finished it yet. </li> <li>A list of all objectives used in this quest. They will be canceled without firing their completion events.</li> <li>A list of tags that will be deleted. Place here all tags that you use during the quest.</li> <li>A list of all points that will be entirely deleted from the player.</li> <li>These journal entries will be removed from the player's journal.</li> <li>You can run any event when the player cancels a quest. For example, if you want to punish the player for canceling a quest list the related events here.</li> <li>This is a location to which the player will be teleported when canceling the quest. Use the ULF format.</li> </ol>"},{"location":"Documentation/Features/Quest-Cancelers/#related-events","title":"Related Events","text":""},{"location":"Documentation/Features/Quest-Cancelers/#cancel-a-quest-cancel","title":"Cancel a quest: <code>cancel</code>","text":"<p>This event works in the same way as a quest canceler in the backpack.</p> <p>Running this event is equal to the player canceling a quest using the backpack.</p> Parameter Syntax Default Value Explanation canceler CancelerID The Quest Canceler to execute. bypass Keyword (<code>bypass</code>) Disabled If the canceler conditions should be ignored. If enabled the canceler will be executed, even when its conditions are not met. Example<pre><code>cancelQuest: \"cancel woodQuest bypass\"\n</code></pre>"},{"location":"Documentation/Features/Menus/Elements/","title":"Elements","text":""},{"location":"Documentation/Features/Menus/Elements/#events","title":"Events","text":""},{"location":"Documentation/Features/Menus/Elements/#menu-event-menu","title":"Menu Event: <code>menu</code>","text":"<p>This event can be used to open and close menus. The first argument is the type of action that should be done. It is either <code>open</code> to open a new menu or <code>close</code> to close the currently opened menu of the player. If you want to open a menu you have to add a second argument which should be the id of a menu. If you want to open menus from other packages just use <code>packageName.id</code> format.</p> <p>Example: <code>menu open quest_gui</code></p> <p>Example: <code>menu close</code></p>"},{"location":"Documentation/Features/Menus/Elements/#conditions","title":"Conditions","text":""},{"location":"Documentation/Features/Menus/Elements/#menu-condition-menu","title":"Menu Condition: <code>menu</code>","text":"<p>This condition can be used to check if the player has currently opened any menu. You can add <code>id:</code> optional and specify the id of a menu to check if the player has opened the menu with this id. If you want to check for menus from other packages just use <code>packageName.id</code> format.</p> <p>Example: <code>menu id:quest_gui</code></p>"},{"location":"Documentation/Features/Menus/Elements/#objectives","title":"Objectives","text":""},{"location":"Documentation/Features/Menus/Elements/#menu-objective-menu","title":"Menu Objective: <code>menu</code>","text":"<p>This objective is completed when the player opens the menu with the given id. The only required argument is the id of the menu. If you want to use menus from other packages just use <code>packageName.id</code> format.</p> <p>The objective also has the property <code>menu</code> which can be used by the objective variable. It returns the title of the menu which should be opened.</p> <p>Example: <code>menu quest_gui</code></p>"},{"location":"Documentation/Features/Menus/Elements/#variables","title":"Variables","text":""},{"location":"Documentation/Features/Menus/Elements/#menu-variable-menu","title":"Menu Variable: <code>menu</code>","text":"<p>This variable displays the title of the menu that is currently opened by the player. If no menu is opened it will be just empty.</p> <p>Example: <code>%menu%</code></p>"},{"location":"Documentation/Features/Menus/Example/","title":"Basic Menu Example","text":"<p>This is an example of a basic menu that displays the progress of two quests.</p> <p></p>"},{"location":"Documentation/Features/Menus/Example/#usage","title":"Usage","text":"<p>You can copy and paste this example into any file in a package.  Then reload and execute the command <code>/q give YOUR_PACKAGE.openMenuItem</code> to get the item that opens the menu.</p> <p>Read the related docs in the menu section to learn more about these configuration options.</p>"},{"location":"Documentation/Features/Menus/Example/#menu-definition","title":"Menu Definition","text":"<pre><code>menus:\n  questMenu:\n    height: 4\n    title: \"&amp;6&amp;lQuests\"\n    bind: \"openMenuItem\"\n    command: \"/quests\"\n    slots:\n      0-3: \"filler,filler,filler,filler\"\n      4: \"reputation\"\n      5-8: \"filler,filler,filler,filler\"\n      9: \"skeletonQuestActive,skeletonQuestDone\"\n      10: \"goldQuestActive,goldQuestDone\"\n      27-35: \"filler,filler,filler,filler,filler,filler,filler,filler,filler\"\n\n    items:\n      skeletonQuestActive:\n        item: \"skeletonQuestActiveItem\"\n        amount: 1\n        conditions: \"!skeletonQuestDone\"\n        text:\n            - \"&amp;7[Quest] &amp;f&amp;lBone ripper\"\n            - \"&amp;f&amp;oRipp some skeletons off\"\n            - \"&amp;f&amp;otheir bones to complete\"\n            - \"&amp;f&amp;othis quest.\"\n            - \"&amp;f&amp;o\"\n            - \"&amp;eLeft click to locate NPC.\"\n        click:\n          left: \"locationNotify\"\n        close: true\n      skeletonQuestDone:\n        item: \"questDone\"\n        amount: 1\n        conditions: \"skeletonQuestDone\"\n        text:\n            - \"&amp;2[Quest] &amp;f&amp;lBone ripper\"\n            - \"&amp;f&amp;oRipp some skeletons off\"\n            - \"&amp;f&amp;otheir bones to complete\"\n            - \"&amp;f&amp;othis quest.\"\n            - \"&amp;f&amp;o\"\n            - \"&amp;2Quest completed!\"\n        close: false\n      goldQuestActive:\n        item: \"goldQuestActiveItem\"\n        amount: 1\n        conditions: \"!goldQuestDone\"\n        text:\n            - \"&amp;7[Quest] &amp;f&amp;lGold rush\"\n            - \"&amp;f&amp;oMine some gold\"\n            - \"&amp;f&amp;oto complete this quest.\"\n        click:\n          left: \"locationNotify\"\n        close: true\n      goldQuestDone:\n        item: \"questDone\"\n        amount: 1\n        conditions: \"goldQuestDone\"\n        text:\n            - \"&amp;2[Quest] &amp;f&amp;lGold rush\"\n            - \"&amp;f&amp;oMine some gold\"\n            - \"&amp;f&amp;oto complete this quest.\"\n            - \"&amp;2Quest completed!\"\n        close: false\n      reputation:\n        item: \"xpBottle\" \n        amount: 1\n        text:\n            - \"&amp;2Quest Level: &amp;6&amp;l%point.quest_reputation.amount%\"\n        close: true\n      filler: \n        text: \"&amp;a \"\n        item: \"filler\"\n\nconditions:\n  skeletonQuestDone: \"tag skeletonQuestDone\"\n  goldQuestDone: \"tag goldQuestDone\"\nevents:\n  locationNotify: \"notify &amp;cThe skeletons roam at x\\\\:123 z\\\\:456!\"\nitems:\n  openMenuItem: \"BOOK title:Quests\"\n\n  xpBottle: \"EXPERIENCE_BOTTLE\"\n  filler: \"GRAY_STAINED_GLASS_PANE\"\n\n  skeletonQuestActiveItem: \"BONE\"\n  goldQuestActiveItem: \"RAW_GOLD\"\n  questDone: \"LIME_CONCRETE\"\n</code></pre>"},{"location":"Documentation/Features/Menus/Menu/","title":"Menus","text":"<p>BetonQuest allows the creation of fully custom GUIs using the events and items system. Nearly everything can be done with these, from guis listing open quests over simple warp systems to information GUIs that display player stats.</p> <p></p> <p> Try the working example for a quick overview.</p>"},{"location":"Documentation/Features/Menus/Menu/#creating-a-menu","title":"Creating a menu","text":"<p>To create a new menu just create a <code>menus</code> section in any file inside a quest package. The name which can be used to identify each menu will be the name of another section as shown below.</p> Menu Definition Example<pre><code>menus:\n  myMenuName:\n    title: \"My Menu Title\"\n    slots: #...\n    items: #...\n</code></pre>"},{"location":"Documentation/Features/Menus/Menu/#general-menu-settings","title":"General Menu Settings","text":"<p>These are general settings for customizing a menu.</p>"},{"location":"Documentation/Features/Menus/Menu/#required-settings","title":"Required Settings","text":"Setting Name Example Description <code>title</code> <code>title: \"&amp;6&amp;lQuests\"</code> Will be displayed in the top left corner of your menu. You can use color codes to color the title. Variables are supported. <code>height</code> <code>height: 3</code> How many lines of slots your menu will have. Minimum 1, Maximum 6."},{"location":"Documentation/Features/Menus/Menu/#optional-settings","title":"Optional Settings","text":"Setting Name Example Description <code>open_conditions</code> <code>open_conditions: \"unlockedMenu,!sneaking\"</code> One or multiple conditions (separated by a <code>,</code>) which all have to be true to open the menu with a bound item or a bound command. <code>open_events</code> <code>open_events: \"menuOpenSound\"</code> One or multiple events (separated by a <code>,</code>) which will be fired when the menu is opened. <code>close_events</code> <code>close_events: \"menuCloseSound\"</code> One or multiple events (separated by a <code>,</code>) which will be fired when the menu is closed. <code>bind</code> <code>bind: \"openMenuItem\"</code> Clicking with this quest item in hand will open the menu. You can create this item in the <code>items</code> section of your package. <code>command</code> <code>command: \"/quests\"</code> This command can be executed to open the menu. The server must be restarted to unregister command tab completions."},{"location":"Documentation/Features/Menus/Menu/#the-items-section","title":"The <code>items</code> section","text":"<p>The items section contains all items which should be displayed in the menu, defined as individual sections of the config.</p> <p>A basic item section looks like this: Item Section Example<pre><code>menus:\n  myMenuName:\n    title: \"My Menu Title\"\n    slots: #...\n    items: #(1)!\n      skeletonQuestDone: #(2)!\n        item: \"questDoneItem\" #(3)!\n      goldQuestDone: #(4)!\n        item: \"questDone\"\n</code></pre></p> <ol> <li>The <code>items</code> section with all items that are displayed in the menu.</li> <li>The name of the item. Used to reference the item in the <code>slots</code> section.</li> <li>The name of any quest item. This cannot be a vanilla item, it must be a quest item.</li> <li>Another item just like the previous one.</li> </ol>"},{"location":"Documentation/Features/Menus/Menu/#optional-item-settings","title":"Optional Item Settings","text":"<p>The three basic optional settings.</p> Name Example Description <code>amount</code> <code>amount: 30</code> The size of the stack that will be displayed in the menu. Variables are supported. <code>conditions</code> <code>conditions: \"questDone\"</code> One or multiple conditions (separated by a <code>,</code>) which all have to be true to display the item. <code>close</code> <code>close: true</code> If set to <code>true</code> the menu will be closed after clicking the item. If this is not set the <code>default_close</code> value from the plugins config will be used."},{"location":"Documentation/Features/Menus/Menu/#the-optional-text-setting","title":"The optional <code>text</code> setting","text":"<p>By default, the name and description of the quest item is displayed when hovering over the item. You can overwrite this by using the <code>text</code> setting. Both color codes and variables are supported. The text can be provided as a single string with newlines, a multi-line string, or a list of strings, see examples.</p> List Example<pre><code>skeletonQuestDone:\n  item: \"questDoneItem\"\n  text:\n    - \"&amp;2Reputation: &amp;6&amp;l%point.quest_reputation.amount%\"\n    - \"Make quests to gain reputation!\"\n</code></pre> String with Newlines Example<pre><code>skeletonQuestDone:\n  item: \"questDoneItem\"\n  text: \"&amp;2Reputation: &amp;6&amp;l%point.quest_reputation.amount% \\nMake quests to gain reputation!\"\n</code></pre> Multi-line String Example<pre><code>skeletonQuestDone:\n  item: \"questDoneItem\"\n  text: |-\n    &amp;2Reputation: &amp;6&amp;l%point.quest_reputation.amount%\n    Make quests to gain reputation!\n</code></pre> <p>Just like the text in conversations you can provide translations for all languages: Translation Example<pre><code>items: \n  skeletonQuestDone: \n    item: \"questDoneItem\"\n    text:\n       en: #(1)!\n         - \"&amp;7[Quest] &amp;6&amp;lThe lost amulet\"\n         - \"&amp;4&amp;o\"\n         - \"&amp;eLeft click to locate npc\"\n         - \"&amp;eRight click to cancel quest\"\n       de: #(2)!\n         - \"&amp;7[Quest] &amp;6&amp;lDas verlorene Amulet\"\n         - \"&amp;4&amp;o\"\n         - \"&amp;eLinksclick um den NPC zu finden\"\n         - \"&amp;eRechstclick um die Quest abzubrechen\"\n</code></pre></p> <ol> <li>The name and description of the item in english.</li> <li>The name and description of the item in german.</li> </ol>"},{"location":"Documentation/Features/Menus/Menu/#the-optional-click-setting","title":"The optional <code>click</code> setting","text":"<p>You can define one or multiple events (separated by <code>,</code>) that are run whenever the item is clicked.   Example<pre><code>items:\n  skeletonQuestDone: \n    item: \"questDoneItem\"\n    click: \"startQuest,closeMenu\"\n</code></pre></p>"},{"location":"Documentation/Features/Menus/Menu/#click-types","title":"Click Types","text":"<p>Different types of clicks can be distinguished:</p> Click Types Example<pre><code>items:\n  skeletonQuestDone: \n    item: \"questDoneItem\"\n    click:\n      left: \"give_xp,msg_give_xp\" #(1)!\n      shiftLeft: \"give_xp,take_xp\" #(2)!\n      right: \"take_xp,msg_take_xp\" #(3)! \n      shiftRight: \"take_xp,msg_take_xp\" #(4)!\n      middleMouse: \"msg_beautifull_text\" #(5)!\n</code></pre> <ol> <li>Run when left-clicking the item.</li> <li>Run when shift + left-clicking the item.</li> <li>Run when right-clicking the item.</li> <li>Run when shift + right-clicking the item.</li> <li>Run when middle mouse clicking the item.</li> </ol>"},{"location":"Documentation/Features/Menus/Menu/#the-slots-section","title":"The <code>slots</code> section","text":"<p>The slots section defines where the items from the items section should be displayed.   You can also assign multiple items to the same slot and use conditions in the items section to specify which one should be used. If you assign multiple items the first one for which all conditions are true will be displayed.</p> <pre><code>menus:\n  myMenuName:\n    title: \"My Menu Title\"\n    slots:\n      8: \"reputation\" #(1)!\n      9: \"questStarted,questCompleted\" #(2)!\n</code></pre> <ol> <li>The item <code>reputation</code> will be displayed in the 8<sup>th</sup> slot.</li> <li>The first item for which all conditions are true will be displayed in the 9<sup>th</sup> slot.    If the conditions for <code>questStarted</code> are true, it will be displayed.    If the condition <code>questCompleted</code> is true it will be displayed.     If both conditions are true the first item (<code>questStarted</code>) will be displayed.</li> </ol> Slot Numbers <p>Use these numbers to assign items to slots: </p>"},{"location":"Documentation/Features/Menus/Menu/#row-assignment","title":"Row Assignment","text":"<p>You can also assign multiple items to a row of slots. Now the slots are filled up one by one using the items whose conditions are true:</p> <pre><code>10-12: \"quest1,quest2,quest3\" #(1)!\n</code></pre> <ol> <li>Assuming that the conditions for the items determine that <code>quest1</code> and <code>quest3</code> should be displayed to the player but <code>quest2</code> shouldn't,    then <code>quest1</code> would be in the slot 10 and <code>quest3</code> in the slot 11. Slot 12 would stay empty.</li> </ol>"},{"location":"Documentation/Features/Menus/Menu/#rectangle-assignment","title":"Rectangle Assignment","text":"<p>Additionally, you can also assign items to a rectangle of slots. Just like with the row, the slots in this rectangle are filled up one by one using the items whose conditions are true  </p> <pre><code>14*25: \"quest1,quest2,quest3\"\n</code></pre> <p></p>"},{"location":"Documentation/Scripting/About-Scripting/","title":"About Scripting","text":"<p>BetonQuest's quests do not have a predefined structure and can be freely designed. This is made possible by a powerful quest scripting language.</p> <p>Quest Structure with a Traditional Quest Plugin</p> Rebel QuestExplanation <pre><code>   flowchart TD\n       A[Quest Starts] --&gt; B[Spy on Rebels]\n       B --&gt; C[Inform King]\n       C --&gt; D[Quest Ends]\n\n     style D fill:#16a349,stroke:#16a349</code></pre> <p>This is the most common quest structure. The player is given a linear quest and has to complete it. There is no way to influence the outcome of the quest.</p> <p>The capabilities of the quest plugin cannot be used outside of these linear quests.</p> <p>Quest Structure with BetonQuest</p> Rebel QuestExplanationDragon Hunter Quest <pre><code>   flowchart TD\n      A[Quest Starts] --&gt; B[Spy on Rebels]\n      B--&gt; C[Decision: Inform King]\n      B--&gt; D[Decision: Betray King]\n\n      C --&gt; E[King rewards you]\n\n      D --&gt; F[Hunt the King down]\n      F --Too slow--&gt; H[Quest Fails]\n      F --In Time--&gt; G[You become King]\n\n      style G fill:#16a349,stroke:#16a349\n      style E fill:#16a349,stroke:#16a349\n      style H fill:#ed1c24,stroke:#ed1c24</code></pre> <p>BetonQuest's quests can have any structure you want! Your imagination is the only limit!</p> <p>You can make anything from simple grind quests to complex story quests with dozends of player decisions and side quests. You can easily create different quest outcomes or story endings!</p> <p>Additionally, BetonQuest's features can be used outside of accepted quests. You can use them to create a world that feels alive and reacts to a player's actions.</p> <pre><code>   flowchart TD\n      A[Quest Starts] --&gt; B[Gather Information about the Dragon]\n      B--&gt; C[Ignore wounded NPC]\n      B--&gt; D[Help wounded NPC to\\n recieve secret information]\n\n      C--&gt; E[Harder Dragon Fight]\n      D--&gt; X[Easier Dragon Fight]\n\n      E--You Die--&gt; H[Quest Fails]\n      X--You Die--&gt; H[Quest Fails]\n\n      E--Dragon Killed--&gt; W[Quest Completed]\n      X--Dragon Killed--&gt; W[Quest Completed]\n\n      style W fill:#16a349,stroke:#16a349\n      style H fill:#ed1c24,stroke:#ed1c24</code></pre>"},{"location":"Documentation/Scripting/About-Scripting/#building-blocks","title":"Building Blocks","text":"<p>The BetonQuest scripting language is based on a few basic building blocks which are outlined in the following sections. They can be freely combined to create any quest you want. All of these are defined using an instruction text.</p> Intstruction Text Example<pre><code>conditions: #(1)!\n  myCondition: \"health 10\" #(2)!\nevents:\n  myEvent: \"hunger set 20\"\nobjectives:\n  myObjective: \"mobkill ZOMBIE 10\"\n</code></pre> <ol> <li>Every building block is defined in its own section. In this case, the section's content is a condition.</li> <li><code>myCondition</code> is the name of this condition. The instruction text is <code>health 10</code>.     This is a condition which checks if the player has 10 health.</li> </ol>"},{"location":"Documentation/Scripting/About-Scripting/#events","title":"Events","text":"<p>In certain moments you will want something to happen. Updating the journal, setting tags, giving rewards, all these are done using events. You define them by specifying a name and instruction string like shown above. At the end of the instruction string you can add the <code>conditions:</code> (with or without <code>s</code> at the end) attribute followed by a list of condition names separated by commas,  like <code>conditions:angry,!quest_started</code>. This will make an event fire only when these conditions are met.</p> <p>Explore all Events</p>"},{"location":"Documentation/Scripting/About-Scripting/#objectives","title":"Objectives","text":"<p>Objective are goals that player must complete. At first, they must be started for a player with the <code>objective</code> event. When the player completes the objective, all defined events are run. For example, you could reward the player by giving them an item.</p> <p>You define them in the <code>objectives</code> section as shown above. At the end of the instruction text you can add conditions and events for the objective. Conditions will limit when the objective can be completed (e.g. killing zombies only at given location), and events will fire when the objective is completed (e.g. giving a reward, or setting a tag which will enable collecting a reward from an NPC). You define these like that: <code>conditions:con1,con2 events:event1,event2</code> at the end of instruction text. Separate them by commas and never use spaces! You can also use the singular forms of these arguments: <code>condition:</code> and <code>event:</code>.</p> <p>If you want to start an objective right after it was completed you can add the <code>persistent</code> argument at the end of its instruction string. For example, you could create a custom respawn system with a <code>die</code> objective. When the player dies, they will be teleported to the spawnpoint and the <code>die</code> objective will be started again. The <code>persistent</code> argument prevents the objective from being completed, although it will run all its events. To cancel such an objective you need to use <code>objective delete</code> event.</p> Example<pre><code>objectives:\n  mineDiamonds: 'block DIAMONDS -10 events:reward'\n  die: 'die cancel respawn:100;200;300;world;90;0 events:sendRespawnMessage conditions:hasCustomTotem'\n</code></pre>"},{"location":"Documentation/Scripting/About-Scripting/#global-objectives","title":"Global objectives","text":"<p>If you want an objective to be active for every player right after joining, you can create a global objective. This is done by adding <code>global</code> argument to the instruction of the objective. When you then reload BetonQuest it is started for all online players and also will be started for every player who joins.</p> <p>Possible use cases would be a quest which starts if a player reaches a specific location or breaks a specific block.</p> <p>To prevent the objective from being started every time a player joins, a tag is set for the player whenever the objective is started. With this tag, the objective will not be started again. These tags follow the syntax <code>&lt;package&gt;.global-&lt;id&gt;</code>, where <code>&lt;id&gt;</code> is the objectives id and <code>&lt;package&gt;</code> the package where the objective is located.</p> Example<pre><code>objectives:\n  startQuestByMining: 'location 100;200;300;world 5 events:start_quest_mine_folder global'\n</code></pre>"},{"location":"Documentation/Scripting/About-Scripting/#variables","title":"Variables","text":"<p>Use with caution!</p> <p>The updating behaviour of already started objectives might change in BetonQuest 3. Perhaps variable changes will be  reflected in the amount of an active objective. This is not the case right now.</p> <p>Objectives support variables for their amount options. When the objective is started for a player, the amount is set to the variable's current value. The amount of an active objective will not be updated if the variable changes. Also, when the variable contains an invalid value for the given objective (e.g. a negative value) a default value of <code>1</code> is used.</p> Examples<pre><code>objectives:\n  killMonsters: 'mobkill ZOMBIE %math.calc:(100-{point.reputation.amount})*2% events:endSiege'\n  breakObsidian: 'block OBSIDIAN %randomnumber.whole.-60~-40% events:dailyReward'\n  eatSteak: 'consume steak amount:%randomnumber.whole.2~6% events:health_boost'\n</code></pre> <p>Explore all Objectives</p>"},{"location":"Documentation/Scripting/About-Scripting/#conditions","title":"Conditions","text":"<p>Conditions allow you to control what options are available to players in conversations, how the NPC responds or if the objective will be completed. They check if a given in-game state is present and return <code>true</code> or <code>false</code> as a result.</p> <p>You can negate the condition (revert its output) by adding an exclamation mark (<code>!</code>) at the beginning of its name.  This only works in the place where conditions are used, i.e. in conversations, not in the conditions section). If you do so, make sure to enclose the condition in quotes, otherwise YAML will give you a syntax error. Example<pre><code>conditions:\n  hasFullHealth: \"health 20\"\nevents:\n  helpWithHealing: \"hunger set 20 conditions:!hasFullHealth\"\n</code></pre></p> <p>Explore all Conditions</p>"},{"location":"Documentation/Scripting/About-Scripting/#tags","title":"Tags","text":"<p>Tags are little pieces of text you can assign to player. They are particularly useful to  determine if player has started or completed quest. They are given with <code>tag</code> event and checked with <code>tag</code> condition. All tags are bound to a package, so if you add the <code>questCompleted</code> tag from within a package named <code>monsterQuest</code>, the tag will look like <code>monsterQuest.questCompleted</code>.</p> <p>Read working across packages to learn how to work with tags across packages.</p>"},{"location":"Documentation/Scripting/About-Scripting/#points","title":"Points","text":"<p>Points are numbers that can be assigned to a player. You can set them with the <code>point</code> event. you want. You can also take the points away, even to negative numbers.  Of course then you can check if player has (or doesn't have) certain amount with the <code>point</code> condition.  They can be used as counter for specific number of quest done, as a reputation system in villages or even an NPC's  attitude to player.</p>"},{"location":"Documentation/Scripting/Data-Formats/","title":"Data Formats","text":""},{"location":"Documentation/Scripting/Data-Formats/#unified-location-formating","title":"Unified location formating","text":"<p>Whenever you want to define some location in your events, conditions, objectives or any other things, you will define it with this specific format. The location consists of 2 things: base and vector. Only the base is always required.</p>"},{"location":"Documentation/Scripting/Data-Formats/#base-location","title":"Base Location","text":"<p>The base is a core location. There are two types: absolute coordinates and variables. Absolute coordinates are defined like <code>100;200;300;world</code>, where <code>100</code> is X coordinate, <code>200</code> is Y, <code>300</code> is Z and <code>world</code> is the name of the world. These can have decimal values. If you want you can also add two more numbers at the end, yaw and pitch  (these are controlling the rotation, for example in teleportation event, both are needed if you decide to add them; example: <code>0.5;64;0.5;world;90;-270</code>).</p>"},{"location":"Documentation/Scripting/Data-Formats/#variables-as-base-location","title":"Variables as Base Location","text":"<p>To use a variable as the location's base it must resolve to valid absolute coordinates. An example of such variable  is <code>%location%</code>, which shows player's exact location. Simply place it instead of coordinates. There is one rule though: you can't use variable base types in events running without players (for example static events or the ones run from folder event after the player left the server). BetonQuest won't be able to resolve the location variable without the player!</p>"},{"location":"Documentation/Scripting/Data-Formats/#vectors","title":"Vectors","text":"<p>The vector is a modification of the location. Vectors look like <code>-&gt;(10;2.5;-13)</code> and are added to the end of the base. This will modify the location, X by 10, Y by 2.5 and Z by -13. For example, location written as <code>100;200;300;world_nether-&gt;(10;2.5;-13)</code> will generate a location with X=110, Y=202.5 and Z=287 in the world <code>world_nether</code>.</p>"},{"location":"Documentation/Scripting/Data-Formats/#block-selectors","title":"Block Selectors","text":"<p>When specifying a way of matching a block, a <code>block selector</code> is used.</p>"},{"location":"Documentation/Scripting/Data-Formats/#format","title":"Format","text":"<p>The format of a block selector is: <code>namespace:material[state=value,...]</code></p> <p>Where:</p> <ul> <li> <p><code>namespace</code> - (optional) The material namespace. If left out then it will be assumed to be 'minecraft'.    Can be a regex.</p> </li> <li> <p><code>material</code> - The material the block is made of. All materials can be found in   Spigots Javadocs.    It can be a regex.   If the regex ends with square brackets you have to add another pair of empty square brackets even if you don't want to    use the state argument (<code>[regex][]</code>).   Instead of using a regex to match multiple materials you can also define a tag.   Every tag matches a special group of blocks or items that can be grouped together logically. They can be used using this format <code>:blocks:flowers</code> or <code>minecraft:blocks:flowers</code>.   Be aware that a tag always starts with either <code>:</code> or a namespace. </p> </li> <li> <p><code>state</code> - (optional) The block states can be provided in a comma separated <code>key=value</code> list surrounded by square brackets.    You can look up states in the Minecraft wiki.    Any states left out will be ignored when matching.    Values can be a regex.</p> </li> </ul> <p>Examples:</p> <ul> <li> <p><code>minecraft:stone</code> - Matches all blocks of type STONE</p> </li> <li> <p><code>redstone_wire</code> - Matches all blocks of type REDSTONE_WIRE</p> </li> <li> <p><code>redstone_wire[power=5]</code> - Matches all blocks of type REDSTONE_WIRE and which have a power of 5</p> </li> <li> <p><code>redstone_wire[power=5,facing=1]</code> - Matches all blocks of type REDSTONE_WIRE and which have both a power of 5 and are facing 1</p> </li> <li> <p><code>.*_LOG</code> - Matches all LOGS</p> </li> <li> <p><code>.*</code> - Matches everything</p> </li> <li> <p><code>.*[waterlogged=true]</code> - Matches all waterlogged blocks</p> </li> <li> <p><code>minecraft:blocks:flowers</code> - Matches all flowers</p> </li> <li> <p><code>:blocks:crops[age=0]</code> - Matches all crops with an age of 0 meaning, not grown / just planted</p> </li> </ul>"},{"location":"Documentation/Scripting/Data-Formats/#setting-behaviour","title":"Setting behaviour","text":"<p>A block selector with a regex or tag as it's material name results in a random block out of all blocks that match that regex or tag. You cannot use a regex in block states when the block selector is used for placing blocks.</p>"},{"location":"Documentation/Scripting/Data-Formats/#matching-behaviour","title":"Matching behaviour","text":"<p>The block state will ignore all additional block states on the block it's compared with by default. Example: <code>fence[facing=north] matches fence[facing=north] and fence[facing=north,waterlogged=true]</code> You can add an <code>exactMatch</code> argument if you only want to match blocks that exactly match the block state.  A regex is allowed in any block state value when the block selector is used to match blocks.</p>"},{"location":"Documentation/Scripting/Data-Formats/#regex-regular-expressions","title":"Regex (Regular Expressions)","text":"<p>A regular expression is a sequence of characters that specifies a search pattern for text. It's used in BetonQuest to check if game objects match a user-defined input. For example, Block Selectors use a regex to match multiple materials or block states. You can also use regular expressions in the  variable condition or the  password objective to match player names, item names, etc. These expressions are a very powerful tool, but can be confusing at first.</p>"},{"location":"Documentation/Scripting/Data-Formats/#common-use-cases","title":"Common Use Cases","text":"Use Case Regex A specific text e.g. <code>STONE</code> <code>STONE</code> A text starting with <code>STONE</code> <code>STONE.*</code> A text ending with <code>_LOG</code> <code>.*_LOG</code> A specific number e.g. <code>42</code> <code>^42$</code> A specific range of numbers, e.g. any number between 0 and 99 <code>[0-9]{1,2}</code> Positive numbers only <code>^\\d+$</code> Negative numbers only <code>^-\\d+$</code> Any number <code>[-+]?[0-9]+\\.?[0-9]+</code>"},{"location":"Documentation/Scripting/Data-Formats/#more-complex-use-cases","title":"More complex use cases","text":"<p>If you want to use complex patterns you must learn more about regular expressions. There are countless resources online, for example you could read this  cheatsheet.</p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/","title":"Packages & Templates","text":""},{"location":"Documentation/Scripting/Packages-%26-Templates/#packages","title":"Packages","text":"<p>All quests you create are organized into packages. A single package can contain one or multiple quests - it's up to your liking. It is very important to have a good understand of packages. Read the packages chapter carefully.</p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#structure","title":"Structure","text":"<p>A package is a folder with a \"package.yml\" file. It must be placed inside the \"BetonQuest/QuestPackages\" directory.  Additionally, you can create extra files or sub-folders inside a package to organize your quest the way you want. Sub-folders of packages that contain a \"package.yml\" are separate packages, they do not belong to the surrounding package in any way. </p> <p>Let's take a look at a few examples:</p> <p>Structure Examples</p> <p>Every quest package is surrounded with a blue box.</p> Simple PackageComplex PackageNested Packages <p>A very simple package. It's defined by the package.yml and has two additional files.      </p> <p>The package <code>storyLine</code> is defined by the package.yml. It contains two sub-folders, both of them (including their files) are part of the package. </p> <p>The package <code>weeklyQuests</code> is defined by the package.yml. It contains two sub-folders, they are not part of the package <code>weeklyQuests</code>. This is the case because they have their own package.yml files. Because of that they are  separate packages. </p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#defining-features","title":"Defining features","text":"<p>You can freely define features (events, conversations, items etc.) in all files  of a quest package. However, they need to be defined in a section that defines their type.</p> <p>The names of these features must be unique in that package, no matter which file they are in.</p> Example <pre><code>events:\n  teleportPlayer: \"...\"\n\nconditions:\n  hasDiamondArmor: \"...\"\n\nobjectives:\n  killCrepper: \"...\"\n\nitems:\n  legendarySword: \"...\"\n\nconversations:\n  bobsConversation:\n    quester: Bob\n    #...\n\nmenus:\n  homeMenu:\n    height: 3\n    #...\n</code></pre>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#working-across-packages","title":"Working across Packages","text":"<p>Accessing features from other packages can be very helpful to link quests together. All events, conditions, objectives, items and conversations can be accessed. Just journal entries only work in their own package. </p> <p>You never need to access a specific file since feature names are unique within a package.</p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#top-level-packages","title":"Top-Level Packages","text":"<p>You can access top-level packages (placed directly in \"QuestPackages\") by prefixing the feature's name with a dot and the package name. </p> Example <p>Let's assume you have a <code>rewards</code> package that contains player reward events. Let's run the <code>easyMobObjective</code> event of the <code>rewards</code> package from another package:</p> <ol> <li>Add a dot (<code>.</code>) before the event name  <code>.easyMobObjective</code></li> <li>Add the package name in front of the dot  <code>rewards.easyMobObjective</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:rewards.easyMobObjective\"\n</code></pre> Note that this only works for top-level packages (the <code>rewards</code> package is placed directly in the <code>QuestPackages</code> folder). Check the next paragraph to see how it's done for other packages.</p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#packages-in-sub-folders","title":"Packages in Sub-folders","text":"<p>You can access packages in sub-folders by prefixing the feature's name with the package name and the path from the \"QuestPackages\" folder to the package.</p> Example One Nested PackageMultiple Nested Packages <p>Let's assume you have a <code>dailyQuests</code> package that contains a <code>dailyQuestOne</code> package. The <code>dailyQuests</code> package is located in the <code>QuestPackages</code> folder. Let's run the <code>startDailyQuest</code> event of the <code>dailyQuestOne</code> package from a third package:</p> <ol> <li>Combine the event name with the package name  <code>dailyQuestOne.startDailyQuest</code></li> <li>Add the path from the <code>QuestPackages</code> folder to the <code>dailyQuestOne</code> package seperated by dashes (<code>-</code>).  <code>dailyQuests-dailyQuestOne.startDailyQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:dailyQuests-dailyQuestOne.startDailyQuest\"\n</code></pre></p> <p>Let's assume you have a <code>dailyQuests</code> package that contains a <code>dailyQuestOne</code> package. The <code>dailyQuests</code> package is contained inside a folder called <code>repeatable</code> which is located in the <code>QuestPackages</code> folder. Let's run the <code>startDailyQuest</code> event of the <code>dailyQuestOne</code> package from a third package:</p> <ol> <li>Combine the event name with the package name  <code>dailyQuestOne.startDailyQuest</code></li> <li>Add the path from the <code>QuestPackages</code> folder to the <code>dailyQuestOne</code> package seperated by dashes (<code>-</code>).  <code>repetable-dailyQuests-dailyQuestOne.startDailyQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 5 events:repetable-dailyQuests-dailyQuestOne.startDailyQuest\"\n</code></pre></p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#relative-paths","title":"Relative paths","text":"<p>You can specify relative paths to a package instead of full paths. The underscore (<code>_</code>) means \"one folder up\" from  the current packages \"package.yml\". In turn, a leading dash (<code>-</code>) combined with a folder name navigates  \"one folder down\" into the given folder. Each package in the path must be seperated by a dash.</p> <p>This can be useful when distributing or moving packages. Instead of rewriting every package path to match the current location, relative paths will still work.</p> Example Going UpwardsGoing Downwards <p>Let's assume you have a <code>weeklyQuests</code> folder that contains a <code>weeklyQuestOne</code> and a <code>weeklyQuestTwo</code> package. Let's run the <code>startQuestTwo</code> event of the <code>weeklyQuestTwo</code> package from the <code>weeklyQuestOne</code> package.</p> <ol> <li>Combine the event name with the package name  <code>weeklyQuestTwo.startQuestTwo</code></li> <li>Add the path from the current package.yml to the folder the package of interested lies in. This is done using underscores (\"go one folder up\"). A dash must be added after each underscore (<code>-</code>).  <code>_-weeklyQuestTwo.startQuestTwo</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 50 events:_-weeklyQuestTwo.startQuestTwo\"\n</code></pre></p> <p>Let's assume you have a <code>weeklyQuests</code> package that contains a <code>weeklyQuestTwo</code> package which contains another package called <code>subQuest</code>. Let's run the <code>startQuest</code> event of the <code>subQuest</code> package from the <code>weeklyQuests</code> package.</p> <ol> <li>Combine the event name with the package name  <code>subQuest.startQuest</code></li> <li>Add the path from the current package.yml to the folder the package of interest lies in. Package names  must be seperated by dashes (<code>-</code>). The path must also be started with a dash to signal \"from the current package downwards\".  <code>-weeklyQuestTwo-subQuest.startQuest</code></li> </ol> <p>An example usage could look like this: <pre><code>zombieObjective: \"mobkill ZOMBIE 50 events:-weeklyQuestTwo-subQuest.startQuest\"\n</code></pre></p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#disabling-packages","title":"Disabling Packages","text":"<p>Each package can optionally be disabled/enabled by setting <code>enabled</code> inside the <code>package</code> section to <code>true</code> or <code>false</code>.</p> <pre><code>package:\n  ## Optionally add this to the package.yml\n  enabled: false\n</code></pre>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#templates","title":"Templates","text":"<p>You should have experience creating and using packages before you start using templates. Templates are a way to create packages that can be used as a base for other packages to reduce the amount of repetitive work. Therefore, they are a great way to centralize logic or create utilities.</p>"},{"location":"Documentation/Scripting/Packages-%26-Templates/#using-templates","title":"Using Templates","text":"<p>Templates work exactly like packages, except that they are placed in the \"BetonQuest/QuestTemplates\" folder instead of the \"BetonQuest/QuestPackages\" folder and that they are not loaded as a ready to use package. Instead, they are used as a base for other packages by referring to them in the <code>templates</code> section inside the <code>package</code> section.</p> <pre><code>package:\n  templates:\n    - MyTemplate\n    - SecondTemplate\n</code></pre> <p>If you use the above in a package, the <code>MyTemplate</code> and <code>SecondTemplate</code> templates would be used as a base for the package. This means that all the events, objectives, conditions, etc. from the templates would be added to the package. If the package already contains an event/objective/condition with the same name as one from the template, the package's events, objectives, conditions, etc. will be used instead of the one from the template.</p> <p>If the same events, objectives, conditions, etc. is defined in multiple templates, the one from the lists first template will be used.</p> <p>You can also use templates in templates. Also in this case, the events, objectives, conditions, etc. that are defined in the current template will be used instead of the ones from the template that is being used as a base.</p>"},{"location":"Documentation/Scripting/Parties/","title":"Quest Parties","text":"<p>Parties are very simple. So simple, that they are hard to understand if you already know some other party system. Basically, they don't even have to be created before using them.  Parties are defined directly in the party event or the party condition. In such instruction strings the first argument is a number - range. It defines the radius where the party members will be looked for. A range of 0 will look for all players in the same world as the player who triggered the event. And a range of -1 will look for all players in all worlds. Second is a list of conditions. Only the players that meet those conditions will be  considered as members of the party. It's most intuitive for players, as they don't have to do anything to be in a party - no commands, no GUIs, just starting the same quest or having the same item - you choose what and when makes the party.</p> <p>To understand better how it works I will show you an example of <code>party</code> event. Let's say that every player has an  objective of pressing a button. When one of them presses it, this event is fired:</p> <pre><code>party_reward: party 50 quest_started cancel_button,teleport_to_dungeon\n</code></pre> <p>Now, it means that all players that: are in radius of 50 blocks around the player who pressed the button AND meet <code>quest_started</code> condition will receive <code>cancel_button</code> and <code>teleport_to_dungeon</code> events. The first one will cancel the quest for pressing the button for the others (it's no longer needed), the second one will teleport them somewhere. Now, imagine there is a player on the other side of the world who also meets <code>quest_started</code> condition - he won't be teleported into the dungeon, because he was not with the other players (not in 50 blocks range). Now, there were a bunch of other players running around the button, but they didn't meet the <code>quest_started</code> condition. They also won't be teleported (they didn't start this quest).</p>"},{"location":"Documentation/Scripting/Quoting-%26-YAML/","title":"Quoting & advanced YAML","text":""},{"location":"Documentation/Scripting/Quoting-%26-YAML/#quoting","title":"Quoting","text":"<p>Sometimes it is important to pass an argument that contains spaces or even a newline as an argument. For those cases you can use quotes.</p> Quoting examples<pre><code>events:\n  multiline: \"notify \\\"This is the first line.\\nAnd here is the second line!\\\"\" #(1)!\n  quotes_in_quotes: 'notify \"And he said: \\\"I have to tell you something!\\\"\"' #(2)!\n  backslash: notify \"\\\\o/\" #(3)!\n</code></pre> <ol> <li>This is the first line.And here is the second line!</li> <li>And he said: \"I have to tell you something!\"</li> <li>\\o/</li> </ol>"},{"location":"Documentation/Scripting/Quoting-%26-YAML/#yaml","title":"YAML","text":""},{"location":"Documentation/Scripting/Quoting-%26-YAML/#using-yaml-multiline-syntax","title":"Using YAML multiline syntax","text":"<p>Very long instructions can be hard to read, but to improve readability there is a YAML feature that allows you to write easily readable formatted text that will work perfectly fine with instructions.</p> Folded multi-line block example<pre><code>events:\n  long_text: &gt;-\n    notify\n    This is a very long text.\n    It will still be displayed as one single line in chat,\n    no matter where you insert a newline.\n    Even combined with \"quoting\n    there will be no newline\" unless you \"use a double linebreak,\"\n\n    as that is interpreted as a normal newline by YAML.\"\n</code></pre> <p>There is also an excellent reference for YAML Multiline written by Wolfgang Faust.</p>"},{"location":"Documentation/Scripting/Schedules/","title":"Schedules","text":"<p>Schedules allow you to run events periodically at specific times for the entire server.</p>"},{"location":"Documentation/Scripting/Schedules/#player-independent-events","title":"Player independent eventsSet Block: <code>setblock</code>","text":"<p>Whenever events are run from a conversation or an objective, they are always run for a specific player. For events run from a schedule this is not the case as there is no specific player involved.  This means you can only use events that are player independent, like <code>setblock</code> or <code>globaltag</code>, in schedules. The same applies to the conditions used by these events.</p> <p>To determine if an event is player independent (and can be used in schedules), look for the static flag in the docs.</p> <p>Example</p> <p></p> <p>persistent, static (1)</p> <p>Changes the block at the given position.</p> <ol> <li>This flag states that <code>setblock</code> can be used player independent.</li> </ol> <p>Some events behave differently when called from a schedule in independent mode. For example, <code>tag delete</code> will include offline players. A list of all events that act differently can be found in the <code>runIndependent</code> docs.</p> <p>But sometimes you might want your schedule to run a player dependent event, like <code>message</code> or <code>give</code> for all players on the server. To do this you can use the <code>runforall</code> event. It will run the given events for all players on the server.  You can even use conditions to filter out players.</p>"},{"location":"Documentation/Scripting/Schedules/#realtime-schedules","title":"Realtime schedules","text":"<p>Realtime schedules are, as the name already says, schedules that run at a specific real world time, for example at 12 o'clock each day. Do not confuse these with Minecraft's ingame time!</p> <p>The time is provided by the system time of the computer your minecraft server is running on, in the systems time zone.  </p>"},{"location":"Documentation/Scripting/Schedules/#daily-realtime-schedule-realtime-daily","title":"Daily realtime schedule: <code>realtime-daily</code>","text":"<p>A super simple to use type of schedule, but also limited in its functionality. Just specify the time of the day when the events should run, and they will run every day at that same time.</p> Simple ExampleFull Example <pre><code>schedules:\n  sayGoodNight: #(1)!\n    type: realtime-daily #(2)!\n    time: '22:00' #(3)!\n    events: bell_ring,notify_goodNight #(4)!\n</code></pre> <ol> <li> <p>The name of the schedule.</p> </li> <li> <p>The <code>type</code> of this schedule is always <code>realtime-daily</code>.</p> </li> <li> <p><code>time</code> is the time of day when the schedule should be run in format <code>HH:mm</code>.</p> </li> <li> <p>An event (or multiple separated by <code>,</code>) that should run at the given time.</p> </li> </ol> <p>Runs every day at 10pm, will ring a bell and wish everyone a good night.</p> <pre><code># This example works out of the box. Copy-paste to try out how it works.\nevents:\n  bell_sound: 'notifyall io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  notify_goodNight: 'notifyall &amp;6Good night, sleep well!'\nschedules:\n  sayGoodNight:\n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring,notify_goodNight\n</code></pre> <p>Warning</p> <p>The time must always be in <code>''</code> to avoid problems. It needs leading zero if less than 10.</p>"},{"location":"Documentation/Scripting/Schedules/#cron-realtime-schedule-realtime-cron","title":"Cron realtime schedule: <code>realtime-cron</code>","text":"<p>The cron realtime schedule is an incredibly flexible tool to define when events shall run. It is similar to the <code>realtime-daily</code> schedule but the time is defined as a cron expression. The supported syntax is identical to the original unix crontab syntax.</p> <p>Tip</p> <p>Crontab Guru is a great tool for learning and testing cron expressions. It also provides a long list of examples. BetonQuest supports all features listed there, even the non-standard ones!</p> Simple ExampleFull Example <pre><code>schedules:\n  sayGoodNight: #(1)!\n    type: realtime-cron #(2)!\n    time: '0 22 * * *' #(3)!\n    events: bell_ring,notify_goodNight #(4)!\n</code></pre> <ol> <li> <p>The name of the schedule.</p> </li> <li> <p>The <code>type</code> of this schedule is always <code>realtime-cron</code>.</p> </li> <li> <p><code>time</code> is the cron expression that defines when the schedule should be run. Use crontab.guru!</p> </li> <li> <p>An event (or multiple separated by <code>,</code>) that should run at the given time.</p> </li> </ol> <p>Runs every day at 10pm, will ring a bell and wish everyone a good night.</p> <pre><code># This example works out of the box. Copy-paste to try out how it works.\nevents:\n  bell_sound: 'notifyall io:sound sound:block.bell.use'\n  bell_ring: 'folder bell_sound,bell_sound,bell_sound,bell_sound period:0.5'\n  notify_goodNight: 'notifyall &amp;6Good night, sleep well!'\nschedules:\n  sayGoodNight:\n    type: realtime-cron\n    time: '0 22 * * *'\n    events: bell_ring,notify_goodNight\n</code></pre> <p>The following special expressions were added for extended functionality or simpler usage:</p> Expression Description Equivalent to <code>@reboot</code> Run at server startup, before catching up any missed schedules - <code>@hourly</code> Run once an hour at the beginning of the hour <code>0 * * * *</code> <code>@daily</code> / <code>@midnight</code> Run once a day at 00:00 <code>0 0 * * *</code> <code>@weekly</code> Run once a week at 00:00 on Sunday morning <code>0 0 * * 0</code> <code>@monthly</code> Run once a month at 00:00 of the first day of the month <code>0 0 1 * *</code> <code>@yearly</code> / <code>@annually</code> Run once a year at 00:00 of 1 January <code>0 0 1 1 *</code>"},{"location":"Documentation/Scripting/Schedules/#catchup-strategies","title":"Catchup Strategies","text":"<p>Obviously, scheduled events can't be run while the server is shut down. If you want to be sure that a schedule will nevertheless be run, you can define a catchup strategy.</p> <p>On startup, BetonQuest checks which schedules have been missed and (if needed) they will be run on the first tick. Schedules of the same type will be run in the order they were missed. For mixed types the order can not be guaranteed.</p> NONEONEALL Example<pre><code>schedules:\n  sayGoodNight: \n    type: realtime-daily\n    time: '22:00'\n    events: bell_ring,notify_goodNight\n    catchup: none #(1)!\n</code></pre> <ol> <li>Don't catch up any missed schedules after reboot. (default value, can be ommitted)</li> </ol> <p>As it's just an announcement we don't need to repeat it. The right time has passed.</p> Example<pre><code>schedules:\n  resetQuarryArea: \n    type: realtime-daily\n    time: '03:00'\n    events: pasteQuarry\n    catchup: one #(1)!\n</code></pre> <ol> <li>If the schedule was missed (no matter how often) run it once after reboot.</li> </ol> <p>The quarry should be reset every day at 3am. Even if the server was shut down at that time, run the event once at reboot.</p> Example<pre><code>schedules:\n  greedyMarchant: \n    type: realtime-daily\n    time: '03:00'\n    events: increaseFuelPrice\n    catchup: all #(1)!\n</code></pre> <ol> <li>Run the schedule as often as it was missed after reboot.</li> </ol> <p>Inflation! The fuel marchant increases it's price every day at 3am. If the sever was shut down, prices should increase at the same pace.</p> <p>Danger</p> <p>If the server was shut down for a long time, running all missed schedules can be a too heavy task for the server to handle.</p> <p>For example using <code>realtime-daily</code> type with a syntax like <code>* * * * *</code> (run every minute) and catchup strategy <code>ALL</code> will create <code>86 400</code> missed shedules per day!</p> <p>So be very cautious when using <code>ALL</code> catchup strategy!</p> <p>By deleting <code>.cache/schedules.yml</code> before startup you can make BetonQuest forget about any missed schedules </p>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/","title":"Conditions List","text":""},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#advancement-advancement","title":"Advancement: <code>advancement</code>","text":"<p>This condition checks if the player has specified advancement. The only argument is the full name of the advancement. This includes the namespace, the tab and the name of the advancement as configured on your server.  List of all vanilla advancements.</p> <p>Example</p> <pre><code>advancement minecraft:adventure/kill_a_mob\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#conjunction-and","title":"Conjunction: <code>and</code>","text":"<p>static</p> <p>Conjunction of specified conditions. This means that every condition has to be met in order for conjunction to be true. Used only in complex alternatives, because conditions generally work as conjunction. Instruction string is exactly the same as in <code>alternative</code>.</p> <p>Example</p> <pre><code>and has_helmet,has_chestplate,has_leggings,has_boots\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#armor-armor","title":"Armor: <code>armor</code>","text":"<p>The armor condition requires the player to wear an armor that has been specified in the items section.</p> <p>Example</p> <pre><code>armor helmet_of_concrete\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#biome-biome","title":"Biome: <code>biome</code>","text":"<p>This condition will check if the player is in specified biome. The only argument is the biome type.</p> <p>Example</p> <pre><code>biome savanna_rock\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#burning-burning","title":"Burning: <code>burning</code>","text":"<p>This condition will check if the player is on fire.</p> Example<pre><code>conditions:\n  isOnFire: \"burning\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#check-conditions-check","title":"Check conditions: <code>check</code>","text":"<p>persistent, static</p> <p>This condition allow for specifying multiple instruction strings in one, longer string. Each instruction must be started with <code>^</code> character and no other dividers should be used. The condition will be met if all inner conditions are met. It's not the same as <code>and</code> condition, because you can specify an instruction string, not a condition name.</p> <p>Example</p> <pre><code>check ^tag beton ^item emerald:5 ^location 100;200;300;survival_nether;5 ^experience 20\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#chest-item-chestitem","title":"Chest Item: <code>chestitem</code>","text":"<p>persistent, static</p> <p>This condition works in the same way as <code>item</code> condition, but it checks the specified chest instead of a player. The first argument is a location of the chest and the second one is the list of items defined in the same way as in <code>item</code> condition. If there is no chest at specified location the condition won't be met.</p> <p>Example</p> <pre><code>chestitem 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#conversation-conversation","title":"Conversation: <code>conversation</code>","text":"<p>This condition will check if a conversation has an available starting option. If no starting option has a condition that returns true then this will return false.</p> <p>Example</p> <pre><code>conversation innkeeper\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#day-of-week-dayofweek","title":"Day of week: <code>dayofweek</code>","text":"<p>It must be a specific day of the week that this condition returns true. You can specify either the english name of the day or the number of the day (1 being monday, 7 sunday,..).</p> <p>Example</p> <pre><code>dayofweek sunday\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#potion-effect-effect","title":"Potion Effect: <code>effect</code>","text":"<p>To meet this condition the player must have an active potion effect. There is only one argument and it takes values from this page: potion types.</p> <p>Example</p> <pre><code>effect SPEED\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#empty-inventory-slots-empty","title":"Empty inventory slots: <code>empty</code>","text":"<p>To meet this condition the players inventory must have the specified amount of empty slots or more. If you want to check for a specific amount (for example for a full inventory with 0 empty slots) you can append the <code>equal</code> argument.</p> <p>Example</p> <pre><code>empty 5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#entities-in-area-entities","title":"Entities in area: <code>entities</code>","text":"<p>persistent, static</p> <p>This condition will return true only if there is a specified amount (or more) of specified entities in the specified area.  There are three required arguments - entity type, location and range. Entities are defined as a list separated by commas. Each entity type (taken from here) can have an additional amount suffix, for example <code>ZOMBIE:5,SKELETON:2</code> means 5 or more zombies and 2 or more skeletons. The location is defined as usual. The number after the location is the range around the location in which will be checked for these entities. You can also specify additional <code>name:</code> argument, with the name of the required entity. Replace all spaces with <code>_</code> here. You can use <code>marked:</code> argument to check only for entities marked in <code>spawn</code> event.</p> <p>Example</p> <pre><code>entities ZOMBIE:2 100;200;300;world 10 name:Deamon\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#experience-experience","title":"Experience: <code>experience</code>","text":"<p>This condition is met when the player has the specified amount of experience levels. You can also define decimal numbers, for example <code>experience 1.5</code> will be met when the player has 1.5 or more experience levels. If you want to check for an absolute amount of experience points you can convert it to decimal levels.</p> <p>Example</p> <pre><code>experience 30\nexperience 5.5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#facing-direction-facing","title":"Facing direction: <code>facing</code>","text":"<p>Checks if the player is looking in the given direction. Valid directions are <code>UP</code>, <code>DOWN</code>, <code>NORTH</code>, <code>EAST</code>, <code>WEST</code> and <code>SOUTH</code>. Up and down start at a pitch of 60\u00b0.</p> <p>Example</p> <pre><code>facing EAST\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#fly-fly","title":"Fly: <code>fly</code>","text":"<p>This will check if the player is currently flying (Elytra type of flight).</p> <p>Example</p> <pre><code>fly\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#game-mode-gamemode","title":"Game mode: <code>gamemode</code>","text":"<p>This condition checks if the player is in a specified game mode. The first argument is the game mode, i.e. survival, creative, adventure.</p> <p>Example</p> <pre><code>gamemode survival\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#global-point-globalpoint","title":"Global point: <code>globalpoint</code>","text":"<p>persistent, static</p> <p>The same as point condition but it checks the amount for a global point category which has the same value for all players.</p> <p>Example</p> <pre><code>globalpoint global_knownusers 100\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#global-tag-globaltag","title":"Global tag: <code>globaltag</code>","text":"<p>persistent, static</p> <p>This requires a specific global tag to be set and works the same as normal tag condition.</p> <p>Example</p> <pre><code>globaltag global_areNPCsAgressive\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#item-in-hand-hand","title":"Item in Hand: <code>hand</code>","text":"<p>This condition is met only when the player holds the specified quest item in their hand. The offhand will be checked instead of the main hand if the <code>offhand</code> keyword is added. Amount cannot be set here, though it may be checked with the <code>item</code> condition.</p> <p>Example</p> <pre><code>hand SpecialSword\nhand QuestShield offhand\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#health-health","title":"Health: <code>health</code>","text":"<p>Requires the player to have equal or more health than specified amount. The only argument is a number (double). Players can have 0 to 20 health by default (there are some plugins and commands which change the maximum) (0 means dead, don't use that since it will only be met when the player sees the red respawn screen).</p> <p>Example</p> <pre><code>health 5.6\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#height-height","title":"Height: <code>height</code>","text":"<p>This condition requires the player to be below specific Y height. The required argument is a number or a location (for example 100;200;300;world). In case of location it will take the height from it and use it as regular height.</p> <p>Example</p> <pre><code>height 16\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#hunger-hunger","title":"Hunger: <code>hunger</code>","text":"<p>Requires the player to have equal or more hunger points, the condition is the same as <code>health</code> just for hunger. If the hunger level is below 7, the player cannot sprint.</p> <p>Example</p> <pre><code>hunger 15\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#in-conversation-inconversation","title":"In Conversation: <code>inconversation</code>","text":"<p>This condition checks, if the player is in a conversation.</p> Parameter Syntax Default Value Explanation conversation <code>conversation:name</code> Optional name of the conversation. If specified, it will only check for the conversation with this name. Example<pre><code>conditions:\n  isInConversation: \"inconversation\"\n  talksToInnkeeper: \"inconversation conversation:innkeeper\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#item-in-inventory-item","title":"Item in Inventory: <code>item</code>","text":"<p>This condition requires the player to have all specified items in his inventory or backpack. You specify items in a list separated by commas (without spaces between!) Each item consists of its name and amount, separated by a colon. Amount is optional, so if you specify just item's name the plugin will assume there should be only one item.</p> <p>Example</p> <pre><code>item emerald:5,gold:10\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#durability-of-item-itemdurability","title":"Durability of item: <code>itemdurability</code>","text":"<p>This condition requires the player to have a certain amount of durability on an item. The first argument is the slot, the second the amount. Optional <code>relative</code> argument sets 0 to broken and 1 to the maximum durability the item can have. This condition returns false when no item is in the given slot or does not have durability, like stone or sticks. Available slot types: <code>HAND</code>, <code>OFF_HAND</code>, <code>HEAD</code>, <code>CHEST</code>, <code>LEGS</code>, <code>FEET</code>.</p> <p>Example</p> <pre><code>itemdurability HAND 50\nitemdurability CHEST 0.5 relative\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#journal-entry-journal","title":"Journal entry: <code>journal</code>","text":"<p>This condition will return true if the player has specified entry in his journal (internal name of the entry, like in journal section). The only argument is name of the entry.</p> <p>Example</p> <pre><code>journal wood_started\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#language-language","title":"Language: <code>language</code>","text":"<p>persistent</p> <p>This condition is fulfilled as long as the player has one of the specified languages selected as their quest language.</p> <p>Example</p> <pre><code>language en,de,fr\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#location-location","title":"Location: <code>location</code>","text":"<p>It returns true only when the player is closer to specified location than the specified distance. Just two mandatory attributes - location and radius around it (can be a variable).</p> <p>Example</p> <pre><code>location 100;200;300;survival_nether 5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#looking-at-a-block-looking","title":"Looking at a block: <code>looking</code>","text":"<p>Checks if the player is looking at a block with the given location or material. You must specify either <code>loc:</code> optional (the location of the block) or <code>type:</code> optional as a <code>block selector</code>. You can also specify both.</p> <p>Example</p> <pre><code>looking loc:12.0;14.0;-15.0;world type:STONE\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#moon-cycle-mooncycle","title":"Moon Cycle: <code>mooncycle</code>","text":"<p>static</p> <p>This condition checks the moon cycle (1 is full moon, 8 is Waxing Gibbous) in the given world or the players world. A list of phases can be  found  here.</p> Parameter Syntax Default Value Explanation MoonPhase Number The MoonPhase to check for. Can be a variable. world world:name player location The world to check for the moon phase. Can be a variable. Example<pre><code>fullMoon: \"mooncycle 1\"\nnewMoonHub: \"mooncycle 5 world:hub\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#npc-distance-npcdistance","title":"NPC distance: <code>npcdistance</code>","text":"<p>This condition will check if a Npc is close to the player.</p> Parameter Syntax Default Value Explanation Npc Npc The ID of the Npc Distance Variable The maximum distance Example<pre><code>canHearBandit: npcdistance bandit 22\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#npc-location-npclocation","title":"NPC location: <code>npclocation</code>","text":"<p>persistent, static</p> <p>This condition will check if a Npc is close to a location.</p> Parameter Syntax Default Value Explanation Npc Npc The ID of the Npc Location Location The location Distance Number The maximum distance Example<pre><code>nearTarget: npclocation merchant 4.0;14.0;-20.0;world 22\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#number-compare-numbercompare","title":"Number compare: <code>numbercompare</code>","text":"<p>This condition compares two numbers. The valid operations are: <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code>.</p> <p>Example</p> <pre><code>numbercompare %ph.other_plugin:points% &gt;= 100\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#objective-objective","title":"Objective: <code>objective</code>","text":"<p>This condition is very simple: it's true only when the player has an active objective. The only argument is the name of the objective, as defined in the objectives section.</p> <p>Example</p> <pre><code>objective wood\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#alternative-or","title":"Alternative: <code>or</code>","text":"<p>persistent, static</p> <p>Alternative of specified conditions. This means that only one of conditions has to be met in order for alternative to be true. You just define one mandatory argument, condition names separated by commas. <code>!</code> prefix works as always.</p> <p>Example</p> <pre><code>or night,rain,!has_armor\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#partial-date-partialdate","title":"Partial date: <code>partialdate</code>","text":"<p>The current date must match the given pattern. You can specify the day of the month, the month or the year it must be that this condition returns true or combine them. You can also specify multiple days/months/years by just separating them by <code>,</code> or a interval by using <code>-</code>. If you have trouble understanding how this works have a look at the example.</p> <p>The example is true between the 1<sup>st</sup> and the 5<sup>th</sup> or on the 20<sup>th</sup> of each month, but only in the year 2017.</p> <p>Example</p> <pre><code>partialdate day:1-5,20 year:2017\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#party-party","title":"Party: <code>party</code>","text":"<p>static</p> <p>This is part of the party system. This condition takes three optional arguments: <code>every:</code>, <code>any:</code>, <code>count:</code> and <code>location:</code>. \"Every\" is a list of conditions that must be met by every player in the party. Any is a list of conditions that must be met by at least one player in a party (it doesn't have to be the same player, one can meet first condition, another one can meet the rest, and it will work). Count is just a number, minimal amount of players in the party. Location can be used to create a party without the need of a player that is the center of the party. You don't have to specify all those arguments, you can use only one if you want.</p> <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 every:some_item any:some_location,some_other_item count:5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#permission-permission","title":"Permission: <code>permission</code>","text":"<p>The player must have a specified permission for this condition to be met. The instruction string must contain permission node as the required argument.</p> <p>Example</p> <pre><code>permission essentials.tpa\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#point-point","title":"Point: <code>point</code>","text":"<p>Requires the player to have amount of points equal to the specified category or more. There are two required arguments, first is the category (string), second is the amount (integer). You can also add optional argument <code>equal</code> to accept only players with exactly equal amount of points.</p> <p>Example</p> <pre><code>point beton 20\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#ride-an-entity-ride","title":"Ride an entity: <code>ride</code>","text":"<p>This condition checks if the player rides the specified entity. <code>any</code> is also a valid input and matches any entity.</p> <p>Example</p> <pre><code>ride horse\nride any\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#random-random","title":"Random: <code>random</code>","text":"<p>persistent, static</p> <p>This condition is met randomly. There is one argument: two positive numbers like <code>5-12</code>. They mean something like that: \"It will be true 5 times out of 12\".</p> <p>Example</p> <pre><code>random 12-100\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#armor-rating-rating","title":"Armor Rating: <code>rating</code>","text":"<p>This one requires the player to wear armor which gives him specified amount of protection (armor icons). The first and only argument should be an integer. One armor point is equal to half armor icon in-game (10 means half of the bar filled).</p> <p>Example</p> <pre><code>rating 10\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#real-time-realtime","title":"Real time: <code>realtime</code>","text":"<p>static****persistent</p> <p>There must a specific (real) time for this condition to return true.</p> Parameter Syntax Default Value Explanation Timespan startTime-endTime Two points of time seperated by dash in the 24-hour format (0 - 24). The minutes are optional (hh or hh:mm). Example<pre><code>allDayReal: \"realtime 6-19\"\nmidnightReal: \"realtime 23:30-0:30\"\nknoppersTimeReal: \"realtime 9:30-10\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#scoreboard-score","title":"Scoreboard: <code>score</code>","text":"<p>persistent</p> <p>With this condition you can check if the score in a specified objective on a scoreboard is greater or equal to specified amount.</p> Parameter Syntax Default Value Explanation scoreboard objective Objective name The name of the scoreboard objective count Number The minimum whole number of the objective Example<pre><code>hasAtLeastTenKills: \"score kills 10\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#scoreboard-tag-scoretag","title":"Scoreboard Tag: <code>scoretag</code>","text":"<p>This scoreboard condition checks if the player has a specified scoreboard tag. The kind of tags that are used by vanilla Minecraft and not the betonquest tags.</p> Parameter Syntax Default Value Explanation scoreboard tag Tag name The name of the scoreboard tag. Example<pre><code>hasVanillaTag: \"scoretag vanilla_tag\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#sneaking-sneak","title":"Sneaking: <code>sneak</code>","text":"<p>Sneak condition is only true when the player is sneaking. This would probably be useful for creating traps, I'm not sure. There are no arguments for this one.</p> <p>Example</p> <pre><code>sneak\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#check-stage-stage","title":"Check Stage: <code>stage</code>","text":"<p>This condition compares the players current stage with the given stage by its index numbers. For more take a look at the stage objective. The valid operations are: <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code>.</p> Parameter Syntax Default Value Explanation stage objective Objective The name of the stage objective comparator Comparator The comparator to use for the comparison stage Stage The name of the stage to compare Example<pre><code>conditions:\n  isDeliverCookies: \"stage bakeCookies = deliverCookies\"\n  isDeliverCookiesOrAbove: \"stage bakeCookies &gt; cookCookies\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#tag-tag","title":"Tag: <code>tag</code>","text":"<p>This one requires the player to have a specified tag. Together with <code>!</code> negation it is one of the most powerful tools when creating conversations. The instruction string must contain tag name.</p> <p>Example</p> <pre><code>tag quest_completed\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#test-for-block-testforblock","title":"Test for block: <code>testforblock</code>","text":"<p>persistent, static</p> <p>This condition is met if the block at specified location matches the given material. First argument is a location, and the second one is a <code>block selector</code>.</p> <p>Example</p> <pre><code>testforblock 100;200;300;world STONE\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#time-time","title":"Time: <code>time</code>","text":"<p>static</p> <p>There must be specific (Minecraft) time on the world for this condition to return true.</p> Parameter Syntax Default Value Explanation Timespan startTime-endTime Two points of time seperated by dash in the 24-hour format (0 - 24). The minutes are optional (hh or hh:mm). world world:name player location The world to check for the time. Can be a variable. Example<pre><code>allDay: \"time 6-19\"\nmidnightInOverworld: \"time 23:30-0:30 world:overworld\"\nknoppersTime: \"time 9:30-10\"\nexactAtTwelveAtPlayersHome: \"time 12-12 world:%ph.player_home_world%\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>static</p> <p>This condition checks if a variable value matches given regular expression</p> Parameter Syntax Default Value Explanation Variable Any variable The variable (surrounded by <code>%</code> characters). Regex A regex pattern The regex that the variables value must match. The regex can also be stored in a variable. forceSync Keyword False Forces the variables to be resolved on the main thread. This may be required by some third party variables. Example<pre><code>anyNumber: \"variable %objective.var.price% -?\\\\d+\" #(1)!\nisPlayer: \"variable %ph.parties_members_1% %player%\" #(2)!\ndenizenVariable: \"variable %ph.denizen_&lt;server.match_player[SomeName].has_flag[flag_name]&gt;% true forceSync\" #(3)!\ndenizenVariableThis: \"variable %ph.denizen_&lt;player.has_flag[flag_name]&gt;% true forceSync\" #(4)!\n</code></pre> <ol> <li>Returns true if the variable <code>%objective.var.price%</code> contains any number.</li> <li>Returns true if the <code>parties_members_1</code> variable contains the player's name.</li> <li>Returns true if the <code>denizen_&lt;server.match_player[SomeName].has_flag[flag_name]&gt;</code> Denizen variable contains <code>true</code>.    This variable is resolved on the main thread. <p>The <code>someName</code> part can't be a variable! <li>Works the same as the <code>denizenVariable</code> with the only difference it checks for the player the condition is executed with.</li>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#weather-weather","title":"Weather: <code>weather</code>","text":"<p>static</p> <p>There must be a specific weather for this condition to return true. There are three possible options: sun, rain and storm. Note that <code>/toggledownfall</code> does not change the weather, it just does what the name suggests: toggles downfall. The rain toggled off will still be considered as rain! Use <code>/weather clear</code> instead.</p> Parameter Syntax Default Value Explanation weather Keyword The weather to check for. world world:name player location The world to check for the weather. Example<pre><code>isSunny: \"weather sun\"\nweatherInPlayerWorld: \"weather rain world:%ph.player_home_world%\"\noverworldIsRainy: \"weather rain world:overworld\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Conditions-List/#world-world","title":"World: <code>world</code>","text":"<p>This conditions checks if the player is in a specified world. The first argument is the name of a world.</p> <p>Example</p> <pre><code>world world\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/","title":"Events List","text":""},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#burn-burn","title":"Burn: <code>burn</code>","text":"Parameter Syntax Default Value Explanation duration <code>duration:number</code> The duration the player will burn (in seconds). Can be a variable. Example<pre><code>events:\n  burn: \"burn duration:4\"\n  punishing_fire: \"burn duration:%point.punishment.amount%\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#cancel-a-quest-cancel","title":"Cancel a quest: <code>cancel</code>","text":"<p>This event works in the same way as a quest canceler in the backpack.</p> <p>Running this event is equal to the player canceling a quest using the backpack.</p> Parameter Syntax Default Value Explanation canceler CancelerID The Quest Canceler to execute. bypass Keyword (<code>bypass</code>) Disabled If the canceler conditions should be ignored. If enabled the canceler will be executed, even when its conditions are not met. Example<pre><code>cancelQuest: \"cancel woodQuest bypass\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#cancel-the-conversation-cancelconversation","title":"Cancel the Conversation: <code>cancelconversation</code>","text":"<p>Cancels the active conversation of the player.</p> Example<pre><code>  events:\n    cancel: \"cancelconversation\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#chat-player-message-chat","title":"Chat player message <code>chat</code>","text":"<p>This event will send the given message as the player. Therefore, it will look like as if the player did send the message.  The instruction string is the command, without leading slash. You can only use <code>%player%</code> as a variable in this event. Additional messages can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>If a plugin does not work with the sudo / command event you need to use this event.</p> <p>Example</p> <pre><code>sendMSG: \"chat Hello!\"\nsendMultipleMSGs: \"chat Hi %player%|ban %player%|pardon %player%\"\nsendPluginCommand: \"chat /someCommand x y z\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#chest-clear-chestclear","title":"Chest Clear: <code>chestclear</code>","text":"<p>persistent, static</p> <p>This event removes all items from a chest at specified location. The only argument is a location.</p> <p>Example</p> <pre><code>chestclear 100;200;300;world\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#chest-give-chestgive","title":"Chest Give: <code>chestgive</code>","text":"<p>persistent, static</p> <p>This works the same as <code>give</code> event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in <code>give</code> event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location.</p> <p>Example</p> <pre><code>chestgive 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#chest-take-chesttake","title":"Chest Take: <code>chesttake</code>","text":"<p>persistent, static</p> <p>This event works the same as <code>take</code> event, but it takes items from a chest at specified location. The instruction string is defined in the same way as in <code>chestgive</code> event.</p> <p>Example</p> <pre><code>chesttake 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#compass-compass","title":"Compass: <code>compass</code>","text":"<p>When you run this event, you can add or remove a compass destination for the player. You may also directly set the player's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is <code>add</code>,<code>del</code> or <code>set</code>, and second one is the name of the target, as defined in the compass section. Note that if you set a target the player will not automatically have it added to their choices.</p> <p>The destination must be defined in <code>compass</code> section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items section) to be displayed in the backpack. Example of a compass target:</p> <pre><code>compass:\n  beton:\n    name:\n      en: Target\n      pl: Cel\n    location: 100;200;300;world\n    item: scroll\n</code></pre> <p>Example</p> <pre><code>compass add beton\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#command-command","title":"Command: <code>command</code>","text":"<p>persistent, static</p> <p>Runs specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than <code>%player%</code> won't resolve if the event is fired from delayed <code>folder</code> and the player is offline now. You can define additional commands by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the command use <code>\\|</code>.</p> <p>Looking for run command as player?</p> <p>Example</p> <pre><code>command kill %player%|ban %player%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#conversation-conversation","title":"Conversation: <code>conversation</code>","text":"<p>Starts a conversation at location of the player.  The first argument is ID of the conversation. This bypasses the conversation permission!</p> <p>The optional <code>option</code> argument is a NPC option where the conversation will start. When using this argument the conversation will start without its header. </p> <p>Example</p> <pre><code>conversation village_smith\nconversation tutorial option:explain_world\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#damage-player-damage","title":"Damage player: <code>damage</code>","text":"<p>Damages the player by specified amount of damage. The only argument is a number (can have floating point).</p> <p>Example</p> <pre><code>damage 20\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#delete-point-deletepoint","title":"Delete Point: <code>deletepoint</code>","text":"<p>persistent, static</p> <p>Clear all player points in a specified category.</p> <p>Example</p> <pre><code>deletepoint npc_attitude\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#delete-globalpoint-deleteglobalpoint","title":"Delete Globalpoint: <code>deleteglobalpoint</code>","text":"<p>persistent, static</p> <p>Removes the specified category from the global points list.</p> <pre><code>deleteBonus: \"deleteglobalpoint bonus\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#door-door","title":"Door: <code>door</code>","text":"<p>persistent, static</p> <p>This event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in <code>lever</code> event above.</p> <p>Example</p> <pre><code>door 100;200;300;world off\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#drop-item-drop","title":"Drop Item: <code>drop</code>","text":"<p>static</p> <p>Drops the defined items at a defined location. The event takes two parameters: <code>items</code> and <code>location</code>. Items is a list of items to be dropped. Every item can optionally be followed by a colon to define an amount <code>&lt;item&gt;:&lt;amount&gt;</code> otherwise the amount is 1. The optional location defines where the items will be dropped. It must be specified in the unified location format. If no location is given then the items will be dropped at the player's current location.</p> <p>If the drop event is used in a schedule then the items will be dropped at the given location. If no location is given then the items will be dropped for every player at their respective locations.</p> <pre><code>drop items:magical_sword location:200;17;300;world\ndrop items:loot_rare,loot_common:3\ndrop items:myItem location:%objective.MyQuestVariables.DropLocation%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#remove-potion-effect-deleffect","title":"Remove Potion Effect: <code>deleffect</code>","text":"<p>Removes the specified potion effects from the player. Use <code>any</code> instead of a list of types to remove all potion effects from the player. Alternatively to <code>any</code>, you just can leave it blank.</p> <p>Example</p> <pre><code>deleffect ABSORPTION,BLINDNESS\ndeleffect any\ndeleffect\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#potion-effect-effect","title":"Potion Effect: <code>effect</code>","text":"<p>Adds a specified potion effect to player. First argument is potion type. You can find all available types here. Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter <code>ambient</code> to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter <code>hidden</code>. To hide the icon for the effect add <code>noicon</code>.</p> <p>Example</p> <pre><code>effect BLINDNESS 30 1 ambient icon\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#give-experience-experience","title":"Give experience: <code>experience</code>","text":"<p>This event allows you to manipulate player's experience. First you specify a number as the amount, then the modification action. You can use <code>action:addExperience</code>, <code>action:addLevel</code>, <code>action:setExperienceBar</code> and <code>action:setLevel</code> as modification types.</p> <p>To use this correctly, you need to understand this:</p> <ul> <li>A player has experience points.</li> <li>Experience levels, shown are shown as a number in the experience bar. Every level requires more experience points than the previous.  </li> <li>The experience bar itself shows the percentage of the experience points needed to reach the next level.</li> </ul> <p>While <code>action:addExperience</code> only adds experience points, <code>action:addLevel</code> adds a level and keeps the current percentage. <code>action:setExperienceBar</code> sets the progress of the bar. Decimal values between <code>0</code> and <code>1</code> represent the fill level. This changes the underlying experience points, it's not just a visual change. <code>action:setLevel</code> sets only the level, expect if you specify a decimal number, then the experience bar will be set to the specified percentage.</p> Example<pre><code>add15XP: \"experience 15 action:addExperience\"\nadd4andAHalfLevel: \"experience 4.5 action:addLevel\"\nremove2Level: \"experience -2 action:addLevel\"\nsetXPBar: \"experience 0.5 action:setExperienceBar\"\nresetLevel: \"experience 0.01 action:setLevel\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#explosion-explosion","title":"Explosion: <code>explosion</code>","text":"<p>persistent, static</p> <p>Creates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast's fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4<sup>th</sup> attribute) there is location.</p> <p>Example</p> <pre><code>explosion 0 1 4 100;64;-100;survival\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#run-multiple-events-folder","title":"Run multiple events: <code>folder</code>","text":"<p>persistent, static</p> <p>This event wraps multiple events inside itself. Once triggered, it simply executes it's events. This is usefully to easily refer to a bunch of events at once, e.g. in a conversation.</p> <p>Events marked as persistent will be fired even after the player logs out. Beware though, all conditions are false when the player is offline (even inverted ones), so those events should not be blocked by any conditions! You can use the <code>cancelOnLogout</code> argument to stop the folder executing any remaining events if the player disconnects.</p> Parameter Syntax Default Value Explanation events to run eventName1,event2 One or multiple events to run. Contains event names seperated by commas. delay Keyword without delay The delay before the folder starts executing it's events. period period:number without delay The time between each event of the folder. time unit Keyword Seconds The unit of time to use for delay and period. Either <code>ticks</code> or <code>minutes</code>. Omit to use seconds. random random:number Disabled Enables \"random mode\". Will randomly pick the defined amount of events . cancelOnLogout Keyword Disabled If enabled, the folder will stop executing events if the player disconnects. cancelConditions cancelConditions:cond1,cond2 Disabled If enabled, the folder will stop executing events if the conditions are true. Examples<pre><code>events:\n  simpleFolder: \"folder event1,event2,event3\" # (1)!\n  runEvents: \"folder event1,event2,event3 delay:5 period:1\" # (2)!\n  troll: \"folder killPlayer,banPlayer,kickPlayer delay:5 random:1\" # (3)!\n  wait: \"folder messagePlayer,giveReward delay:1 minutes\" # (4)!\n</code></pre> <ol> <li>Runs all events after one tick with a delay of one tick between each event.</li> <li>Runs <code>event1</code> after an initial delay of 5 seconds, then waits one second before executing each leftover event.</li> <li>Randomly executes one of the three events after 5 seconds.</li> <li>Executes the events after one minute.</li> </ol>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#if-else-through-a-list-of-events-first","title":"If-else through a list of events: <code>first</code>","text":"<p>This event wraps multiple events inside itself, similar <code>folder</code>. Unlike <code>folder</code>, it attempts to execute each event, starting from the first onward. Once it successfully executes one event, it stops executing the rest. This is useful for collapsing long if-else chains into single events.</p> <p>This event is especially powerful when it is used in conjunction with the <code>condition:</code> keyword, which can be used with any event.</p> Example<pre><code>events: # (1)!\n  firstExample: \"first event1,event2,event3\"\n  event1: \"point carry boxes 10 action:add condition:firstCondition\"\n  event2: \"point carry boxes 20 action:add condition:secondCondition\"\n  event3: \"point carry boxes 40 action:add condition:thirdCondition\"\n</code></pre> <ol> <li>If firstCondition is false, secondCondition is true, and thirdCondition is true, event2 is the only event that will    be run.</li> </ol> Equivalent using if-else<pre><code>events:\n  firstExample: \"if firstCondition event1 else firstExample2\"\n  firstExample2: \"if secondCondition event2 else firstExample3\"\n  firstExample3: \"if thirdCondition event3\"\n  event1: \"point carry boxes 10 action:add\"\n  event2: \"point carry boxes 20 action:add\"\n  event3: \"point carry boxes 40 action:add\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#give-items-give","title":"Give Items: <code>give</code>","text":"<p>Gives the player predefined items. They are specified exactly as in <code>item</code> condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify <code>notify</code> keyword to display a simple message to the player about receiving items. The optional <code>backpack</code> argument forces quest items to be placed in the backpack.</p> <p>Example</p> <pre><code>give emerald:5,emerald_block:9\ngive important_sign notify backpack\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#give-journal-givejournal","title":"Give journal: <code>givejournal</code>","text":"<p>This event simply gives the player his journal. It acts the same way as /j command would.</p> <p>Example</p> <pre><code>givejournal\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#global-point-globalpoint","title":"Global point: <code>globalpoint</code>","text":"<p>persistent, static</p> <p>This works the same way as the normal point event but instead to manipulating the points for a category of a specific  player it manipulates points in a global category. These global categories are player independent, so you could for  example add a point to such a global category every time a player does a quest and give some special rewards for  the 100<sup>th</sup> player who does the quest.</p> <p>Example</p> <pre><code>globalpoint global_knownusers 1 action:add\nglobalpoint daily_login 0 action:set\nglobalpoint reputaion 2 action:multiply\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#global-tag-globaltag","title":"Global tag: <code>globaltag</code>","text":"<p>persistent, static</p> <p>Works the same way as a normal tag event, but instead of setting a tag for one player it sets it globally for all players.</p> <p>Example</p> <pre><code>globaltag add global_areNPCsAgressive\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#hunger-hunger","title":"Hunger: <code>hunger</code>","text":"<p>This event changes the food level of the player. The second argument is the modification type. There are <code>give</code>, <code>take</code> and <code>set</code>. The second argument is the amount. With <code>set</code> can the food level be anything. If <code>give</code> or <code>take</code> is specified the final amount won't be more than 20 or less than 0. If the hunger level is below 7, the player cannot sprint.</p> <p>Example</p> <pre><code>hunger set 20\nhunger give 5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#if-else-if","title":"If else: <code>if</code>","text":"<p>persistent, static</p> <p>This event will check a condition, and based on the outcome it will run the first or second event. The instruction  string is <code>if condition event1 else event2</code>, where <code>condition</code> is a condition ID and <code>event1</code> and <code>event2</code> are event IDs.  <code>else</code> keyword is mandatory between events for no practical reason. Keep in mind that this event is <code>persistent</code>   and <code>static</code> but probably the condition or the events are not.</p> <p>Example</p> <pre><code>if sun rain else sun\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#item-durability-itemdurability","title":"Item durability: <code>itemdurability</code>","text":"<p>Adds or removes durability from an item in the slot. The first argument is the slot, the second the change of durability and the third the amount. Optional arguments are <code>ignoreUnbreakable</code> to ignore the unbreakable flag and unbreaking enchantment and <code>ignoreEvents</code> to bypass event logic, so other plugins will not be able to interfere. Available slot types: <code>HAND</code>, <code>OFF_HAND</code>, <code>HEAD</code>, <code>CHEST</code>, <code>LEGS</code>, <code>FEET</code>.</p> <p>Info</p> <p>Both increasing and decreasing durability will be affected by the unbreaking enchantment. To prevent this behaviour use the <code>ignoreUnbreakable</code> argument.</p> <p>Example</p> <pre><code>itemdurability HAND ADD 1\nitemdurability CHEST SUBTRACT %randomnumber.whole.15~30% ignoreUnbreakable ignoreEvents\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#journal-journal","title":"Journal: <code>journal</code>","text":"<p>static</p> <p>Adds or deletes an entry to/from a player's journal. Journal entries have to be defined in the <code>journal</code> section. The first argument is the action to perform, the second one is the name of the entry if required. Changing journal entries will also reload the journal.</p> <p>Possible actions are: - <code>add</code>: Adds a page to the journal. - <code>delete</code>: Deletes a page from the journal. - <code>update</code>: Refreshes the journal. This is especially useful when you need to update the main page.</p> <p>Example</p> <pre><code>journal add quest_started\njournal delete quest_available\njournal update\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#kill-kill","title":"Kill: <code>kill</code>","text":"<p>Kills the player. Nothing else.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#language-event-language","title":"Language Event: <code>language</code>","text":"<p>persistent</p> <p>This event changes player's language to the specified one. There is only one argument, the language name.</p> <p>Example</p> <pre><code>language en\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#lever-lever","title":"Lever: <code>lever</code>","text":"<p>persistent, static</p> <p>This event can switch a lever. The first argument is a location and the second one is state: <code>on</code>, <code>off</code> or <code>toggle</code>.</p> <p>Example</p> <pre><code>lever 100;200;300;world toggle\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#lightning-lightning","title":"Lightning: <code>lightning</code>","text":"<p>static</p> <p>Strikes a lightning at given location. The first argument is the location. By adding <code>noDamage</code> the lightning is only an effect and therefor does no damage.</p> Examples<pre><code>events:\n  strikeLightning: lightning 100;64;-100;survival\n  showEntrance: lightning 200;65;100;survival noDamage\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#sending-notifications-notify","title":"Sending Notifications: <code>notify</code>","text":"<p>You can send notifications using the <code>notify</code> event. This is how to use it:</p> <p>Warning</p> <p>All colons (<code>:</code>) in the message part of the notification need to be escaped, including those inside variables. One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>). You also need to escape the backslash itself, if you use double quotes for some things like <code>\\n</code>.</p> <p>Examples: <code>eventName: notify Peter:Heya %player%!</code> <code>eventName: notify Peter\\:Heya %player%!</code> <code>eventName: 'notify Peter:Heya %player%!'</code> <code>eventName: 'notify Peter\\:Heya %player%!'</code> <code>eventName: \"notify Peter:Heya %player%!\"</code> <code>eventName: \"notify Peter\\\\:Heya %player%!\"</code> <code>otherEvent: notify You own %math.calc:5% fish!</code> <code>otherEvent: You own %math.calc\\:5% fish!</code> <code>newLine: \"notify Some multiline \\n message\"</code> <code>newLine: \"notify Some multiline \\\\n message\"</code></p> Parameter Syntax Default Value Explanation message Any text with spaces! The message that will be displayed. Supports variables and translations. Must be first category <code>category:info</code> None Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. io <code>io:bossbar</code> io:chat Any NotifyIO Overrides the \"category\". settings. any io specific settings <code>setting:value</code> None Some notifyIO's provide specific settings. Can be used multiple times. Overrides the \"category\" settings."},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#usage-examples","title":"Usage Examples","text":"<p>Check out the notify IO specific options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend. Advanced users may also use Notify Categories to make their lives easier. <pre><code>#The simplest of all notify events. Just a chat message:\ncustomEvent: \"notify Hello %player%!\"  \n\n#It's the same as this one since 'chat' is the default IO.\ntheSame: \"notify Hello %player%! io:chat\"\n\n#This one displays a title and a subtitle:\nmyTitle: \"notify This is a title.\\\\nThis is a subtitle. io:title\"\n\n#Plays a sound:\nmySound: \"notify io:sound sound:x.y.z\"\n\n#This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option:\nmyBar: \"notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use\"\n\n#Some events with categories.\nmyEvent1: \"notify This is a custom message! category:info\"\nmyEvent2: \"notify This is a custom message! category:firstChoice,secondChoice\"\n\n#You can also override category settings:\nmyEvent3: \"notify Another message! category:info io:advancement frame:challenge\"\n\n#Use multiple languages:\nmultilanguage: \"notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!\"\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#translations","title":"Translations","text":"<p>Notifications can be translated with this syntax:  <pre><code>example: \"notify {en} ABC {de} DEF\"\n</code></pre> The value in <code>{}</code> is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see <code>ABC</code> and german ones would see <code>DEF</code>.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#broadcasts","title":"Broadcasts","text":"<p>persistent, static</p> <p>You can broadcast notifications to all players on the server using the <code>notifyall</code> event. It works just like the notify event. Variables are resolved for each online player, not for the player the event is executed for.</p> Example<pre><code>events:\n  announceDungeon: \"notifyall A new dungeon has opened!\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#log-message-to-console-log","title":"Log message to console: <code>log</code>","text":"<p>persistent, static </p> <p>Prints a provided message to the server log. Any variables used in the message will be resolved.  Note that when used in static context (by schedules) replacing player dependent variables won't work as the event is player independent.</p> Parameter Syntax Default Value Explanation level <code>level:logLevel</code> <code>INFO</code> Optionally the log level can be specified but only before the message. There are 4 levels: <code>debug</code>, <code>info</code>, <code>warning</code> and <code>error</code> Example<pre><code>  events:\n    logPlayer: \"log %player% completed first quest.\"\n    debug: \"log level:DEBUG daily quests have been reset\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#npc-teleport-npcteleport","title":"NPC Teleport: <code>npcteleport</code>","text":"<p>persistent, static</p> <p>This event will teleport the Npc to the given location.</p> Parameter Syntax Default Value Explanation Npc Npc The ID of the Npc Location Unified Location Formatting The location to which the Npc will be teleported Spawn Keyword (<code>spawn</code>) Disabled If the NPC should be spawned if not in the world Example<pre><code>teleportToSpawn: npcteleport mayorHans 100;200;300;world\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#objective-objective","title":"Objective: <code>objective</code>","text":"<p>persistent, static</p> <p>Adds, removes or completes the specified objective(s). </p> Parameter Syntax Default Value Explanation action Keyword: <code>add</code>,<code>remove</code>,<code>complete</code> The action to do with the objective(s). objective(s) <code>objectiveName</code> or <code>obj1,obj2</code> The objective(s) to run the action on. <p>Using this in static contexts only works when removing objectives!</p> <pre><code>events:\n  startQuest: \"objective add killTheDragon,goToDungeon\"\n  progressQuest: \"objective complete killTheDragon\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#opsudo-opsudo","title":"OPsudo: <code>opsudo</code>","text":"<p>This event is similar to the <code>sudo</code> event, the only difference is that it will fire a command as the player with temporary OP permissions.  Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>. Variables are supported.</p> <p>Looking for run as normal player? Looking for console commands?</p> <p>Example</p> <pre><code>opsudo spawn\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#party-event-party","title":"Party event: <code>party</code>","text":"<p>This is part of the party system. Runs the specified list of events (third argument) for every player in the party. The last optional argument <code>amount</code> specifies a maximum number of players to select. Selected players will be picked from the party if they are in range and meet the conditions. Players are selected according to their distance from the player who triggered the event. For example, if the 'amount' is two, the player who triggered the event and the player closest to that player will be selected. A negative amount will select all players and therefore act as if there was no amount given.</p> <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 give_reward\nparty 10 has_tag1,!has_tag2 give_special_reward amount:3\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#pick-random-pickrandom","title":"Pick random: <code>pickrandom</code>","text":"<p>persistent, static</p> <p>Another container for events. It picks one (or multiple) of the given events and runs it. You must specify how likely it is that each event is picked by adding the percentage before the event's id.  The event won't break if your total percentages are above 100%. </p> <p>It picks one event from the list by default, but you can add an optional <code>amount:</code> if you want more to be picked. Note that only as many events as specified can be picked and <code>amount:0</code> will do nothing.</p> <p>There must be two <code>%%</code> before the event's name if variables are used, one is from the variable and the other one from the event's syntax.</p> <p>Example</p> <pre><code>pickrandom 20.5%event1,0.5%event2,79%event3 amount:2\npickrandom %point.factionXP.amount%%event1,0.5%event2,79%event3,1%event4 amount:3\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#point-point","title":"Point: <code>point</code>","text":"<p>persistent</p> <p>This event allows you to manipulate player's points in a specified category. First you can specify a number of points,  then the modification action. For that, you can use <code>action:add</code>, <code>action:subtract</code>, <code>action:set</code> and <code>action:multiply</code>  as modification types. This event also supports an optional <code>notify</code> argument that will display information about the  change using the notification system.</p> Example<pre><code>gainAttitude: \"point npc_attitude 5 action:add\"\nloseAttitude: \"point npc_attitude 2 action:subtract\"\nresetCombo: \"point combo 0 action:set\"\nboostPoints: \"point points 1.25 action:multiply notify\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#remove-entity-removeentity","title":"Remove entity: <code>removeentity</code>","text":"<p>persistent, static</p> <p>Removes or kill all entities (mobs) of given type at the location. Here you can look up all type's of entity's.</p> <p>Can only effect loaded entities!</p> Parameter Syntax Default Value Explanation entity(s) <code>entity,entity</code> Required. List of entity's (separated by <code>,</code>). location Unified Location Formatting Required. The center location of the target entity's. radius Number Required. The radius around the location. Can be a variable. name <code>name:name</code> Name of the entity. All <code>_</code> will be replaced with spaces. marked <code>marked:mark</code> Mark of the entity (from the spawn event for example). Can be a variable. kill <code>kill</code> Whether to remove or actually kill the entity (if possible). Example<pre><code>killArenaMobs: \"removeentity ZOMBIE 100;200;300;world 10 name:Monster kill\"\nclearGameArea: \"removeentity ARROW,SNOWBALL,WOLF,ARMOR_STAND 100;200;300;world 50 marked:minigame\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#run-events-run","title":"Run events: <code>run</code>","text":"<p>persistent, static</p> <p>This event allows you to specify multiple instructions in one, long instruction. Each instruction must be started with the <code>^</code> character (it divides all the instructions). It's not the same as the <code>folder</code> event, because you have to specify the actual instruction, not an event name. Don't use conditions here, it behaves strangely.</p> <p>Example</p> <pre><code>run ^tag add beton ^give emerald:5 ^entry add beton ^kill\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#run-events-for-all-online-players-runforall","title":"Run events for all online players: <code>runForAll</code>","text":"<p>persistent, static </p> <p>Runs the specified event (or list of events) once for each player on the server.  </p> <p>The most common use case is to run an event for all online players from a schedule. But you can also use it in conversations, objectives or other events.</p> <p>To run the events only for a selection of players, use the <code>where:</code> option to filter for players that meet specific conditions.</p> Parameter Syntax Default Value Explanation events <code>events:events</code> Required. The events to be run, separated by <code>,</code>. where <code>where:conditions</code> A list of optional conditions (separated by <code>,</code>) that are checked for every player. The events supplied in <code>events:</code> are only executed for the players that meet all the given conditions. Example<pre><code>events:\n    kickAll: \"runForAll where:!isOp events:kickPlayer,restartQuest\"\n</code></pre> <p>Warning</p> <p>You can still append conditions to the <code>runForAll</code> event (e.g. <code>runForAll events:kickPlayer conditions:!isOp</code>). This won't check the conditions for each player! Instead it will check the conditions for the player that triggered the event or check them player independent if triggered player independent (e.g. by a schedule).</p>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#run-events-player-independent-runindependent","title":"Run events player independent: <code>runIndependent</code>","text":"<p>persistent, static </p> <p>Runs the specified event (or list of events) player independent (as if it was run from a schedule).  </p> <p>This is usefully for events that behave differently when run player independent.</p> Events that behave different if run player independent <ul> <li><code>tag delete</code> - deletes the tag for all players in the database (even if offline)</li> <li><code>objective remove</code> - removes the objective for all players in the database (even if offline)</li> <li><code>journal delete</code> - deletes the journal entry for all players in the database (even if offline)</li> <li><code>deletepoint</code> - clears points of a given category for all players in the database (even if offline)</li> </ul> Parameter Syntax Default Value Explanation events <code>events:events</code> Required. The events to be run, separated by <code>,</code>. Example<pre><code>events:\n    resetQuestForAll: \"runIndependent events:removeObjective,clearTags,resetJournal\"\n</code></pre> <p>Warning</p> <p>There are a lot of events and conditions that cannot be run (or checked) player independent. If you try to run such an event player independent (or check such a condition) this won't work,  and you will get an error message in the console.</p> <p>For more information on player independent events check this.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#scoreboard-score","title":"Scoreboard: <code>score</code>","text":"<p>persistent</p> <p>This event works in the same way as point, the only difference being that it uses scoreboards instead of  points. You can use <code>action:add</code>, <code>action:subtract</code>, <code>action:set</code> and <code>action:multiply</code> to change the value. It's only possible to change the value, you have to create the scoreboard target first.</p> Example<pre><code>gotKill: \"score kill 1 action:add\"\ngotKilled: \"score kill 1 action:subtract\"\nresetKill: \"score kill 0 action:set\"\napplyBonus: \"score kill 1.2 action:multiply\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#scoreboard-tag-scoretag","title":"Scoreboard Tag: <code>scoretag</code>","text":"<p>This scoreboard event adds or remove the scoreboard tag from a player. The kind of tags that are used by vanilla Minecraft and not the betonquest tags.</p> Parameter Syntax Default Value Explanation modifier <code>add</code> or <code>remove</code> Whether to add or remove the tag. scoreboard tag Tag name The name of the scoreboard tag. Example<pre><code>addVanillaTag: \"scoretag add vanilla_tag\"\nremoveVanillaTag: \"scoretag remove vanilla_tag\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#set-block-setblock","title":"Set Block: <code>setblock</code>","text":"<p>persistent, static</p> <p>Changes the block at the given position. The first argument is a Block Selector, the second a location. It's possible to  deactivate the physics of the block by adding <code>ignorePhysics</code> at the end. Very powerful if used to trigger redstone contraptions.</p> <p>Example</p> <pre><code>setblock REDSTONE_BLOCK 100;200;300;world\nsetblock SAND 100;200;300;world ignorePhysics\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#modify-stage-stage","title":"Modify Stage: <code>stage</code>","text":"<p>You can <code>set</code>, <code>increase</code> or <code>decrease</code> the player's stage. The objective will not automatically complete when using <code>set</code>. By increasing it the player will be able to complete the objective. When increasing or decreasing the stage you can optionally specify an amount to increase or decrease by. When decreasing the objective it will do nothing when the first stage is reached. When the conditions of the stage objective are not met, the stage of the player can not be modified. For more take a look at the stage objective.</p> Parameter Syntax Default Value Explanation stage objective Objective The name of the stage objective action <code>set</code>, <code>increase</code> or <code>decrease</code> The action to perform stage Stage The name of the stage to set when <code>set</code> is used amount Number 1 The amount to increase or decrease by Example<pre><code>events:\n  setCookCookies: \"stage bakeCookies set cookCookies\"\n  increase: \"stage bakeCookies increase\"\n  decrease2: \"stage bakeCookies decrease 2\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#spawn-mob-spawn","title":"Spawn Mob: <code>spawn</code>","text":"<p>persistent, static</p> <p>Spawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob. The last, third argument is integer for amount of mobs to be spawned. You can also specify <code>name:</code> argument, followed by the name of the mob. All <code>_</code> characters will be replaced with spaces. You can also mark the spawned mob with a keyword using <code>marked:</code> argument supporting variables. It won't show anywhere, and you can check for only marked mobs in <code>mobkill</code> objective.</p> <p>You can specify armor which the mob will wear and items it will hold with <code>h:</code> (helmet), <code>c:</code> (chestplate), <code>l:</code> (leggings), <code>b:</code> (boots), <code>m:</code> (main hand) and <code>o:</code> (off hand) optional arguments. These take a single item without amount, as defined in the items section. You can also add a list of drops with <code>drops:</code> argument, followed by a list of items with amounts after colons, separated by commas.</p> <p>Example</p> <pre><code>spawn 100;200;300;world SKELETON 5 marked:targets\n</code></pre> <p>Example</p> <pre><code>spawn 100;200;300;world ZOMBIE name:Bolec 1 h:blue_hat c:red_vest drops:emerald:10,bread:2\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#sudo-sudo","title":"Sudo: <code>sudo</code>","text":"<p>This event is similar to <code>command</code> event, the only difference is that it will fire a command as the player (often referred to as player commands). Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>. Variables are supported.</p> <p>Looking for run as op? Looking for console commands?</p> <p>Example</p> <pre><code>sudo spawn\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#tag-tag","title":"Tag: <code>tag</code>","text":"<p>persistent, static</p> <p>This event adds a tag to or deletes a tag from the player. The first argument after event's name must be <code>add</code> or <code>delete</code>. Next goes the tag name. It can't contain spaces (though <code>_</code> is fine). Multiple tags can be added and deleted separated by commas (without spaces).</p> <p>Example</p> <pre><code>tag add quest_started,new_entry\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#take-items-take","title":"Take Items: <code>take</code>","text":"<p>Removes items from the player\u2019s inventory, armor slots or backpack. The items itself must be defined in the <code>items</code> section, optionally with an amount after a colon. Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code>, <code>Offhand</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined.</p> <p>Note: If the items aren't quest items don't use <code>take</code>event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on the NPC\u2019s reaction!</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p> <p>Example</p> <pre><code>take emerald:120,sword\ntake nugget:6 notify\ntake wand notify invOrder:Backpack\ntake money:50 invOrder:Backpack,Inventory\ntake armor invOrder:Armor,Offhand,Inventory,Backpack\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#time-time","title":"Time: <code>time</code>","text":"<p>persistent, static</p> <p>Changes the time of the world. The time is represented in 24 hours format as a float number, so 0 is midnight, 12 is  noon and 23 is 11 PM. For minutes, you can use floating point numbers, so 0.5 is half past midnight, 0.25 is quarter  past midnight and so on. (0.1 hours is 6 minutes). It's possible to add or subtract time by using <code>+</code> or <code>-</code> prefix or  to set the time by setting no prefix. Additionally, you can specify the world in which the time will be changed, by adding <code>world:</code>. Using the <code>ticks</code> argument changes the time like the vanilla command.</p> <p>Example</p> <pre><code>time 6\ntime +0.1\ntime -12 world:rpgworld\ntime +%randomnumber.whole.100~2000% world:pvpworld ticks\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#teleport-teleport","title":"Teleport: <code>teleport</code>","text":"<p>Teleports the player to the specified location.  Ends any active conversations. </p> <p>Do you only want to cancel the conversation?</p> Parameter Syntax Default Value Explanation location Unified Location Formatting The location to which the player will be teleported. Example<pre><code>events:\n  toCity: \"teleport 432;121;532;world\" # (1)!\n  toHell: \"teleport 123;32;-789;world_the_nether;180;45\" # (2)!\n</code></pre> <ol> <li>Teleports the player to X: 432, Y: 121, Z: 532 in the world named 'world'.</li> <li>Teleports the player to X: 123, Y: 32, Z: -789 in the world named 'world_the_nether'. Also sets the head rotation to yaw 180 and pitch 45.</li> </ol>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>This event has only one purpose: Change values that are stored in <code>variable</code> objective variables. The first argument is the ID of the <code>variable</code> objective. The second argument is the name of the variable to set. The third argument is the value to set. Both the name and value can use <code>%...%</code> variables. To delete a variable you can use <code>\"\"</code>. To store more complex values you can use quoting. Refer to the <code>variable</code> objective documentation for more information about storing variables. This event will do nothing if the player does not already have a <code>variable</code> objective assigned to them.</p> <p>Example</p> <pre><code>variable CustomVariable MyFirstVariable Goodbye!\nvariable variable_objectiveID name %player%\nvariable other_var_obj desc \"\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#move-the-player-velocity","title":"Move the player: <code>velocity</code>","text":"Parameter Syntax Default Value Explanation vector <code>vector:(x;y;z)</code> The values of the vector, which are decimal numbers, can be interpreted as absolute numbers like the coordinate or as relative directions. For more understanding the relative direction is similar to <code>^ ^ ^</code> in minecraft or in other words <code>(sideways;upwards;forwards)</code>. Can be a variable. direction <code>direction:directionType</code> <code>absolute</code> There are 3 types how the vector can get applied to the player: <code>absolute</code> won't change the vector at all. <code>relative</code> will redirect the vector to the view of the player. <code>relative_y</code> is a mix between absolute and relative. It will still direct to the view but only horizontally, so y will be absolute. modification <code>modification:modificationType</code> <code>set</code> Possible modifications are <code>set</code> and <code>add</code>. The modification type determines how the vector should be merged with the player's velocity. The player's velocity is the external force applied on the player. Visual Explanation <p>In contrast to their global counterparts, relative x,y,z axes do not change their orientation relative to the player. Example: The positive x-axis will always point left from the perspective of the player.  </p> Example<pre><code>events:\n  jumppad: \"velocity vector:(2;0.8;4)\"\n  dash: \"velocity vector:(0;0.1;1.3) direction:relative_y\"\n  variable_dash: \"velocity vector:%objective.customVariable.dashLength% direction:relative_y\"\n  fly: \"velocity vector:(0;0.1;2) direction:relative modification:add\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Events-List/#weather-weather","title":"Weather: <code>weather</code>","text":"<p>persistent, static </p> <p>Sets the weather in the world the player is currently in. The argument is <code>sun</code> for clear, sunny weather, <code>rain</code> for pure rain, <code>storm</code> for storm with rain, lightning and thunder. Durations less than 1 is equal to no duration.</p> Parameter Syntax Default Value Explanation type Keyword The type of weather to set. Either <code>sun</code>, <code>rain</code> or <code>storm</code>. duration <code>duration:number</code> Minecraft decides randomly. The duration the weather will last (in seconds). Can be a variable. Is handled from minecraft afterwards. world <code>world:worldName</code> The player's current world. The world to change the weather in. Example<pre><code>events:\n  setSun: \"weather sun\"\n  setShortRain: \"weather rain duration:60 world:rpgworld\"\n  setStorm: \"weather storm duration:%point.tribute.left:150%\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/","title":"Integration List","text":"<p>This page contains documentation for known integrations that exist for third party plugins. Some integrations also have dedicated pages in the documentation. In total 38 plugins have dedicated support for BetonQuest.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#provided-by-betonquest","title":"Provided by BetonQuest","text":"<p>BetonQuest hooks into other plugins by itself to provide more events, conditions and objectives or other features. AuraSkills, Brewery, Citizens, DecentHolograms, Denizen, EffectLib, FakeBlock, Heroes, HolographicDisplays, JobsReborn, LuckPerms, Magic, mcMMO, MythicLib, MMOCore, MMOItems, MythicMobs, PlaceholderAPI, ProtocolLib, Quests, RedisChat, Shopkeepers, TrainCarts, ProSkillAPI, Skript, Vault, WorldEdit, FastAsyncWorldEdit and WorldGuard.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#provided-by-other-plugins","title":"Provided by other plugins","text":"<p>Some plugins also hook into BetonQuest and provide support by themselves: nuNPCDestinations, CalebCompass, Depenizen, NotQuests, HonnyCompass MythicDungeons JourneyBetonQuest</p> <p>There are also plugins that hook into BetonQuest that require a clientside mod: BetonQuestGUI, NGVexJournal</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#auraskills","title":"AuraSkills","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skill-level-auraskillslevel","title":"Skill level: <code>auraskillslevel</code>","text":"<p>Checks if the player has the specified skill level. The amount can be a variable or a number. The player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument, then the player must match the specified level exactly. <pre><code>auraskillslevel fighting 5\nauraskillslevel farming 10 equal\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#stat-level-auraskillsstatslevel","title":"Stat level: <code>auraskillsstatslevel</code>","text":"<p>Checks if the player has the specified stat level. The amount can be a variable or a number. The player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument, then the player must match the specified level exactly. <pre><code>auraskillsstatslevel luck 5\nauraskillsstatslevel luck 10 equal\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-skill-xp-auraskillsxp","title":"Give Skill Xp : <code>auraskillsxp</code>","text":"<p>Adds experience to the players skill. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>auraskillsxp farming 5\nauraskillsxp farming 10 level\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#brewery-breweryx","title":"Brewery &amp; BreweryX","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_1","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#drunk-drunk","title":"Drunk: <code>drunk</code>","text":"<p>This condition is true if the player is drunken. Only argument is the minimal drunkness (0-100).</p> <pre><code>drunk 50\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#drunk-quality-drunkquality","title":"Drunk Quality: <code>drunkquality</code>","text":"<p>This condition is true if the player has the given drunk quality. Only argument is the minimal drunk quality (1-10).</p> <pre><code>drunkquality 3\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#has-brew-hasbrew","title":"Has Brew: <code>hasbrew</code>","text":"<p>This condition is true if the player has the given brew with the specified amount in his inventory.</p> <pre><code>hasbrew 2 MY_BREW\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_1","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-brew-givebrew","title":"Give Brew: <code>givebrew</code>","text":"<p>Gives the player the specified drink. The first number is the amount, and the second number is the quality of the drink.</p> <pre><code>givebrew 1 10 MY_BREW\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#take-brew-takebrew","title":"Take Brew: <code>takebrew</code>","text":"<p>Removes the specified drink from the players inventory. An amount needs to be specified.</p> <pre><code>takebrew 2 MY_OTHER_BREW \n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#citizens","title":"Citizens","text":"<p>If you have this plugin you can use it's NPCs. I highly recommend you installing it, it's NPCs are way more immersive. Having Citizens also allows you to use NPCKill objective and to have moving NPC's in addition to the normal Npc functionality.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#npc-integration","title":"Npc Integration","text":"<p>Citizens supports all BetonQuest Npc Features.</p> <p>Also, the below listed Citizens specific additions are also used with the NpcId from the <code>npcs</code> section.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#npcs-section-npcs","title":"Npcs section: <code>npcs</code>","text":"<p>You simply use the Citizens NPC id as argument. To acquire the NPCs ID select the NPC using <code>/npc select</code>, then run <code>/npc id</code>.</p> <p>You can also get a NPC by its name with the <code>byName</code> argument. That is useful when you have many NPCs with the same name which should all start the same conversation or count together in the <code>npcinteract</code> and <code>npckill</code> objectives.</p> <p>Warning</p> <p>When more than one npc with that name exists, it will give an exception when used in like <code>npcteleport</code> events or <code>npcrange</code> objective.</p> Example<pre><code>npcs:\n  innkeeper: citizens 0\n  mayorHans: citizens 4\n  guard: citizens Guard byName\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#npc-hiding-hide_npcs","title":"Npc Hiding: <code>hide_npcs</code>","text":"<p>Required Dependency: ProtocolLib</p> <p>This feature can be activated by installing the ProtocolLib plugin.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_2","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#move-npc-npcmove","title":"Move Npc: <code>npcmove</code>","text":"<p>This event will make the NPC move to a specified location. It will not return on its own, so you have to set a single path point with /npc path command - it will then return to that point every time. If you make it move too far away, it will teleport or break, so beware. You can change maximum pathfinding range in Citizens configuration files.</p> <p>Move event can fail if the NPC is already moving for another player.</p> Parameter Syntax Default Value Explanation NpcID npcId The NpcId. Locations Locations The locations where the Npc will move to. block Keyword (<code>block</code>) Disabled Blocks the Npc so interaction won't start a conversation while it is moving. wait wait:number 0 Number of ticks the Npc will wait at its destination before firing events. done done:events Disabled List of events fired after reaching the destination. fail fail:events Disabled List of events fired if this event fails. Example<pre><code>movenpc innkeeper 100;200;300;world,105;200;280;world block wait:20 done:msg_were_here,give_reward fail:msg_cant_go,give_reward\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#stop-moving-npc-npcstop","title":"Stop moving Npc: <code>npcstop</code>","text":"<p>This will stop all current move tasks for the Npc.</p> Parameter Syntax Default Value Explanation NpcID npcId The NpcId. Example<pre><code>stopnpc guard\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#npc-kill-npckill","title":"Npc Kill: <code>npckill</code>","text":"<p>The Npc Kill objective requires the player to kill a Npc. </p> Parameter Syntax Default Value Explanation NpcID npcId The NpcId. amount amount:number 1 The time the Npc needs to be killed. notify notify Disabled Display a message to the player each time they kill a npc. Optionally with the notification interval after colon.  Variable Properties  Name Example Output Explanation amount 6 Shows the amount of times already killed the npc. left 4 Shows the amount of times still needed to kill the Npc for the objective to be completed. total 10 Shows the initial amount of times that the Npc needed to be killed. Example<pre><code>npckill thief amount:3 events:reward notify\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#denizen","title":"Denizen","text":"<p>Depenizen is also integrated with BetonQuest! Discover available features on the meta documentation.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_3","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#script-script","title":"Script: <code>script</code>","text":"<p>With this event you can fire Denizen task scripts. Don't confuse it with <code>skript</code> event, these are different. The first and only argument is the name of the script.</p> Example<pre><code>runDenizenScript: \"script beton\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#effectlib","title":"EffectLib","text":"<p>If you install this plugin on your server you will be able to play particle effects on NPCs and locations.  You can also use the <code>particle</code> event to trigger particle.</p> <p>Info</p> <p>EffectLib is not a normal plugin, it's a powerful developer tool - there are no official docs. However, the Magic plugin has a wiki for EffectLib. It does contain a few magic specific settings though so please don't be confused if some stuff does not work. There is also a magic editor with autocompletion for EffectLib.</p> Example<pre><code>effectlib: #(1)!\n   farmer: #(2)!\n      class: VortexEffect #(3)!\n      iterations: 20 #(4)!\n      particle: crit_magic \n      helixes: 3\n      circles: 1\n      grow: 0.1\n      radius: 0.5\n      pitch: -60 #(9)!\n      yaw: 90 #(10)!\n      interval: 30 #(8)!\n      checkinterval: 80 #(11)!\n      npcs: #(5)!\n         - 1 \n      locations: #(6)!\n         - 171;72;-127;world\n      conditions: #(7)!\n         - '!con_tag_started'\n         - '!con_tag_finished'\n</code></pre> <ol> <li>All effects need to be defined in this section.</li> <li>Each effect is defined as a separate subsection. You can choose any name for it.</li> <li>Any EffectLib effect class.</li> <li>This and all following options until <code>interval</code> are EffectLib parameters. You can find them in the 3<sup>rd</sup> party documentation linked above.</li> <li>A list of all NPCs on which this effect is displayed. This section is optional.</li> <li>A list of all locations on wich the effect is displayed. Optional.</li> <li>The conditions that must be true so that the player can see this effect.</li> <li>Controls after how many ticks the effect is restarted. Optional, default: 100 ticks</li> <li>Controls the vertical direction of the effect.</li> <li>Controls the horizontal direction of the effect.</li> <li>Controls how often the conditions should be checked (in ticks). Optional, default: 100 ticks</li> </ol>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_4","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#particle-particle","title":"Particle: <code>particle</code>","text":"<p>This event will load an effect defined in <code>effects</code> section and display it on player's location. The only argument is the name of the effect. You can optionally add <code>loc:</code> argument followed by a location written like <code>100;200;300;world;180;-90</code> to put it on that location. If you add <code>private</code> argument the effect will only be displayed to the player for which you ran the event.</p> <p>Example</p> <p><pre><code>effects:\n  beton:\n    class: HelixEffect\n    iterations: 100\n    particle: smoke\n    helixes: 5\n    circles: 20\n    grow: 3\n    radius: 30\n</code></pre> <pre><code>events:\n  playEffect: particle beton loc:100;200;300;world;180;-90 private\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#fakeblock","title":"FakeBlock","text":"<p>If you have the FakeBlock integration installed, you will be able to view and hide the block groups  created in FakeBlock on a player-specific basis.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_5","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#show-and-hide-block-groups-fakeblock","title":"Show and hide block groups: <code>fakeblock</code>","text":"<p>Shows or hides the block group for the player. The block group can be specified as a comma-separated list.  The groups are case-sensitive. To show a group the <code>showgroup</code> argument is required. To hide a group the <code>hidegroup</code> argument is required.</p> <pre><code>events:\n  showBridge: \"fakeblock showgroup bridge\"\n  hideCityBorder: \"fakeblock hidegroup gate,wall,door\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#heroes","title":"Heroes","text":"<p>When you install Heroes, all kills done via this plugin's skills will be counted in MobKill objectives.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_2","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#heroes-class-heroesclass","title":"Heroes Class: <code>heroesclass</code>","text":"<p>This condition checks the classes of the player. The first argument must be <code>primary</code>, <code>secondary</code> or <code>mastered</code>. Second is the name of a class or <code>any</code>. You can optionally specify <code>level:</code> argument followed by the required level of the player.</p> <p>Example</p> <pre><code>heroesclass mastered warrior\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#heroes-attribute-heroesattribute","title":"Heroes Attribute: <code>heroesattribute</code>","text":"<p>This condition check's the level of a player's attribute. The first argument must be <code>strength</code>, <code>constitution</code>, <code>endurance</code>, <code>dexterity</code>, <code>intellect</code>, <code>wisdom</code>, or <code>charisma</code>. Second argument is the required level of the attribute. Must be greater than or equal the specified number.</p> <p>Example</p> <pre><code>heroesattribute strength 5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skill-heroesskill","title":"Skill: <code>heroesskill</code>","text":"<p>This condition checks if the player can use specified skill. The first argument is the name of the skill.</p> <p>Example</p> <pre><code>heroesskill charge\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_6","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#heroes-experience-heroesexp","title":"Heroes experience: <code>heroesexp</code>","text":"<p>This event simply gives the player specified amount of Heroes experience. The first argument is either <code>primary</code> or <code>secondary</code> and it means player's class. Second one is the amount of experience to add.</p> <p>Example</p> <pre><code>heroesexp primary 1000\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#jobsreborn","title":"JobsReborn","text":"<p>Requires adding the following to config.yml: <pre><code>hook:\n  jobs: 'true'\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_3","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#can-level-up-nujobs_canlevel-jobname","title":"Can Level up: <code>nujobs_canlevel {jobname}</code>","text":"<p>Returns true if the player can level up</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#has-job-nujobs_hasjob-jobname","title":"Has Job: <code>nujobs_hasjob {jobname}</code>","text":"<p>Returns true if the player has this job</p> <p>Example</p> <pre><code>nujobs_hasjob Woodcutter\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#job-full-nujobs_jobfull-jobname","title":"Job Full: <code>nujobs_jobfull {jobname}</code>","text":"<p>Returns true if the job is at the maximum slots</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#job-level-nujobs_joblevel-jobname-min-max","title":"Job Level: <code>nujobs_joblevel {jobname} {min} {max}</code>","text":"<p>Returns true if the player has this job, and at a level equal to or between the min/max</p> <p>Example</p> <pre><code>nujobs_joblevel Woodcutter 5 10\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_7","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#add-jobs-experience-nujobs_addexp-jobname-exp","title":"Add Jobs Experience: <code>nujobs_addexp {jobname} {exp}</code>","text":"<p>Gives the player experience</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#increase-jobs-level-nujobs_addlevel-jobname-amount","title":"Increase Jobs Level: <code>nujobs_addlevel {jobname} {amount}</code>","text":"<p>Increases the player level by amount.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#decrease-jobs-level-nujobs_dellevel-jobname-amount","title":"Decrease Jobs Level: <code>nujobs_dellevel {jobname} {amount}</code>","text":"<p>Decreases the players level by amount.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#join-jobs-job-event-nujobs_joinjob-jobname","title":"Join Jobs Job Event: <code>nujobs_joinjob {jobname}</code>","text":"<p>Joins the player to job.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#leave-jobs-job-event-nujobs_leavejob-jobname","title":"Leave Jobs Job Event: <code>nujobs_leavejob {jobname}</code>","text":"<p>Removes the player from job.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#set-jobs-level-nujobs_setlevel-jobname-level","title":"Set Jobs Level: <code>nujobs_setlevel {jobname} {level}</code>","text":"<p>Set the player to level.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives_1","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#join-jobs-job-objective-nujobs_joinjob-jobname","title":"Join Jobs Job Objective: <code>nujobs_joinjob {jobname}</code>","text":"<p>Triggers when player joins job.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#leave-jobs-job-objective-nujobs_leavejob-jobname","title":"Leave Jobs Job Objective: <code>nujobs_leavejob {jobname}</code>","text":"<p>Triggers when player leaves job.</p> <p>Notice</p> <p>This is not triggered by '/jobs leaveall'</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#jobs-job-levelup-nujobs_levelup-jobname","title":"Jobs Job Levelup: <code>nujobs_levelup {jobname}</code>","text":"<p>Triggers when player levels up.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#jobs-job-payment-nujobs_payment-amount","title":"Jobs Job Payment: <code>nujobs_payment {amount}</code>","text":"<p>Triggers when player makes {amount} of money from jobs. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of money already received, <code>left</code> is the amount of money still needed to receive and <code>total</code> is the amount of money initially required.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#luckperms","title":"LuckPerms","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#context-integration","title":"Context Integration","text":"<p>Any BetonQuest tag (global and per-player) can be used as a LuckPerms context. This means that a player needs the specified tag for a permission to be true - this removes the need for tons of <code>permission add ...</code> events as you can hook your existing quest progress tags right into LuckPerms permission contexts. The syntax is as follows:</p> key value betonquest:tag:PACKAGE_NAME.TAG_NAME true betonquest:globaltag:PACKAGE_NAME.TAG_NAME true betonquest:tag:myPackage.tagName true betonquest:globaltag:myQuest.someTag true <p>Check the Luck Perms documentation for an in-depth explanation on what contexts are and how to add them to permissions.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#permissions","title":"Permissions","text":"<p>If you prefer to directly add or remove permissions without triggering the LuckPerms changelog chat notifications, you can utilize the <code>luckperms addPermission</code> and <code>luckperms removePermission</code> events.  You also have the possibility to assign groups to the player via the <code>group.&lt;GroupName&gt;</code> permission. </p> Example<pre><code>events:\n  addDefaultGroup: \"luckperms addPermission permission:group.default,group.quester\" #(1)!\n  addNegated: \"luckperms addPermission permission:tutorial.done value:false\" #(2)!\n  addWithContext: \"luckperms addPermission permission:group.legend context:server;lobby\" #(3)!\n  addTemporary: \"luckperms addPermission permission:donator.level.one expiry:20 unit:MINUTES\" #(4)!\n  removeTutorial: \"luckperms removePermission permission:tutorial.done\"\n  removeMultiple: \"luckperms removePermission permission:tutorial.done,group.default\" #(5)!\n</code></pre> <ol> <li>You can define single or multiple permissions with the <code>permission</code> key. You need to separate them with a comma.</li> <li>You can define Permissions with a optional <code>value</code> of <code>false</code> to negate them and give them to the player. If you want to override the value of the permission, you can use the <code>value</code> argument and set it to <code>true</code>.</li> <li>You can also add optional <code>context</code>s to the permissions like <code>server;lobby</code>. Read more about contexts here. You can define multiple contexts by separating them with a comma.</li> <li>With the key <code>expiry</code> you can define the time until the permission expires. There can only be one expiry argument. If you dont use the <code>unit</code> parameter, it defaults do DAYS. Other units can be found here.</li> <li>You can remove multiple permissions at once by separating them with a comma.</li> </ol> <p>You can also add <code>context</code>, <code>value</code> and <code>expiry</code> to the <code>removePermission</code> event  but its not recommended as it only removes exact matches. Instead only use the permission to remove.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#magic","title":"Magic","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_4","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#wand-wand","title":"Wand: <code>wand</code>","text":"<p>This condition can check wands. The first argument is either <code>hand</code>, <code>inventory</code> or <code>lost</code>. If you choose <code>lost</code>, the condition will check if the player has lost a wand. If you choose <code>hand</code>, the condition will check if you're holding a wand in your hand. <code>inventory</code> will check your whole inventory instead of just the hand. In case of <code>hand</code> and <code>inventory</code> arguments you can also add optional <code>name:</code> argument followed by the name of the wand (as defined in wands.yml in Magic plugin) to check if it's the specific type of the wand. In the case of <code>inventory</code> you can specify an amount with <code>amount</code> and this will only return true if a player has that amount. You can also use optional <code>spells:</code> argument, followed by a list of spells separated with a comma. Each spell in this list must have a minimal level defined after a colon.</p> <p>Example</p> <pre><code>wand hand name:master spells:flare:3,missile:2\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mcmmo","title":"McMMO","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_5","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mcmmo-level-mcmmolevel","title":"McMMO Level: <code>mcmmolevel</code>","text":"<p>This conditions checks if the player has high enough level in the specified skill. The first argument is the name of the skill, second one is the minimum level the player needs to have to pass this condition.</p> <p>Example</p> <pre><code>mcmmolevel woodcutting 50\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_8","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#add-mcmmo-experience-mcmmoexp","title":"Add MCMMO Experience: <code>mcmmoexp</code>","text":"<p>This event adds experience points in a specified skill. The first argument is the name of the skill, second one is the amount of experience to add.</p> <p>Example</p> <pre><code>mcmmoexp swords 1500\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmocore-mmoitems-mythiclib","title":"MMOCore &amp; MMOItems &amp; MythicLib","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_6","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmocore-class-mmoclass","title":"MMOCore class: <code>mmoclass</code>","text":"<p>Checks if a player has the given MMOCore class. You can check for any class that is not the default class by writing <code>*</code> instead of a class name. If a level has been specified the player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass * 5\nmmoclass WARRIOR\nmmoclass MAGE 5\nmmoclass MAGE 5 equal\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmocore-attribute-mmoattribute","title":"MMOCore attribute: <code>mmoattribute</code>","text":"<p>Checks if a player has the specified attribute on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass mmoattribute strength 2 \nmmoclass mmoattribute strength 2 equal\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmocore-profession-mmoprofession","title":"MMOCore profession: <code>mmoprofession</code>","text":"<p>Checks if a player has the specified profession on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoprofession mining 2 \nmmoprofession mining 2 equal\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmoitems-item-mmoitem","title":"MMOItems item: <code>mmoitem</code>","text":"<p>Checks if a player has the specified amount of MMOItems or more in his inventory. If no amount has been defined the default amount is one. <pre><code>mmoitem ARMOR SKELETON_CROWN\nmmoitem GEMS SPEED_GEM 3\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmoitems-hand-mmohand","title":"MMOItems hand: <code>mmohand</code>","text":"<p>Checks if a player holds the specified MMOItem in his hand. Checks the main hand if not specified otherwise using the <code>offhand</code> argument. If no amount has been defined the default amount is one. <pre><code>mmohand ARMOR SKELETON_CROWN\nmmohand GEMS SPEED_GEM 3 offhand\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mythiclib-stat-mmostat","title":"MythicLib stat: <code>mmostat</code>","text":"<p>Checks these stats that combine all sorts of stats from MMOCore and MMOItems. The player needs to be on the specified level or higher in order to meet this condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmostat DAMAGE_REDUCTION 3\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives_2","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#break-special-blocks-mmocorebreakblock","title":"Break Special Blocks: <code>mmocorebreakblock</code>","text":"<p>This objective requires the player to break  special blocks from MMOCore. Please note that you must use this objective over <code>block</code> if you are using MMOCore's custom mining system. All three different block types and an amount can be defined. You can also send notifications to the player by appending the <code>notify</code> keyword optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of blocks already broken, <code>left</code> is the amount of blocks still left to break and <code>total</code> is the amount of blocks initially required.</p> <pre><code>mmocorebreakblock 5 block:1      #A custom block's block ID\nmmocorebreakblock 64 block:STONE  #vanilla material\nmmocorebreakblock 1 block:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVy #... this is a heads texture data\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#change-mmocore-class-mmochangeclass","title":"Change MMOCore class: <code>mmochangeclass</code>","text":"<p>This objective requires the player to change their class.</p> Example<pre><code>objectives:\n    selectAnyClass: \"mmochangeclass events:pickedClass\"\n    selectMage: \"mmochangeclass class:MAGE events:startMageIntroQuest\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mmocore-profession-levelup-mmoprofessionlevelup","title":"MMOCore Profession levelup: <code>mmoprofessionlevelup</code>","text":"<p>This objective requires the player to level the given profession to the specified level. Use <code>main</code> to check for class level ups.</p> <pre><code>mmoprofessionlevelup MINING 10\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#craft-item-mmoitemcraft","title":"Craft item: <code>mmoitemcraft</code>","text":"<p>This objective requires the player to craft the item with the given type and id. It supports any MMOItem that was crafted using vanilla crafting methods, MMOItems \"recipe-amounts\" crafting and MMOItems station crafting. An amount can also be set if it shall differ from the default (which is one) by adding the <code>amount:</code> argument. The amount is based on how many items have actually been crafted, not how often a specific recipe has been used! Therefore, a recipe that makes four items at once will let the objective progress by four steps. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already crafted, <code>left</code> is the amount of items still needed to craft and <code>total</code> is the amount of items initially required.</p> <pre><code>mmoitemcraft SWORD STEEL_SWORD\nmmoitemcraft HEALTH_POTION_RECIPE amount:5\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#upgrade-item-mmoitemupgrade","title":"Upgrade Item: <code>mmoitemupgrade</code>","text":"<p>This objective tracks if a player upgrades the given item with an upgrade consumable. <pre><code>mmoitemupgrade SWORD FALCON_BLADE\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#apply-gemstone-mmoitemapplygem","title":"Apply gemstone: <code>mmoitemapplygem</code>","text":"<p>This objective is completed when the player applies the gemstone with the given gemstoneID to an item with the given itemType and itemID. <pre><code>mmoitemapplygem SWORD CUTLASS GEM_OF_ACCURACY\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#activate-mythiclib-skill-mmoskill","title":"Activate MythicLib skill: <code>mmoskill</code>","text":"<p>This objective requires the player to activate a MythicLib skill (e.g. with MMOItems or MMOCore). </p> Parameter Syntax Default Value Explanation skill SKILL_ID The ID of the skill. trigger name:level All trigger types. The types of triggers that can be used to activate the skill. If not specified, all triggers are allowed. Example<pre><code>triggerSkill: \"mmoskill LIFE_ENDER event:updateStatistics\"\ncastSkillWithMMOCore: \"mmoskill DEEP_WOUND trigger:CAST event:completeTutorial\"\nitemSkill: \"mmoskill DEEP_WOUND trigger:RIGHT_CLICK,LEFT_CLICK event:giveReward\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_9","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-mmocore-class-experience-mmoclassexperience","title":"Give MMOCore class experience: <code>mmoclassexperience</code>","text":"<p>Adds experience to the players class. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoclassexperience 150\nmmoclassexperience 1 level\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-mmocore-profession-experience-mmoprofessionexperience","title":"Give MMOCore profession experience: <code>mmoprofessionexperience</code>","text":"<p>Adds experience in the specified player profession. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoprofessionexperience MINING 100\nmmoprofessionexperience CUSTOM_PROFESSION_NAME 1 level\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-class-points-mmocoreclasspoints","title":"Give class points: <code>mmocoreclasspoints</code>","text":"<p>Gives the player class points. The amount can be a variable or a number. <pre><code>mmocoreclasspoints 1\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-skill-points-mmocoreskillpoints","title":"Give skill points: <code>mmocoreskillpoints</code>","text":"<p>Gives the player skill points. The amount can be a variable or a number. <pre><code>mmocoreskillpoints 10\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-attribute-points-mmocoreattributepoints","title":"Give attribute points: <code>mmocoreattributepoints</code>","text":"<p>Gives the player attribute points. The amount can be a variable or a number. <pre><code>mmocoreattributepoints 2\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-attribute-reallocation-points-mmocoreattributereallocationpoints","title":"Give attribute reallocation points: <code>mmocoreattributereallocationpoints</code>","text":"<p>Gives the player attribute reallocation points. The amount can be a variable or a number. <pre><code>mmocoreattributereallocationpoints 1\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#give-mmoitem-mmoitemgive","title":"Give MMOItem: <code>mmoitemgive</code>","text":"<p>Gives the player predefined item. Default amount is one and can be set manually to a higher amount or a variable. The item can be adjusted to the players level by adding the <code>scale</code> option. If you want all items to be stacked together  the <code>singleStack</code> option can be set. If the player doesn't have required space in the inventory, the items will be dropped on the ground. You can also specify the <code>notify</code> keyword to display a message to the player about what items have been received. <pre><code>mmoitemgive CONSUMABLE MANA_POTION\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#take-mmoitem-mmoitemtake","title":"Take MMOItem: <code>mmoitemtake</code>","text":"<p>Removes the specified item from the players inventory. Optional arguments are an amount and <code>notify</code> to send a notification to the player.</p> <p>Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined. The backpack will not work before 2.0's item rework since the current item system does not safe custom NBT data.</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p> <p>Amount can be a variable. <pre><code>mmoitemtake SWORD STEEL_SWORD\nmmoitemtake SWORD STEEL_SWORD notify\nmmoitemtake CONSUMABLE HEALTH_POTION amount:5\nmmoitemtake CONSUMABLE BAKED_APPLES amount:2 invOrder:Backpack,Inventory\nmmoitemtake ARMOR KINGS_CHESTPLATE invOrder:Armor,Backpack\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mythicmobs","title":"MythicMobs","text":"<p>Required MythicMobs version: 5.3.5 or above </p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives_3","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mobkill-mmobkill","title":"MobKill: <code>mmobkill</code>","text":"<p>You need to kill the specified amount of MythicMobs to complete this objective. The first argument must be the mob's internal name (the one defined in your MythicMobs configuration). Multiple mob names must be comma seperated. You can optionally add the <code>amount:</code> argument to specify how many of these mobs need to be killed. It's also possible to add the optional arguments <code>minLevel</code> and <code>maxLevel</code> to further customize what mobs need to be killed. You can also add an optional <code>neutralDeathRadiusAllPlayers</code> argument to complete the objective for each nearby player within the defined radius when the mob is killed by any non-player source. Alternatively, you could use the <code>deathRadiusAllPlayers</code> argument to count all deaths of the specified mythic mob(s), no matter if it was killed by a non-player source or not. You can add a <code>notify</code> keyword if you want to send a notification to players whenever the objective progresses. You can also add an optional <code>marked</code> argument to only count kills marked with the <code>mspawn</code> event. Variables are supported.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of mythic mobs already killed, <code>left</code> is the amount of mythic mobs still needed to kill and <code>total</code> is the amount of mythic mobs initially required.</p> <p>Example</p> <pre><code>mmobkill SkeletalKnight amount:2 events:reward\nmmobkill SnekBoss,SnailBoss,SunBoss amount:10 events:reward\nmmobkill SnekBoss amount:2 minlevel:4 maxlevel:6 events:reward marked:DungeonBoss3\nmmobkill dungeonDevil deathRadiusAllPlayers:30 events:reward\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_7","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#mythicmob-distance-mythicmobdistance","title":"MythicMob distance: <code>mythicmobdistance</code>","text":"<p>Check whether the player is near a specific MythicMobs entity. The first argument is the internal name of the mob (the one defined in MythicMobs' configuration). The second argument is the distance to check, measured in block lengths in a circular radius.</p> <p>Example</p> <pre><code>mythicmobdistance SkeletalKnight 7\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_10","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#spawn-mythicmob-mspawnmob","title":"Spawn MythicMob: <code>mspawnmob</code>","text":"<p>persistent, static</p> Parameter Syntax Default Value Explanation location ULF The location to spawn the mob at. name name:level MythicMobs mob name. A level must be specifed after a colon. amount Positive Number Amount of mobs to spawn. target Keyword False Will make the mob target the player. private Keyword Disabled Will hide the mob from all other players until restart. This does not hide particles or block sound from the mob. Also see notes below. marked marked:text None Marks the mob, supporting variables. You can check for marked mobs in mmobkill objective. Example<pre><code>events:\n  spawnBoss: mspawnmob 100;200;300;world MegaBoss:1 1 target\n  spawnKnights: mspawnmob 100;200;300;world SkeletalKnight:3 5\n  spawnPrivateDevil: mspawnmob 100;200;300;world Mephisto:1 5 target private marked:DungeonBoss3\n</code></pre> <p>Private Argument</p> <p>The <code>private</code> argument requires some MythicMob setup for optimal use. It's best to use the <code>private</code> argument in combination with the <code>target</code> argument so the mob does not attack  players that cannot see it. Additionally, the mob should be configured to never change its AI target using MythicMobs.</p> <p>Private &amp; Target Arguments</p> <p>The <code>private</code> and <code>target</code> arguments are ignored when the event is used in a static context like Schedules.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#placeholderapi","title":"PlaceholderAPI","text":"<p>If you have this plugin, BetonQuest will add a <code>betonquest</code> placeholder to it and you will be able to use <code>ph</code> variable in your conversations.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#placeholder-betonquest","title":"Placeholder: <code>betonquest</code>","text":"<p>You can use all BetonQuest variables in any other plugin that supports PlaceholderAPI. You can even use BetonQuests conditions using the condition variable!   This works using the <code>%betonquest_package:variable%</code> placeholder. The <code>package:</code> part is the name of a package. The <code>variable</code> part is just a BetonQuest variable without percentage characters, like <code>point.beton.amount</code>.</p> <p>Testing your placeholder is easy using this command:   <code>/papi parse &lt;PlayerName&gt; %betonquest_&lt;PackageName&gt;:&lt;VariableType&gt;.&lt;Property&gt;%</code> <pre><code>%betonquest_someGreatQuest:objective.killZombies.left%\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#variable-ph","title":"Variable: <code>ph</code>","text":"<p>persistent, static</p> <p>You can also use placeholders from other plugins in BetonQuest. Simply insert a variable starting with <code>ph</code>, the second argument should be the placeholder without percentage characters.</p> <p>Example</p> <pre><code>%ph.player_item_in_hand%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#protocollib","title":"ProtocolLib","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_11","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#freeze-players-freeze","title":"Freeze players: 'freeze'","text":"<p>This event allows you to freeze player for the given amount of ticks: <pre><code>freezeMe: \"freeze 100\" #Freezes the player for 5 seconds\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#chat-interceptor","title":"Chat Interceptor","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#packet-interceptor-packet","title":"Packet interceptor: <code>packet</code>","text":"<p>This interceptor works on network package level and is thus much more reliable than the <code>simple</code> interceptor when working with advanced Chat plugins. </p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#quests","title":"Quests","text":"<p>Quests is another questing plugin, which offers very simple creation of quests. If you don't want to spend a lot of time to write advanced quests in BetonQuest but you need a specific thing from this plugin you can use Custom Event Reward or Custom Condition Requirement. Alternatively, if you have a lot of quests written in Quests, but want to integrate them with the conversation system, you can use <code>quest</code> event and <code>quest</code> condition.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#condition-requirement-quests","title":"Condition Requirement (Quests)","text":"<p>When adding requirements to a quest, choose \"Custom requirement\" and then select \"BetonQuest condition\". Now specify condition's name and it's package (like <code>package.conditionName</code>). Quests will check BetonQuest condition when starting the quest.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#event-reward-quests","title":"Event Reward (Quests)","text":"<p>When adding rewards to a quest or a stage, choose \"Custom reward\" and then select \"BetonQuest event\". Now specify event's name and it's package (like <code>package.eventName</code>). Quests will fire BetonQuest event when this reward will run.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_8","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#quest-condition-quest","title":"Quest condition: <code>quest</code>","text":"<p>This condition is met when the player has completed the specified quest. The first and only argument is the name of the quest. It it contains any spaces replace them with <code>_</code>.</p> <p>Example</p> <pre><code>quest stone_miner\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_12","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#quest-quest","title":"Quest: <code>quest</code>","text":"<p>This event will start the quest for the player. The first argument must be the name of the quest, as defined in <code>name</code> option in the quest. If the name contains any spaces replace them with <code>_</code>. You can optionally add <code>check-requirements</code> argument if you want the event to respect this quest's requirements (otherwise the quest will be forced to be started).</p> <p>Example</p> <pre><code>quest stone_miner check-requirements\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#redischat","title":"RedisChat","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#chat-interceptor_1","title":"Chat Interceptor","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#redischat-interceptor-redischat","title":"RedisChat interceptor: <code>redischat</code>","text":"<p>This chat interceptor works directly with RedisChat to pause the chat during conversations.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#shopkeepers","title":"Shopkeepers","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_9","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#shop-amount-shopamount","title":"Shop amount: <code>shopamount</code>","text":"<p>This condition checks if the player owns specified (or greater) amount of shops. It doesn't matter what type these shops are. The only argument is a number - minimum amount of shops.</p> <p>Example</p> <pre><code>shopamount 2\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_13","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#open-shop-window-shopkeeper","title":"Open shop window: <code>shopkeeper</code>","text":"<p>This event opens a trading window of a Villager. The only argument is the uniqueID of the shop. You can find it in Shopkeepers/saves.yml file, under <code>uniqueID</code> option.</p> <p>Example</p> <pre><code>shopkeeper b687538e-14ce-4b77-ae9f-e83b12f0b929\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#fabled","title":"Fabled","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_10","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#fabled-class-fabledclass","title":"Fabled Class: <code>fabledclass</code>","text":"<p>This condition checks if the player has specified class or a child class of the specified one. The first argument is simply the name of a class. You can add <code>exact</code> argument if you want to check for that exact class, without checking child classes.</p> <p>Example</p> <pre><code>fabledclass warrior\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#fabled-level-fabledlevel","title":"Fabled Level: <code>fabledlevel</code>","text":"<p>This condition checks if the player has specified or greater level than the specified class level. The first argument is class name, the second one is the required level.</p> <p>Example</p> <pre><code>fabledlevel warrior 3\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skript","title":"Skript","text":"<p>BetonQuest can also hook into Skript. Firstly, to avoid any confusion, I will refere to everything here by name of the plugin (Skript event is something else than BetonQuest event). Having Skript on your server will enable using BetonQuest events and conditions in scripts, and also trigger them by BetonQuest event.</p> <p>You can use cross-package paths using <code>-</code> between the packages. Example: <code>player meets condition \"default-Forest-Jack.Completed\"</code></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skript-event-triggered-by-betonquest-skript-event","title":"Skript event triggered by BetonQuest <code>skript</code> event","text":"<p>This entry will describe two things: Skript event and BetonQuest event.</p> <ol> <li>Skript event - <code>on [betonquest] event \"id\"</code> - this is the line you use in your scripts to trigger the code. <code>betonquest</code> part is optional, and <code>id</code> is just some string, which must be equal to the one you specified in BetonQuest event.</li> <li>BetonQuest event - <code>skript</code> - this event will trigger the above Skript event in your scripts. The instruction string accepts only one argument, id of the event. It have to be the same as the one defined in Skript event for it to be triggered.</li> </ol> <p>Example</p> <p>In your script <pre><code>on betonquest event \"concrete\":\n</code></pre> In BetonQuest <pre><code>events:\n  fire_concrete_script: skript concrete\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skript-condition","title":"Skript condition","text":"<p>You can check BetonQuest conditions in your scripts by using the syntax <code>player meets [betonquest] condition \"id\"</code>. <code>betonquest</code> is optional, and <code>id</code> is the name of the condition, as defined in the conditions section.</p> <p>Example</p> <p>In your script <pre><code>player meets condition \"has_ore\"\n</code></pre> In BetonQuest <pre><code>has_ore: item iron_ore:5\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#skript-event","title":"Skript event","text":"<p>You can also fire BetonQuest events with scripts. The syntax for Skript effect is <code>fire [betonquest] event \"id\" for player</code>. Everything else works just like in condition above.</p> <p>Example</p> <p>In your script <pre><code>fire event \"give_emeralds\" for player\n</code></pre> In BetonQuest <pre><code>events:\n  give_emeralds: give emerald:5\n</code></pre></p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#traincarts","title":"TrainCarts","text":"<p>TrainCarts is a plugin that allows you to create trains with advanced features.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_11","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#traincarts-ride-condition-traincartsride","title":"TrainCarts ride condition: <code>traincartsride</code>","text":"<p>Checks if the player is riding a specific named train.</p> <p>Example</p> <pre><code>traincartsride train1\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives_4","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#traincarts-location-objective-traincartslocation","title":"TrainCarts location objective: <code>traincartslocation</code>","text":"<p>This objective requires the player to be at a specific location while sitting in a train.  It works similarly to the location objective, but the player must be in a TrainCarts train to complete it.</p> Parameter Syntax Default Value Explanation location x;y;z;world The Location the player has to pass whiles sitting in the train. range range:double 1 The optional range around the location where the player must be. entry entry Disabled The player must enter (go from outside to inside) the location to complete the objective. exit exit Disabled The player must exit (go from inside to outside) the location to complete the objective. name name:Train1 The optional Name of the Train. <p>Example</p> <pre><code>traincartslocation 100;60;100;world\ntraincartslocation name:Train1 100;60;100;world range:2\ntraincartslocation 100;60;100;world entry range:2\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#traincarts-ride-objective-traincartsride","title":"TrainCarts ride objective: <code>traincartsride</code>","text":"<p>This objective requires the player to ride a train for a specific time. The time starts after the player enters the train and stops when the player exits the train. The conditions are checked every time the player enters or leaves the train or completes the objective. If the conditions are not met, the time will not be counted.</p> Parameter Syntax Default Value Explanation name name:Train1 The optional Name of the Train. amount amount:20 0 The optional amount of time in seconds, the player has to ride a specific train. <p>Example</p> <pre><code>traincartsride\ntraincartsride name:Train1\ntraincartsride name:Train1 amount:20\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#traincarts-ride-objective-traincartsexit","title":"TrainCarts ride objective: <code>traincartsexit</code>","text":"<p>This objective requires the player to exit a train.</p> <p>Example</p> <pre><code>traincartsexit\ntraincartsexit name:Train1\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#vault","title":"Vault","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_12","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#vault-money-condition-money","title":"Vault Money Condition: <code>money</code>","text":"<p>Checks if the player has the specified amount of money.</p> <pre><code>conditions:\n  hasMoney: \"money 1\"\n  canAffordPlot: \"money 10000\"\n  isRich: \"money 1000000\"\n</code></pre> <p>Tip</p> <p>Invert this condition if you want to check if the player has less money than specified. Example: <pre><code>conditions:\n  isRich: \"money 100000\"\nevents:\n  giveSubsidy: \"money +500 conditions:!isRich\" #(1)!\n</code></pre></p> <ol> <li>If the player has less than 100000 money, the <code>giveSubsidy</code> event will be fired.    </li> </ol>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_14","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#vault-money-event-money","title":"Vault Money Event: <code>money</code>","text":"<p>Deposits, withdraws or multiplies money in the player's account.</p> Parameter Syntax Default Value Explanation amount Number The amount of money to add or remove. Use <code>*</code> to multiply. notify Keyword: <code>notify</code> Disabled Display a message to the player when their balance is changed. <pre><code>events:\n  sellItem: \"money +100\"\n  buyPlot: \"money -10000\"\n  winLottery: \"money *7 notify\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#change-permission-groups-permission","title":"Change Permission (Groups): <code>permission</code>","text":"<p>Adds or removes a permission or a group.</p> Parameter Syntax Default Value Explanation action <code>add</code> or <code>remove</code> Whether to add or remove the thing specified using the following arguments. type <code>perm</code> or <code>group</code> Whether to use a permission or permission group. name The name of the permission. The name of the permission or group to add. world The name of the world. Global You can limit permissions to certain worlds only. If no world is set the permission will be set everywhere (global). <pre><code>events:\n  allowFly: \"permission add perm essentials.fly\"\n  joinBandit: \"permission add group bandit\"\n  leaveBandit: \"permission remove group bandit\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#variables","title":"Variables","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#vault-money-variable-money","title":"Vault Money Variable: <code>money</code>","text":"<p>Use <code>%money.amount%</code> for showing the player's balance. Use <code>%money.left:500%</code> for showing the difference between the player's balance and the specified amount of money.</p> <pre><code>events:\n  notifyBalance: \"notify You have %money.amount%$!\"\n  notifyNotEnough: \"notify You still need %money.left:10000%$ to buy this plot.\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#worldedit-or-fastasyncworldedit","title":"WorldEdit or FastAsyncWorldEdit","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#events_15","title":"Events","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#paste-schematic-paste","title":"Paste schematic: <code>paste</code>","text":"<p>persistent, static</p> <p>This event will paste a schematic at the given location. The first argument is a location and the second one is the name of a schematic file. The file must be located in <code>WorldEdit/schematics</code> or <code>FastAsyncWorldEdit/schematics</code> and must have a name like <code>some_building.schematic</code>. If WorldEdit saves <code>.schem</code> schematic files, simply append <code>.schem</code> to the schematic name in the event's instruction.</p> <p>The optional <code>noair</code> keyword can be added to ignore air blocks while pasting. You can also rotate the schematic by adding <code>rotation:90</code> where <code>90</code> is the angle in degrees.</p> Example<pre><code>events:\n  pasteCastle: \"paste 100;200;300;world castle noair\" #(1)!\n  pasteTree: \"paste 100;200;300;world tree.schem noair\" #(2)!\n</code></pre> <ol> <li>Pastes the schematic file <code>castle.schematic</code> at the location <code>100;200;300;world</code>.</li> <li>Pastes the schematic file <code>tree.schem</code> at the location <code>100;200;300;world</code>.</li> </ol>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#worldguard","title":"WorldGuard","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#conditions_13","title":"Conditions","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#npc-region-npcregion","title":"NPC region: <code>npcregion</code>","text":"<p>persistent, static</p> <p>This condition is met a npc is inside a region.</p> Parameter Syntax Default Value Explanation Npc Npc The ID of the Npc Region Region Name The region where the npc needs to be <p>Example</p> Example<pre><code>mayorAtSpawn: npcregion mayor spawn\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#inside-region-region","title":"Inside Region: <code>region</code>","text":"<p>This condition is met when the player is inside the specified region.</p> Parameter Syntax Default Value Explanation Region Region name The region where the player has to be Example<pre><code>inCastle: \"region castle\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#objectives_5","title":"Objectives","text":""},{"location":"Documentation/Scripting/Building-Blocks/Integration-List/#enter-region-region","title":"Enter Region: <code>region</code>","text":"<p>To complete this objective you need to be in a WorldGuard region with specified name. </p> Parameter Syntax Default Value Explanation Region Region name The region where the player has to be Entry <code>entry</code> Disabled The player needs to enter the region Exit <code>exit</code> Disabled The player needs to leave the region Example<pre><code>deathZone: \"region deathZone entry events:kill\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/","title":"Objectives List","text":""},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#action-action","title":"Action: <code>action</code>","text":"<p>This objective completes when the player clicks on the given block type.  It works great with the location condition and the item in hand condition to further limit the counted clicks.</p> Parameter Syntax Default Value Explanation Click Type <code>right</code>, <code>left</code> or <code>any</code> What type of click should be handled Block Type Block Selector or <code>any</code> The block which must be clicked, or <code>any</code> for even air Location loc:Location Optional. Default: none Adds an optional location to the objective, only counting blocks clicked at the specific location. range range:number 0 The range around the location where to count the clicks. cancel Keyword (<code>cancel</code>) Not Set Prevents the player from interacting with the block. hand hand:(<code>hand</code>,<code>off_hand</code>, <code>any</code>) <code>hand</code> The hand the player must use to click the block, <code>any</code> can the objective cause to be completed multiple times <p>Example</p> <pre><code>action right DOOR conditions:holding_key loc:100;200;300;world range:5\naction any any conditions:holding_magicWand events:fireSpell #Custom click listener for a wand\n</code></pre>  Variable Properties  <p>The objective contains one property, <code>location</code>. It's a string formatted like <code>X: 100, Y: 200, Z:300</code>. It does not show the radius.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#arrow-shooting-arrow","title":"Arrow Shooting: <code>arrow</code>","text":"<p>To complete this objective the player needs to shoot the arrow into the target. There are two arguments, location of the target and precision number (radius around location where the arrow must land, should be small). Note that the position of an arrow after hit is on the wall of a full block, which means that shooting not full blocks (like heads) won't give accurate results. Experiment with this objective a bit to make sure you've set the numbers correctly.</p> <p>Example</p> <pre><code>arrow 100.5;200.5;300.5;world 1.1 events:reward conditions:correct_player_position\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#break-or-place-blocks-block","title":"Break or Place Blocks: <code>block</code>","text":"<p>To complete this objective the player must break or place the specified amount of blocks.</p> Parameter Syntax Default Value Explanation Block Type Block Selector The block which must be broken / placed. Amount Number The amount of blocks to break / place. Less than 0 for breaking and more than 0 for placing blocks. Safety Check Keyword (<code>noSafety</code>) Safety Check Enabled The Safety Check prevents faking the objective. The progress will be reduced when the player does to opposite of what they are supposed to do. Example: Player must break 10 blocks. They place 10 of their stored blocks. Now the total amount of blocks to break is 20. Notifications Keyword (<code>notify</code>) Disabled Displays messages to the player each time they progress the objective. Optionally with the notification interval after colon. Location loc:location Optional. Default: none Adds an optional location to the objective, only counting blocks broken/placed at the specific location. Region definer region:location Optional. Default: none Adds an optional second location to only count blocks broken/placed in a rectangle between the specified location and this location. This won't have an effect if parameter location isn't set. ignorecancel Keyword (<code>ignorecancel</code>) Protected blocks will not affect the objective Allows the objective to progress, even if the event is cancelled by the Server. For example if the player is not allowed to build. <pre><code>objectives:\n  breakLogs: \"block .*_LOG -16 events:reward notify\"\n  placeBricks: \"block BRICKS 64 events:epicReward notify:5\"\n  breakIron: \"block IRON_ORE -16 noSafety notify events:dailyReward\"\n</code></pre>  Variable Properties  <p>Note that these follow the same rules as the amount argument, meaning that blocks to break are a negative number!</p> Name Example Output Explanation amount -6 / 6 Shows the amount of blocks already broken / placed. left -4 / 4 Shows the amount of blocks that still need to be broken / placed for the objective to be completed. total -10 / 10 Shows the initial amount of blocks that needed to be broken / placed. <p>You can use these variables to always get positive values:</p> Name Example Output Explanation absoluteAmount 6 Shows the absolute amount of blocks already broken / placed. absoluteLeft 4 Shows the absolute amount of blocks that still need to be broken / placed for the objective to be completed. absoluteTotal 10 Shows the initial absolute amount of blocks that needed to be broken / placed."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#breed-animals-breed","title":"Breed animals: <code>breed</code>","text":"<p>This objective is completed by breeding animals of specified type. The first argument is the animal type and the second argument is the amount (positive integer). You can add the <code>notify</code> argument to display a message with the remaining amount each time the animal is bred, optionally with the notification interval after a colon. While you can specify any entity, the objective will be completable only for breedable ones.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of animals already breed, <code>left</code> is the amount of animals still needed to breed and <code>total</code> is the amount of animals initially required.</p> <p>Example</p> <pre><code>breed cow 10 notify:2 events:reward\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#put-items-in-a-chest-chestput","title":"Put items in a chest: <code>chestput</code>","text":"<p>This objective requires the player to put specified items in a specified chest. First argument is a location of the chest, second argument is a list of items (from items section), separated with a comma. You can also add amount of items after a colon. The items will be removed upon completing the objective unless you add <code>items-stay</code> optional argument. By default, only one player can look into the chest at the same time. You can change it by adding the key  <code>multipleaccess</code>.</p> <p>Example</p> <pre><code>chestput 100;200;300;world emerald:5,sword events:tag,message\nchestput 0;50;100;world apple:42 events:message multipleaccess:true\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#eatdrink-consume","title":"Eat/drink: <code>consume</code>","text":"<p>This objective is completed by eating the specified food or drinking the specified potion. </p> Parameter Syntax Default Value Explanation Item Quest Item The item or potion that must be consumed. Amount amount:number 1 The amount of items to consume. <pre><code>objectives:\n  eatApple: \"consume apple events:faster_endurance_regen\"\n  eatSteak: \"consume steak amount:4 events:health_boost\"\n</code></pre>  Variable Properties  Name Example Output Explanation amount 6 Shows the amount of items already consumed. left 4 Shows the amount of items that still need to be consumed for the objective to be completed. total 10 Shows the initial amount of items that needed to be consumed."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#crafting-craft","title":"Crafting: <code>craft</code>","text":"<p>To complete this objective the player must craft specified item. First argument is ID of the item, as in the items section. Next is amount (integer). You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already crafted, <code>left</code> is the amount of items still needed to craft and <code>total</code> is the amount of items initially required.</p> <p>Example</p> <pre><code>craft saddle 5 events:reward\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#enchant-item-enchant","title":"Enchant item: <code>enchant</code>","text":"<p>This objective is completed when the player enchants the specified quest item with the specified enchantment. </p> Parameter Syntax Default Value Explanation item Quest Item The quest item that must be enchanted. enchants enchantment:level The enchants that must be added to the item. Enchantment names are different from the vanilla ones. If a level is present, the enchanted level must be equal or bigger then the specified one. Multiple enchants are supported: <code>ARROW_DAMAGE:1,ARROW_FIRE:1</code> requirementMode requirementMode:mode <code>all</code> Use <code>one</code> if any enchantment from <code>enchants</code> should complete the objective. Use <code>all</code> if all are required at the same time. amount amount:number 1 The amount of items to enchant. Example<pre><code>lordSword: \"enchant lordsSword damage_all,knockback events:rewardLord\"\nkingSword: \"enchant kingsSword damage_all:2,knockback:1 events:rewardKing\"\nmassProduction: \"enchant ironSword sharpness amount:10 events:blacksmithLevel2Reward\"\n</code></pre>  Variable Properties  Name Example Output Explanation amount 6 Shows the amount of items already enchanted. left 4 Shows the amount of items that still need to be enchanted for the objective to be completed. total 10 Shows the initial amount of items that needed to be enchanted."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#experience-experience","title":"Experience: <code>experience</code>","text":"<p>This objective can be completed by reaching the specified amount of experience levels. You can also define decimal numbers, for example <code>experience 1.5</code> will complete when the player reaches 1.5 experience levels or more. If you want to check for an absolute amount of experience points you can convert it to decimal levels. The objective is checked every time the player gets experience naturally, such as killing mobs or mining blocks. Additionally, it is checked if the player reaches a new level in any way (vanilla level up, commands or other plugins). The objective will also imminently complete if the player already has the experience level or more. And it will also be completed if the player joins the game with the specified amount of experience levels or more. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the current amount of experience levels, <code>left</code> is the amount of experience levels still needed and <code>total</code> is the amount of experience required.</p> <p>Example</p> <pre><code>experience 25 level events:reward\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#wait-delay","title":"Wait: <code>delay</code>","text":"<p>This objective completes itself after certain amount of time. The player must be online and meet all conditions. If the player is not online the objective is completed on the player's next login.</p> Parameter Syntax Default Value Explanation time Any Number The time after which the objective is completed. unit Keyword minutes The unit of time. Either <code>minutes</code>, <code>seconds</code> or <code>ticks</code>. precision interval:number interval:200 The interval in which the objective checks if the time is up. Measured in ticks. Low values cost more performance but make the objective preciser. Example<pre><code>objectives:\n  waitDay: \"delay 1440 events:resetDaily\" #(1)!\n  wait50sec: \"delay 1000 ticks interval:5 events:failQuest\" #(2)! \n</code></pre> <ol> <li>Runs the <code>resetDaily</code> event after 1440 minutes (24 hours).</li> <li>Runs the <code>failQuest</code> event after 1000 ticks (50 seconds) have passed. The objective checks every 5 ticks (250ms) if the time is up.</li> </ol>  Variable Properties  Name Example Output Explanation left 23 days 5 hours 45 minutes 17 seconds Shows the time left until the objective is completed. date 17.04.2022 16:14 Shows the date the objective is completed at using the config's <code>date_format</code> setting. rawSeconds 5482 Shows the amount of seconds until objective completion."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#death-die","title":"Death: <code>die</code>","text":"<p>The death objective is completed when a player dies while fulfilling all conditions. If you set the <code>respawn</code> location the player will spawn at that location, after pressing respawn, and the objective will be completed then, not immediately on death.</p> <p>Optionally you can also add the <code>cancel</code> argument to prevent the player from dying. In this case, the player will be healed and all status effects will be removed. You can also specify the <code>respawn</code> location to which the player will be teleported to.</p> <p>Example</p> <pre><code>die respawn:100;200;300;world;90;0 events:respawned\ndie cancel respawn:100;200;300;world;90;0 events:respawned\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#fishing-fish","title":"Fishing: <code>fish</code>","text":"<p>Requires the player to catch something with the fishing rod. It doesn't have to be a fish, it can also be any other item.</p> Parameter Syntax Default Value Explanation Item Quest Item The item that must be caught. amount Any Number The amount that must be caught. notifications notify:number notify:0 Add <code>notify</code> to display a notification when a fish is caught. Optionally with the notification interval after a colon. hookLocation hookLocation:Location Everywhere The location at which the item must be caught. Range must also be defined. range range:number Everywhere The range around the <code>hookLocation</code>. Example<pre><code>objectives:\n  fisherman: \"fish SALMON 5 notify events:tag_fish_caught\" #(1)!\n  fishAtPond: \"fish COD 5 hookLocation:123;456;789;fishWorld range:10 events:giveSpecialFish\" #(2)!\n</code></pre> <ol> <li>Requires the player to catch 5 salmon. The player will get a notification for every caught fish.</li> <li>Requires the player to catch 5 cod. The rod's hook must be used in a 10 block radius around <code>x:123 y:456 z:789</code> in a world named <code>fishWorld</code>.</li> </ol>  Variable Properties  Name Example Output Explanation left 4 The amount of fish still left to be caught. amount 6 The amount of already caught fish. total 10 The initially required amount of fish needed to be caught."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#interact-with-entity-interact","title":"Interact with entity: <code>interact</code>","text":"<p>The player must click on entities to complete this objective.</p> Parameter Syntax Default Value Explanation Click Type <code>right</code>, <code>left</code> or <code>any</code> What type of click should be handled Entity Type EntityType type The entity which must be clicked amount number The amount of different entities which must be interacted with. name name:text Disabled Only count named mobs. Spaces must be replaced with <code>_</code>. realname realname:text Disabled To check for the real name (e.g. if you renamed players to include their rank). Spaces must be replaced with <code>_</code>. marked marked:text Disabled If the clicked entity needs to be marked by the spawn event (see its description for marking explanation) hand hand:(<code>hand</code>,<code>off_hand</code>, <code>any</code>) <code>hand</code> The hand the player must use to click the block, <code>any</code> can the objective cause to be completed multiple times Notifications Keyword (notify) Disabled Displays messages to the player each time they progress the objective. Optionally with the notification interval after colon. Cancel Keyword (cancel) Disabled if the click shouldn't do what it usually does (i.e. left click won't hurt the entity). hookLocation hookLocation:Location Everywhere The location at which the entity must be interacted. range range:number 1 The range around the <code>loc</code>. Requires defined <code>loc</code>. Example<pre><code>interact right creeper 1 marked:sick condition:syringeInHand cancel\n</code></pre>  Variable Properties  Name Example Output Explanation amount 7 The amount of already interacted entities. left 13 The amount of entities still needed to be interacted with. total 20 The initially required amount of entities to interact."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#resource-pack-state-resourcepack","title":"Resource pack state: <code>resourcepack</code>","text":"<p> Objective  \u00b7   Requires Paper</p> <p>To complete this objective the player must have the specified resource pack state. The first argument is the state of the resource pack. It can be <code>successfully_loaded</code>, <code>declined</code>, <code>failed_download</code> and <code>accepted</code>.</p> <p>Example</p> <pre><code>resourcepack successfully_loaded events:reward\nresourcepack declined events:declined\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#kill-player-kill","title":"Kill player: <code>kill</code>","text":"<p>To complete this objective the player needs to kill another player. The first argument is amount of players to kill. You can also specify additional arguments: <code>name:</code> followed by the name will only accept killing players with this name, <code>required:</code> followed by a list of conditions separated with commas will only accept killing players meeting these conditions and <code>notify</code> will display notifications when a player is killed, optionally with the notification interval after a colon.</p> <p>The kill objective has three properties: <code>left</code> is the amount of players still left to kill, <code>amount</code> is the amount of already killed players and <code>total</code> is the initially required amount to kill.</p> <p>Example</p> <pre><code>kill 5 required:team_B\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#location-location","title":"Location: <code>location</code>","text":"<p>The specified location where the player needs to be. It is not required to specify <code>entry</code> or <code>exit</code> then the objective also completes if the player just moves inside the location's range.</p> Parameter Syntax Default Value Explanation location ULF The location to go to range number The range around the location where the player must be. entry entry Disabled The player must enter (go from outside to inside) the location to complete the objective. exit exit Disabled The player must exit (go from inside to outside) the location to complete the objective. <p>Example</p> <pre><code>location 100;200;300;world 5 condition:started events:notifyWelcome,start\nlocation 100;200;300;world 5 exit conditions:started events:notifyBye\n</code></pre>  Variable Properties  Name Example Output Explanation location X: 100, Y: 200, Z:300 The target location of this objective"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#login-login","title":"Login: <code>login</code>","text":"<p>To complete this objective the player simply needs to login to the server. If you use <code>global</code> this objective will be also completed directly when a new player joins for the first time. If you use <code>persistent</code> it will be permanent. Don't forget that if you use global and persistent you can still remove the objective explicitly.</p> <p>Example</p> <pre><code>login events:welcome_message\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#logout-logout","title":"Logout: <code>logout</code>","text":"<p>To complete this objective the player simply needs to leave the server. Keep in mind that running a <code>folder</code> event here will make it run in \"persistent\" mode, since the player is offline on the next tick.</p> <p>Example</p> <pre><code>logout events:delete_objective\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#npc-interact-npcinteract","title":"NPC Interact: <code>npcinteract</code>","text":"<p>The player has to interact with a Npc. </p> Parameter Syntax Default Value Explanation Npc Npc The ID of the Npc. Cancel <code>cancel</code> False If the interaction with the Npc should be cancelled, so a conversation won't start. Interaction interaction:Keyword <code>right</code> The interaction type. Either <code>left</code>, <code>right</code> or <code>any</code>. Example<pre><code>stealItem: npcinteract mayor cancel conditions:sneak events:steal\npunchThief: npcinteract thief interaction:left events:poke\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#npc-range-npcrange","title":"NPC Range: <code>npcrange</code>","text":"<p>The player has to enter/leave a circle with the given radius around the NPC to complete this objective. It is also possible to define multiple NPCs separated with <code>,</code>. The objective will be completed as soon as you meet the requirement of just one npc.</p> Parameter Syntax Default Value Explanation Npcs Npc List The IDs of the Npcs Action Keyword The required action. Either <code>enter</code>, <code>leave</code>, <code>inside</code> or <code>outside</code>. Range Number The maximum distance to a Npc <p>Info</p> <p>The types <code>enter</code>, <code>leave</code> force the player to actually enter the radius after you were outside of it and vice versa. This means that <code>enter</code> is not completed when the player gets the objective and is already in the range, while <code>inside</code> is instantly completed.</p> Example<pre><code>goToVillage: npcrange farmer,guard enter 20 events:master_inRange\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#password-password","title":"Password: <code>password</code>","text":"<p>This objective requires the player to write a certain password in chat. All attempts of a player will be hidden from public chat. The password consists of a prefix followed by the actual secret word: <pre><code>Solution: The Cake is a lie!     \n^prefix   ^secret word(s)\n</code></pre></p> <p>The objective's instruction string is defined as follows:</p> <ol> <li> <p>The first argument is the password, use underscore characters (<code>_</code>) instead of spaces.    The password is a regular expression. </p> </li> <li> <p>The prefix can be changed: The default (when no prefix is set) is the translated prefix from the messages.yml config in the user's language.               Note that every custom prefix is suffixed with <code>:\u2800</code>, so <code>prefix:Library_password</code> will require the user to enter <code>Library password: myfancypassword</code>.       To disable the prefix use an empty <code>prefix:</code> declaration, e.g. <code>password myfancypassword prefix: events:success</code>.    Be aware of these side effects that come with disabling the prefix:</p> <ul> <li>Nothing will be hidden on failure, so tries will be visible in chat and commands will get executed!</li> <li>If a command was used to enter the password, the command will not be canceled on success and thus still be executed!    </li> <li>This ensures that even if your password is <code>quest</code> you can still execute the <code>/quest</code> command. </li> </ul> </li> <li> <p>You can also add the <code>ignoreCase</code> argument if you want a password's capitalization to be ignored. This is especially important for regex matching.</p> </li> <li> <p>If you want to trigger one or more events when the player failed to guess the password you can use the argument <code>fail</code> with a list of events (comma separated).    With disabled prefix every command or chat message will trigger these events!</p> </li> </ol> <pre><code>objectives:\n  theBetonPassword: \"password beton ignoreCase prefix:secret fail:failEvent1,failEvent2 events:message,reward\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#pickup-item-pickup","title":"Pickup item: <code>pickup</code>","text":"<p>To complete this objective you need to pickup the specified amount of items.  The first argument must be the internal name of an item defined in the <code>items</code> section. This can also be a comma-separated list of multiple items. You can optionally add the <code>amount:</code> argument to specify how many of these items the player needs to pickup.  This amount is a total amount though, it does not count per each individual item. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>You can also add the <code>notify</code> keyword to display how many items are left to pickup.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already picked up, <code>left</code> is the amount of items still needed to pick up and <code>total</code> is the amount of items initially required.</p> <p>Example</p> <pre><code>pickup emerald amount:3 events:reward notify\npickup emerald,diamond amount:6 events:reward notify\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#entity-kill-mobkill","title":"Entity Kill: <code>mobkill</code>","text":"<p>The player must kill the specified amount of entities (living creatures). All entities work, make sure to use their correct types.</p> Parameter Syntax Default Value Explanation type ENTITY_TYPE,ENTITY_TYPE A list of entities, e.g. <code>ZOMBIE,SKELETON</code>. amount Positive Number Amount of mobs to kill in total. name name:text Disabled Only count named mobs. Spaces must be replaced with <code>_</code>. marked marked:keyword Disabled Only count marked mobs. See the spawn event for more information. Supports variables. notify notify:interval Disabled Display a message to the player each time they kill a mob. Optionally with the notification interval after colon. Example<pre><code>objectives:\n  monsterHunter: \"mobkill ZOMBIE,SKELETON,SPIDER 10 notify\" #(1)!\n  specialMob: \"mobkill PIG 1 marked:special\" #(2)!\n  bossZombie: \"mobkill ZOMBIE 1 name:Uber_Zombie\" #(3)!\n</code></pre> <ol> <li>The player must kill a zombie,skeleton or a spider to progress this objective. In total, they must kill 10 entities. Additionally, there will be a notification after each kill.</li> <li>The player must kill a pig that was spawned with the spawn event and has a marker. </li> <li>The player must kill a zombie named \"Uber Zombie\".</li> </ol>  Variable Properties  Name Example Output Explanation amount 2 Shows the amount of mobs already killed. left 8 Shows the amount of mobs that still need to be killed. total 10 Shows the amount of mobs initially required to kill."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#potion-brewing-brew","title":"Potion brewing: <code>brew</code>","text":"<p>To complete this objective the player needs to brew specified amount of specified potions. The first argument is a potion ID from the items section. Second argument is amount of potions. You can optionally add <code>notify</code> argument to make the objective display progress to players, optionally with the notification interval after a colon.</p> <p>Progress will be counted for the player who last added or changed an item before the brew process completed. Only newly created potions are counted.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of potions already brewed, <code>left</code> is the amount of potions still needed to brew and <code>total</code> is the amount of potions initially required.</p> <p>Example</p> <pre><code>brew weird_concoction 4 event:add_tag\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#sheep-shearing-shear","title":"Sheep shearing: <code>shear</code>","text":"<p>To complete this objective the player has to shear specified amount of sheep, optionally with specified color and/or name. The first, required argument is amount (integer). Optionally, you can add a <code>name:</code> argument to only count specific sheep. All underscores will be replaced by spaces - if you want to use underscores, put a <code>\\</code> before them. You can also check for the sheep's <code>color:</code> using these color names. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of sheep already sheared, <code>left</code> is the amount of sheep still needed to shear and <code>total</code> is the amount of sheep initially required.</p> <p>Example</p> <pre><code>shear 1 name:Bob color:black\nshear 1 name:jeb\\_\n\"shear 1 name:jeb\\\\_\" #Use two backslashes if quoted\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#smelting-smelt","title":"Smelting: <code>smelt</code>","text":"<p>To complete this objective the player must smelt the specified item. Note that you must define the output item, not the ingredient. The first argument is the name of a Quest Item. The second one is the amount (integer).</p> <p>You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of items already smelted, <code>left</code> is the amount of items still needed to smelt and <code>total</code> is the amount of items initially required.</p> Example<pre><code>smeltIron: \"smelt ironIngot 5 events:reward\"\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#stages-stage","title":"Stages: <code>stage</code>","text":"<p>The Stage objective is a special objective that can be used to track the progress of a quest or a part of a quest. It can be completed in two ways, the first one is by increasing the stage more than there are stages defined and the second one is by completing the objective with the objective event. The behaviour of completing the objective by increasing the stage can be disabled by setting the <code>preventCompletion</code> flag.</p> <p>When the conditions of the stage objective are not met, the stage of the player can not be modified. You can modify the stages with the stage event and check it's state with the stage condition.</p> Parameter Syntax Default Value Explanation stages List of stage names The stages that must be completed. preventCompletion Keyword Completion Enabled Prevents the objective from being completed by increasing the stage. Example<pre><code>objectives:\n  questProgress: \"stage part1,part2,part3\"\n  bakeCookies: \"stage collectIngredients,cookCookies,deliverCookies preventCompletion\"\n</code></pre>  Variable Properties  Name Example Output Explanation index 2 The index of the players current stage beginning at 0. current cookCookies The current stage name of the player or empty if the objective is not active. next deliverCookies The next stage name of the player or empty if the objective is not active. previous collectIngredients The previous stage name of the player or empty if the objective is not active."},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#step-on-pressure-plate-step","title":"Step on pressure plate: <code>step</code>","text":"<p>To complete this objective the player has to step on a pressure plate at a given location. The type of plate does not matter. The first and only required argument is a location. If the pressure plate is not present at that location, the objective will not be completable and will log errors in the console.</p> <p>Step objective contains one property, <code>location</code>. It shows the exact location of the pressure plate in a string formatted like <code>X: 100, Y: 200, Z:300</code>.</p> <p>Example</p> <pre><code>step 100;200;300;world events:done\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#taming-tame","title":"Taming: <code>tame</code>","text":"<p>To complete this objective player must tame some amount of mobs. First argument is type, second is amount. The mob must be tamable for the objective to be valid, e.g.: <code>CAT</code>, <code>DONKEY</code>, <code>HORSE</code>, <code>LLAMA</code>, <code>PARROT</code> or <code>WOLF</code>. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of animals already tamed, <code>left</code> is the amount of animals still needed to tame and <code>total</code> is the amount of animals initially required.</p> <p>Example</p> <pre><code>tame WOLF 2 events:wolfs_tamed\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#player-must-jump-jump","title":"Player must Jump: <code>jump</code>","text":"<p> Objective  \u00b7   Requires Paper</p> <p>To complete this objective the player must jump. The only argument is amount. You can use the <code>notify</code> keyword to display a message each time the player advances the objective, optionally with the notification interval after a colon.</p> <p>This objective has three properties: <code>amount</code>, <code>left</code> and <code>total</code>. <code>amount</code> is the amount of jumps already done, <code>left</code> is the amount of jumps still needed and <code>total</code> is the amount of jumps initially required.</p> <p>Example</p> <pre><code>jump 15 events:legExerciseDone\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#ride-an-entity-ride","title":"Ride an entity: <code>ride</code>","text":"<p>This objective can be completed by riding the specified entity. <code>any</code> is also a valid input and matches any entity.</p> <p>Example</p> <pre><code>ride horse\nride any\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#run-a-command-command","title":"Run a Command: <code>command</code>","text":"<p>To complete this objective the player must execute a specified command. It can be both an existing or a new, custom command. The first argument is the command text. Use <code>_</code> in place of spaces for the command. If you need an actual <code>_</code> in your command, you must escape it using a backslash (<code>\\</code>, see example below). The command argument is case-sensitive and also supports using placeholders. The second required argument is a list of events to execute when the objective is met.</p> <p>Example</p> <pre><code>command /warp_%player%_farms events:event1,event2\ncommand //replace_oak\\_wood events:event1,event2\n</code></pre> <p>With this configuration, the command objective requires the player to execute <code>/warp MyName farms</code> to be completed. The command objective matches from the start of the command that was executed, therefore if the player executed <code>/warp MyName farms other arguments</code> it would still be completed.</p> <p>Optional arguments:</p> <ul> <li><code>ignoreCase</code>: If provided, instructs the objective to ignore case for the command to match.</li> <li><code>exact</code>: If provided, requires an exact command match, not just the command start.</li> <li><code>cancel</code>: If provided, the objective will cancel the execution of the command on a match. This needs to be enabled to suppress the <code>Unknown Command</code> message when using custom commands.</li> <li><code>failEvents</code>: If provided, specifies a list of events to execute if a non-matching command is run and conditions are met.</li> </ul> <p>Complex</p> <pre><code>command /warp_%player%_farms ignoreCase exact cancel failEvents:failEvent1,failEvent2 events:event1,event2\n</code></pre> <p>Warning</p> <p>Sometimes you want to use actual underscores in your command. These will however be replaced with spaces by default. You can \"escape\" them using backslashes: One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>).</p> <p>Examples: <code>eventName: command /enchant_@s_minecraft:aqua_affinity</code> <code>eventName:command /enchant_@s_minecraft:aqua\\_affinity</code> <code>eventName: 'command /enchant_@s_minecraft:aqua_affinity'</code> <code>eventName: 'command /enchant_@s_minecraft:aqua\\_affinity'</code> <code>eventName: \"command /enchant_@s_minecraft:aqua_affinity\"</code> <code>eventName: \"command /enchant_@s_minecraft:aqua\\\\_affinity\"</code></p>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#equip-armor-item-equip","title":"Equip Armor Item: <code>equip</code>","text":"<p> Objective  \u00b7   Requires Paper</p> <p>The player must equip the specified quest item in the specified slot. The item must be any quest item as defined in the items section. Available slot types: <code>HEAD</code>, <code>CHEST</code>, <code>LEGS</code>, <code>FEET</code>.</p> <pre><code>equip HEAD amazing_helmet events:event1,event2\nequip CHEST amazing_armor events:event1,event2\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Objectives-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>This objective is different. You cannot complete it, it will also ignore defined events and conditions. You can start it and that's it. While this objective is active though, everything the player types in chat (and matches a special pattern) will become a variable. The pattern is <code>key: value</code>. So if the player types <code>MyFirstVariable: Hello!</code>, it will create a variable called <code>MyFirstVariable</code>, which will resolve as a <code>Hello!</code> string. These are not global variables, you can access them as objective properties. Let's say you defined this objective as <code>CustomVariable</code> in your objectives.yml file. You can access the variable in any conversation, event or condition with <code>%objective.CustomVariable.MyFirstVariable%</code> - and in the case of this example, it will resolve to <code>Hello!</code>. The player can type something else and the variable will change its value. Variables are per-player, so the value of one player's <code>MyFirstVariable</code> will be different from other players' <code>MyFirstVariable</code> values, depending on what they typed in chat. There is no limit to the amount of variables that can be created and assigned to players. To remove this objective, use <code>objective delete</code> event - there is no other way.</p> <p>You can also use <code>variable</code> event to change variables stored in this objective. There is one optional argument, <code>no-chat</code>. If you use it, the objective won't be modified  by what players type in chat which is only useful when you're also using the <code>variable</code> event.</p> <p>Example</p> <pre><code>variable\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/","title":"Variables List","text":"<p>This page lists all the variables that are available in BetonQuest. Some of them are only useful when exported for use in other plugins through the support for PlaceHolderAPI.</p> <p>Variables marked as static can be resolved without a player specified.</p>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#betonquest-elements","title":"BetonQuest Elements","text":""},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#objective-property-variable","title":"Objective Property Variable","text":"<p>Using this variable you can display a property of an objective. The first argument is an ID of the objective as defined in the objectives section (not the type). Make sure that the player has this objective active or it will be replaced with nothing (\"\"). Second argument is the name of a property you want to display. All properties are described in \"Objectives List\" chapter.</p> <pre><code>%objective.kill_zombies.left%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#condition-variable","title":"Condition Variable","text":"<p>You can expose BetonQuest's conditions to 3<sup>rd</sup> party plugins by using the <code>condition</code> variable together with the  PAPI support. The variable will return <code>true</code> or <code>false</code> by default. If you add <code>papiMode</code> to the instruction it will return <code>yes</code> or <code>no</code>.   You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> <code>condition_variable_not_met</code> in  the messages.yml config.</p> <pre><code>%condition.myCondition%\n%condition.myCondition.papiMode%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#betonquest-data-types","title":"BetonQuest Data Types","text":""},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#point-variable","title":"Point Variable","text":"<p>This variable displays the amount of points you have in some category or amount of points you need to have to reach a number. The first argument is the name of a category and the second argument is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <pre><code>%point.reputation.amount%\n%point.reputation.left:15%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#global-point-variable","title":"Global Point Variable","text":"<p>static</p> <p>This variable displays the amount of global points in some category or the amount of points needed to reach a number. The first argument is the name of a category and the second argument is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <pre><code>%globalpoint.global_knownusers.amount%\n%globalpoint.global_knownusers.left:100%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#tag-variable","title":"Tag Variable","text":"<p>This variable displays whether the player has a tag or not. The variable will return true or false by default. If you add papiMode to the instruction it will return yes or no. You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> and <code>condition_variable_not_met</code> in the messages.yml config.</p> <pre><code>%tag.test%\n%tag.test.papiMode%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#global-tag-variable","title":"Global Tag Variable","text":"<p>static</p> <p>This variable displays whether a global tag is set or not. The variable will return true or false by default. If you add papiMode to the instruction it will return yes or no. You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> and <code>condition_variable_not_met</code> in the messages.yml config.</p> <pre><code>%globaltag.test%\n%globaltag.test.papiMode%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#custom-text-variable","title":"Custom Text Variable","text":"<p>It is possible to save text per player. This works by using the <code>variable</code>  objective and the <code>variable</code> event. </p>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#global-variables","title":"Global variables","text":"<p>You can insert a global variable in any instruction text. It looks like this: <code>$beton$</code> (and this one would be called \"beton\"). When the plugin loads that instruction string it will replace those variables with values assigned to them in the <code>variables:</code> section before all instructions are parsed. This is useful for example when installing a package containing a WorldEdit schematic of the quest building. Instead of going through the whole code to set those locations, names or texts you will only have to specify a few variables (that is, of course, if the author of the package used those variables properly in his code).</p> <p>Note that these variables are something entirely different from other variables. Global ones use <code>$</code> characters and conversation ones use <code>%</code> characters. The former is resolved before the instruction text is parsed while the latter is resolved when the quests are running, usually on a per-player basis.</p> <pre><code>variables:\n  village_location: 100;200;300;world\n  village_name: Concrete\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#other-variables","title":"Other Variables","text":""},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#eval-variable","title":"Eval Variable","text":"<p>static</p> <p>This variable allows you to resolve an expression containing variables, and the result will then be interpreted again as a variable. You need to escape the <code>%</code> inside eval with a backslash <code>\\</code> to prevent it from being interpreted as a delimiter. You can nest multiple evals, but this leads you to an escape hell. If you do so, you need to add one escape level with each nesting level, this means normally you write <code>\\%</code> and in the next level you need to write <code>\\\\\\%</code>.</p> <pre><code>%eval.player.\\%objective.variableStore.displayType\\%%\n%eval.player.\\%eval.objective.\\\\\\%objective.otherStore.targetStore\\\\\\%.displayType\\%%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#item-variable","title":"Item Variable","text":"<p>With this variable you can display different properties of a specific QuestItem. The first argument is the name of the item (as defined in the items section). The <code>amount</code> argument displays the number of items in the players inventory and backpack, the <code>left:x</code> gives the difference to the <code>x</code> value (when the amount is higher than the value it will be negative). The <code>name</code> argument simply gives the defined name or an empty String, when not set and <code>lore:x</code> displays the lore row with index <code>x</code> (starting with 0). Both <code>name</code> and <code>lore</code> supports the <code>raw</code> subargument to get the text without formatting.</p> <pre><code>%item.stick.amount%\n%item.stick.left:32%\n%item.epic_sword.name%\n%item.epic_sword.lore:0.raw%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#item-durability-variable","title":"Item durability variable","text":"<p>With this variable you can display the durability of an item. The first argument is the slot. An optional argument is <code>relative</code> which will display the durability of the item relative to the maximum from 0 to 1, where 1 is the maximum. You can specify the amount of digits with the argument <code>digits:x</code>, where <code>x</code> is a whole number. This default is 2 digits. Additionally, you get the output in percent (inclusive the '%' symbol).</p> <pre><code>%itemdurability.HAND%\n%itemdurability.CHEST.relative%\n%itemdurability.CHEST.relative.percent%\n%itemdurability.HEAD.relative.digits:5%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#location-variable","title":"Location Variable","text":"<p>This variable resolves to all aspects of the player's location. The x, y and z coordinates, the world name, the yaw and pitch (head rotation). There are also modes for the Unified Location Formatting (ULF from now on) which means that this variable can also be used in events, conditions etc. If you just specify <code>%location%</code> the variables will resolve to a ULF with yaw and pitch. You can add two options to that base, one will give back parts of the ULF and the other will set to how many decimal places  the variable will resolve. </p> <pre><code>%location%           # -&gt; 325;121;814;myWorldName;12;6\n%location.xyz%       # -&gt; 325 121 814 \n%location.x%         # -&gt; 325\n%location.y%         # -&gt; 121\n%location.z%         # -&gt; 814\n%location.yaw%       # -&gt; 12\n%location.pitch%     # -&gt; 6\n%location.world%     # -&gt; myWorldName\n%location.ulfShort%  # -&gt; 325;121;814;myWorldName\n%location.ulfLong%   # -&gt; 325;121;814;myWorldName;12;6\n\n%location.x.2%       # -&gt; 325.16\n%location.ulfLong.5% # -&gt; 325.54268;121.32186;814.45824;myWorldName;12.0;6.0\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#math-variable","title":"Math Variable","text":"<p>static</p> <p>This variable allows you to perform a calculation based on other variables (for example point or objective variables) and resolves to the result of the specified calculation. The variable always starts with <code>math.calc:</code>, followed by the calculation which should be calculated. Supported operations are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code> and <code>%</code>. You can use <code>( )</code> and <code>[ ]</code> braces and also calculate absolute values with <code>| |</code>. But be careful, don't use absolute values in the command event as it splits the commands at every <code>|</code> and don't nest them without parenthesis (<code>|4*|3-5||</code> won't work, but <code>|4*(|3-5|)|</code> does). Additionally, you can use the round operator <code>~</code> to round everything left of it to the number of decimal digits given on the right. So <code>4+0.35~1</code> will produce <code>4.4</code> and <code>4.2~0</code> will produce <code>4</code>.</p> <p>To use variables in the calculation you have two options: First just write the variable, but  without <code>%</code> around them; In cases where this doesn't work, e.g. if the variable contains mathematical operators, you can surround it with curly braces <code>{ }</code>. Inside the curly braces you have to escape with <code>\\</code>, so to have a <code>\\</code> in your variable you need to write <code>\\\\</code>, to have a <code>}</code> inside your variable you need to write <code>\\}</code>.</p> <p>When the calculation fails <code>0</code> will be returned and the reason logged.</p> <p>Warning</p> <p>The modulo operator needs to be escaped with a backslash <code>\\</code> to prevent it from being interpreted as a placeholder delimiter. If you don't want to escape the percentage and actually want to write a backslash you can use <code>\\\\%</code>. Don't forget to escape the backslash itself with another backslash if you are inside a double-quoted string <code>\"</code>.</p> <pre><code>%math.calc:100*(15-point.reputation.amount)%\n%math.calc:objective.kill_zombies.left/objective.kill_zombies.total*100~2%\n%math.calc:-{ph.myplugin_stragee+placeholder}%\n%math.calc:64\\%32%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#npc-variable","title":"Npc Variable","text":"<p>static</p> <p>This variable resolves information about a Npc.  Specifying an argument determines the return: the Npc name, or full name (with formatting).</p> <p>Arguments: * name - Return citizen name * full_name - Full Citizen name</p> Example<pre><code>%npc.bob.name%        # Bob\n%npc.bob.full_name%   # &amp;eBob\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#npc-location-variable-npcidlocationmodeprecision","title":"Npc Location Variable: <code>%npc.&lt;id&gt;.location.&lt;mode&gt;.&lt;precision&gt;%</code>","text":"<p>This variable resolves to all Npc location. For details see the location variable.</p> Example<pre><code>%npc.mayor.location%           # -&gt; 325;121;814;npcWorldName;12;6\n%npc.mayor.location.xyz%       # -&gt; 325 121 814 \n%npc.mayor.location.ulfLong.5% # -&gt; 325.54268;121.32186;814.45824;npcWorldName;12.0;6.0\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#player-name-variable","title":"Player Name Variable","text":"<p>The variable <code>%player%</code> is the same as <code>%player.name%</code> and will display the name of the player. <code>%player.display%</code> will use the display name used in chat and <code>%player.uuid%</code> will display the UUID of the player.</p> <pre><code>%player%\n%player.name%\n%player.display%\n%player.uuid%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#quester-name-conversation","title":"Quester Name (Conversation)","text":"<p>When the player is in a conversation, this variable will contain the quester's name in the player's quest language. If the player is not in a conversation, the variable is empty.</p> <pre><code>%quester%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#random-number-variable","title":"Random Number Variable","text":"<p>static</p> <p>This variable gives a random number from the first value to the second. The first argument is <code>whole</code> or <code>decimal</code>, the second and third arguments are numbers or variables, seperated by a <code>~</code>. Like the <code>math</code> variable you can round the decimal value by using instead of <code>decimal</code> the argument <code>decimal~x</code> where <code>x</code> is the maximal amount of decimal places.  Variables can be used with <code>{}</code> instead of <code>%%</code>. Note that the first value is returned when it is higher than the second.</p> <pre><code>%randomnumber.whole.0~10%\n%randomnumber.whole.-70~70%\n%randomnumber.decimal~3.3.112~100%\n%randomnumber.decimal~1.0~{location.y}%\n</code></pre>"},{"location":"Documentation/Scripting/Building-Blocks/Variables-List/#version-variable","title":"Version Variable","text":"<p>static</p> <p>This variable displays the version of the plugin. You can optionally add the name of the plugin as an argument to display version of another plugin.</p> <pre><code>%version.Citizens%\n</code></pre>"},{"location":"Documentation/Visual-Effects/Additional-Effects/Player-Hider/","title":"Player Hider","text":""},{"location":"Documentation/Visual-Effects/Additional-Effects/Player-Hider/#hiding-players","title":"Hiding Players","text":"Sorry, your browser doesn't support embedded videos.  <p>You can also hide players for specific players in the <code>player_hider</code> section of your package. When the <code>source_player</code> meets the conditions, every player that meets the <code>target_player</code> conditions will be completely hidden from them.  This is really useful if you want a lonely place on your server  or your quests break when multiple players can see or affect each other. You can configure the interval which checks the conditions in the config.yml.</p> <p>Special behaviour:</p> <ul> <li>A player that meets the <code>source_player</code>conditions can no longer be pushed by other players.</li> <li>By leaving the e.g. <code>source_player</code> argument empty it will match all players.</li> </ul> <pre><code>player_hider:\n  example_hider:  #All players in a special region cannot see any other players in that region. If a player is outside the region, they can still see the `target_player`.\n    source_player: in_StoryRegion\n    target_player: in_StoryRegion\n  another_hider: #No one can see any players inside a secret room.\n    #The source_player argument is left out to match all players.    \n    target_player: in_secretRoom\n  empty_hider: #in_Lobby is a world condition. Therefore, the lobby world appears empty for everyone that is in it.\n    source_player: in_Lobby\n    #The target_player argument is left out to match all players.\n</code></pre>"},{"location":"Documentation/Visual-Effects/Additional-Effects/Quest-Holograms/","title":"Quest Holograms","text":""},{"location":"Documentation/Visual-Effects/Additional-Effects/Quest-Holograms/#holograms","title":"Holograms","text":"<p>Required Dependency: Hologram Plugin</p> <p>This feature can be activated by installing any of the following hologram plugins:</p> Plugin Required Version Additional Dependencies DecentHolograms 2.7.5 or above PlaceholderAPI for in-line variables. Holographic Displays 3.0.0 or above ProtocolLib for conditioned holograms. <p>If you have both plugins installed, you can use the <code>default_hologram</code> option in \"config.yml\" to set which plugin should be used.</p> <p>When used by external plugins like BetonQuest, DecentHolograms does not support custom model data in items lines!</p> <p>You need to use their syntax for item holograms with custom model data instead of the BetonQuest syntax.</p> <p>Last checked: DecentHolograms version 2.7.9 on 2023-01-03.</p>"},{"location":"Documentation/Visual-Effects/Additional-Effects/Quest-Holograms/#hidden-holograms","title":"Hidden Holograms","text":"<p>Installing either of these plugins will enable you to create hidden holograms, which will be shown to players only if they meet specified conditions.</p> <p>In order to create a hologram, you have to add a <code>holograms</code> section. Add a node named as your hologram to this section and define <code>lines</code>, <code>conditions</code> and <code>location</code> subnodes. The first one should be a list of texts - these will be the lines of a hologram. Color codes are supported. Second is a list of conditions separated by commas. Third is a location in a standard format, like in <code>teleport</code> event. If <code>max_range</code> is specified, the hologram will only be visible in this range, if not, the default value from the connected hologram plugin will be used.  An example of such hologram definition:</p> <pre><code>holograms:\n  beton:\n    lines:\n    - 'item:custom_item'\n    - '&amp;2Top questers this month'\n    - 'top:completed_quests;desc;10;&amp;a;\u00a76;2;&amp;6'\n    - '&amp;2Your amount: &amp;6%point.completed_quests.amount%'\n    - '&amp;Total amount: &amp;6%azerothquests.globalpoint.total_completed_quests.amount%'\n    conditions: has_some_quest, !finished_some_quest    \n    location: 100;200;300;world\n    # How often to check conditions (optional)\n    check_interval: 20\n    # Maximum hologram display distance (optional)\n    max_range: 40\n</code></pre>"},{"location":"Documentation/Visual-Effects/Additional-Effects/Quest-Holograms/#item-lines","title":"Item Lines","text":"<p>A line can also represent a floating item. To do so enter the line as 'item:<code>custom_item</code>'. It will be replaced with the <code>custom_item</code> defined in the <code>items</code> section. If the Item is defined for example as map, a floating map will be seen between two lines of text.</p>"},{"location":"Documentation/Visual-Effects/Additional-Effects/Quest-Holograms/#ranking-holograms","title":"Ranking Holograms","text":"<p>Holograms created by BetonQuest can rank users by the score of a point. Such scoreboards (not to be confused with the Minecraft vanilla scoreboard) are configured as one line and replaced by multiple lines according to the limit definition. Each scoreboard line comes in the format <code>#. name - score</code> The short syntax is 'top:<code>point</code>;<code>order</code>;<code>limit</code>'. The specified <code>point</code> must be located inside the package the hologram is declared in. To use a point from another package, put <code>package.point</code> instead. The <code>order</code> is either 'desc' for descending or 'asc' for ascending. If something other is specified, descending will be used by default. The limit should be a positive number. In the short declaration, the whole line will be white. To color each of the four elements of a line (place, name, dash and score), the definition syntax can be extended to 'top:<code>point</code>;<code>order</code>;<code>limit</code>;<code>c1</code>;<code>c2</code>;<code>c3</code>;<code>c4</code>'. The color codes can be prefixed with either <code>\u00a7</code> or <code>&amp;</code>, but do not have to be. If for example <code>c2</code> is left blank (two following semicolons), it is treated as an 'f' (color code for white).</p> <p>Each BetonQuest variable can be displayed on a hologram in a text line. These variables use the same definition syntax as in conversations such that; '<code>%package.variable%</code>'. Where the <code>package</code> part is optional if the hologram is defined in the same package as the variable. If you wish to refer to a variable that is not in the same package as the hologram, then you must specify a package before the <code>variable</code>.</p> <p>Potential lags</p> <p>The HolographicDisplays documentations warns against using too many individual hologram variables since they are rendered for each player individually. If you are using HolographicDisplays, to save resources, it is recommended to minimise the use of non-static variables.</p> <p>The hologram's conditions are checked every 10 seconds, meaning a hologram will respond to a condition being met or un-met every 10 seconds. If you want to make it faster, add <code>hologram_update_interval</code> option in config.yml file and set it to a number of ticks you want to pass between updates (one second is 20 ticks). Don't set it to 0 or negative numbers, it will result in an error.</p> <p>Keep in mind that each hologram plugin also updates its holograms on a timer individually, meaning that hologram variables will refresh at a much quicker rate than the above.</p>"},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Hiding/","title":"NPC Hiding","text":""},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Hiding/#usage","title":"Usage","text":"<p>Hide Npcs if specified conditions are met! You can do that by adding a <code>hide_npcs</code> section in your package.  It allows you to assign conditions to specific NpcIDs like so:</p> <pre><code>hide_npcs:\n  Farmer: killedAlready,questStarted\n  Guard: '!questStarted'\n</code></pre> <p>The interval the conditions are checked in can be configured in the config.yml.</p>"},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Hiding/#force-visibility-update","title":"Force Visibility Update","text":"<p>You can run the <code>updatevisibility</code> event to manually update the visibility. This is useful for performance optimizations if used with the npc hider interval set to high values.</p>"},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Holograms/","title":"NPC Holograms","text":""},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Holograms/#requirements","title":"Requirements","text":"<p>Required Dependency: Hologram Plugin</p> <p>This feature can be activated by installing any of the following hologram plugins:</p> Plugin Required Version Additional Dependencies DecentHolograms 2.7.5 or above PlaceholderAPI for in-line variables. Holographic Displays 3.0.0 or above ProtocolLib for conditioned holograms. <p>If you have both plugins installed, you can use the <code>default_hologram</code> option in \"config.yml\" to set which plugin should be used.</p> <p>When used by external plugins like BetonQuest, DecentHolograms does not support custom model data in items lines!</p> <p>You need to use their syntax for item holograms with custom model data instead of the BetonQuest syntax.</p> <p>Last checked: DecentHolograms version 2.7.9 on 2023-01-03.</p>"},{"location":"Documentation/Visual-Effects/NPC-Effects/NPC-Holograms/#usage","title":"Usage","text":"Example<pre><code>npc_holograms: #(7)!\n  myHologram: #(8)!\n    lines: #(1)!\n      - \"Some text!\" \n    vector: 0;0.5;0 #(2)!\n    follow: true #(3)!\n    conditions: has_some_quest,!finished_some_quest #(4)!\n    check_interval: 20 #(5)!\n    npcs: #(6)!\n      - Mayor\n      - Guard\n    max_range: 40 #(9)!\n</code></pre> <ol> <li>The lines of the hologram.</li> <li>A vector that points from the Npc's location to the hologram's location. Can be used to configure an offset.  Optional.</li> <li>If the hologram follows the Npc. Optional, defaults to <code>false</code>.</li> <li>Conditions that must be true for the hologram to display.</li> <li>How often the conditions are checked. Optional. </li> <li>A list of NpcIDs that the hologram is attached to. </li> <li>The section that all holograms must be placed in.</li> <li>The identifier of the hologram. Must be unique.</li> <li>Maximum hologram display distance. Optional.</li> </ol> <p>All other hologram features are also supported.</p> <p>If you have moving NPCs (walking around) then you can have the holograms follow them by setting <code>follow: true</code>, but this will cause a lot of updates to the holograms and may cause lag if used on a lot of Npcs. So only set this to true for holograms with a Npc that actually moves. Also, not every Npc supports that feature.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/","title":"IO's & Categories","text":"<p>A NotifyIO is a method of displaying a notification to the player. Here's a demo video showing an example configuration of all NotifyIO's:</p>    Sorry, your browser doesn't support embedded videos.  <p>Most NotifyIO's have unique settings that somehow change how a notification is displayed.   Additionally, they all allow any setting from the SoundIO to be used! This is because every NotifyIO has an internal SoundIO.  Therefore, you can play a sound whenever a notification is shown.</p> <p>The actual message is either defined in the event that triggers the NotifyIO or in the messages.yml for all built-in notifications. </p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#sending-notifications-notify","title":"Sending Notifications: <code>notify</code>","text":"<p>You can send notifications using the <code>notify</code> event. This is how to use it:</p> <p>Warning</p> <p>All colons (<code>:</code>) in the message part of the notification need to be escaped, including those inside variables. One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>). You also need to escape the backslash itself, if you use double quotes for some things like <code>\\n</code>.</p> <p>Examples: <code>eventName: notify Peter:Heya %player%!</code> <code>eventName: notify Peter\\:Heya %player%!</code> <code>eventName: 'notify Peter:Heya %player%!'</code> <code>eventName: 'notify Peter\\:Heya %player%!'</code> <code>eventName: \"notify Peter:Heya %player%!\"</code> <code>eventName: \"notify Peter\\\\:Heya %player%!\"</code> <code>otherEvent: notify You own %math.calc:5% fish!</code> <code>otherEvent: You own %math.calc\\:5% fish!</code> <code>newLine: \"notify Some multiline \\n message\"</code> <code>newLine: \"notify Some multiline \\\\n message\"</code></p> Parameter Syntax Default Value Explanation message Any text with spaces! The message that will be displayed. Supports variables and translations. Must be first category <code>category:info</code> None Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. io <code>io:bossbar</code> io:chat Any NotifyIO Overrides the \"category\". settings. any io specific settings <code>setting:value</code> None Some notifyIO's provide specific settings. Can be used multiple times. Overrides the \"category\" settings."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#usage-examples","title":"Usage Examples","text":"<p>Check out the notify IO specific options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend. Advanced users may also use Notify Categories to make their lives easier. <pre><code>#The simplest of all notify events. Just a chat message:\ncustomEvent: \"notify Hello %player%!\"  \n\n#It's the same as this one since 'chat' is the default IO.\ntheSame: \"notify Hello %player%! io:chat\"\n\n#This one displays a title and a subtitle:\nmyTitle: \"notify This is a title.\\\\nThis is a subtitle. io:title\"\n\n#Plays a sound:\nmySound: \"notify io:sound sound:x.y.z\"\n\n#This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option:\nmyBar: \"notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use\"\n\n#Some events with categories.\nmyEvent1: \"notify This is a custom message! category:info\"\nmyEvent2: \"notify This is a custom message! category:firstChoice,secondChoice\"\n\n#You can also override category settings:\nmyEvent3: \"notify Another message! category:info io:advancement frame:challenge\"\n\n#Use multiple languages:\nmultilanguage: \"notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!\"\n</code></pre></p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#translations","title":"Translations","text":"<p>Notifications can be translated with this syntax:  <pre><code>example: \"notify {en} ABC {de} DEF\"\n</code></pre> The value in <code>{}</code> is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see <code>ABC</code> and german ones would see <code>DEF</code>.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#broadcasts","title":"Broadcasts","text":"<p>persistent, static</p> <p>You can broadcast notifications to all players on the server using the <code>notifyall</code> event. It works just like the notify event. Variables are resolved for each online player, not for the player the event is executed for.</p> Example<pre><code>events:\n  announceDungeon: \"notifyall A new dungeon has opened!\"\n</code></pre>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#available-notifyios","title":"Available NotifyIOs","text":"<p>There are a bunch of notify IOs available. They all have their own settings and are listed below.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#chat","title":"Chat","text":"<p>Writes the notification in the player's chat.</p> Preview <p></p> Option Description Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#advancement","title":"Advancement","text":"<p>Shows the notification using an achievement popup. Unfortunately, Minecraft will play the default advancement sound here.  It's not possible to stop this sound from playing\u2014if you want to get rid of it, you would have to override / remove that sound from your server's resource pack. You can still add your own additional sound as usual though. It will then be played together with the default advancement sound.</p> Preview <p></p> Option Description frame What Achievement frame to use. Can be: <code>challenge</code>, <code>goal</code>, <code>task</code> icon What icon to show. Must be the vanilla name of an item. Example: minecraft:map Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#actionbar","title":"Actionbar","text":"<p>Shows the notification using the actionbar.</p> Preview <p></p> Option Description Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#bossbar","title":"Bossbar","text":"<p>Shows the notification using a bossbar at the top of the players screen.</p> Preview <p> </p> Option Description barFlags What flags to add to the bossbar. <code>PLAY_BOSS_MUSIC</code> seems to be broken in either server or the game itself. barColor What color to draw the bar. progress What progress to show in the bar. A floating point number between 0.0 (empty) and 1.0 (full). Supports variables. style What bar style to use. stay How many ticks to keep the bar on screen. Defaults to 70. Supports variables. countdown Animates the progress of the bar if set. The value determines how often the bar is updated. Formula: \\(TimeBetweenUpdates = \\frac{stay}{countdown}\\) Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#title","title":"Title","text":"<p>Shows the notification using a title. A subtitle can be played simultaneously by adding <code>\\n</code> to the notification text. Anything after these characters will be shown in the subtitle.</p> Preview <p></p> Option Description fadeIn Ticks to fade the title in. Default 10 stay Ticks to keep title on screen. Default 70 fadeOut Ticks to fade the title out. Default 20 Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#subtitle","title":"SubTitle","text":"<p>Shows the notification using a subtitle.</p> Preview <p></p> Option Description fadeIn Ticks to fade the title in. Default 10 stay Ticks to keep title on screen. Default 70 fadeOut Ticks to fade the title out. Default 20 Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#totem","title":"Totem","text":"<p>Shows a totem with a \"customModelData\" NBT tag. This allows you to replace the totem with a custom texture or model  during the animation.</p> Preview <p>   Sorry, your browser doesn't support embedded videos. </p> Option Description customisation This CustomModelData will be used. Sound Any option from the SoundIO."},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#sound","title":"Soundsoundplayeroffset:","text":"<p>This IO just plays a sound. You can use its options in any other IO. You should read the wiki page of the playsound command as Minecraft's sound system is kinda strange. Just one example: Sound never moves in Minecraft. It's totally static. Keep that in mind when creating sounds close to a player. They can move around the sound and make it louder or quieter by walking towards / away from it.</p> Option Description sound Sound to play. If blank, no sound. Either vanilla Minecraft sounds (get them using /playsound autocompletion) or the name of a sound from a resource pack. soundcategory The category in which the sound will be played. soundvolume Minecraft's special sound volume. Default: 1 soundpitch Pitch of the sound. Default: 1 Min: 0 Max: 2 soundlocation Default: The player's location. A location using the BetonQuest ULF. Can include variables. soundplayeroffset This option is special. See below. <p>This option can be a number or a vector.</p> <p>Number:</p> <p>The location the sound will be played at is moved away from the player towards the <code>soundlocation</code> using the value of <code>soundplayeroffset</code>. The sound will be at the actual location if the player is closer to the soundlocation then the <code>soundplayeroffset</code> would allow.</p> Visual Explanation <p> </p> <p>This shows how the sound will be played at the <code>soundlocation</code> if the <code>soundplayeroffset</code> is bigger then the current distance between the player and the <code>soundlocation</code> </p> <p>Example usage:</p> <p>You could make a \"sound compass\" that will play a sound in the direction of a point of interest.</p> <p>Vector:    A vector has to be in the format<code>(x;y;z)</code>. This system will use the players relative coordinate system. This means that the vectors x axis is right / left from the players head, the y axis is up or down from where ever the players face is and the z axis is before / behind the players face. It will move along the players  head.</p> Visual Explanation <p>In contrast to their global counterparts, relative x,y,z axes do not change their orientation relative to the player. Example: The positive x-axis will always point left from the perspective of the player.  </p> <p>This makes it possible to go crazy with sounds. Just one example: A halloween special where the player hears a  whispering into his left ear\u2014no matter where he is or how he turns his head... \ud83c\udf83</p> <p>Here is a small example:</p> Video Example <p>blue line = direction the player is looking in   \ud83d\udfe2 = soundlocation argument   \ud83d\udd34  = the actual location the sound is played at   soundplayeroffset = (0,0,5)</p> <p>   Sorry, your browser doesn't support embedded videos.  The sound is always played 5 block away from the soundlocation. The direction is however based on where the player is looking.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#suppress","title":"Suppress","text":"<p>Does not output any sound or text \ud83d\udd15. Can be used to remove built-in notifications.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#categories","title":"Categories","text":"<p>Notify Categories are pre-defined NotifyIO settings. They can be applied to any notify event and are used by BetonQuest's built-in notifications. All categories must be defined in a section called <code>notifications</code>.</p> <p>Warning</p> <p>A note about the <code>notifications</code> section: BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one <code>notifications</code> section. We will improve this in BQ 2.0.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#custom-categories","title":"Custom Categories","text":"<p>Custom categories are user defined presets for any notify event. They shorten your events and enable you to change how a notification of a certain category looks in one central place. They do not allow you to set a message though as  the message is an argument of the notify event! </p> <p>This is how a custom category looks: <pre><code>notifications:\n  money:            # Category name\n   io: advancement  # Set's the used NotifyIO\n   icon: gold_ingot # A setting of the bossbarIO\n</code></pre></p> <p>The only thing you must be careful with is the name of your custom categories. You could end up using a reserved name - these stem from BetonQuest's build-in notification categories. Changing these is a different feature. A full list of all reserved names can be found below.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-IO%27s-%26-Categories/#built-in-categories","title":"Built-in Categories","text":"<p>The table below contains all build-in notification categories.</p> <p>You may notice that the \"Categories\" column lists two categories. These work exactly like the one in the <code>notify</code> event. The first existent category (from left to right) will be used. This allows you to change all build-in notifications with just two entries in your notifications section: <pre><code>notifications:\n  info:\n    io: actionbar\n  error:\n    io: actionbar\n</code></pre> You can override the settings from the info/error category for any specific notification by adding it to the  <code>notifications</code> section. Example: <pre><code>notifications:\n  info:\n    io: actionbar\n  error:\n    io: actionbar\n  new_journal_entry:  # The info categories settings are overridden for the new_journal_entry notification\n    io: subtitle\n</code></pre></p> Notifications Categories Command Blocked command_blocked, error No Permission no_permission, error Inventory Full Backpack inventory_full_backpack, inventory_full, error Inventory Full Drop inventory_full_drop, inventory_full, error Language Changed language_changed, info Money Given money_given, info Money Taken money_taken, info Quest Cancelled quest_cancelled, info Items Given items_given, info New Journal Entry new_journal_entry, info Conversation blocked busy, error Notifications Categories Animals to Breed animals_to_breed, info Blocks to Break blocks_to_break, info Blocks to Place blocks_to_place, info Mobs to click mobs_to_click, info Mobs to Kill mobs_to_kill, info Fish to catch fish_to_catch, info Players to kill players_to_kill, info Potions to brew potions_to_brew, info Points given point_given, info Points taken point_taken, info Points multiplied point_multiplied, info Sheep to shear sheep_to_shear, info"},{"location":"Documentation/Visual-Effects/Notifications/Notification-Settings/","title":"Settings","text":"<p>BetonQuest features a powerful notify system that allows you to display any information to your players. You can freely choose between many NotifyIO's like simple chat output, (sub)titles, advancements or sounds. They all come with unique options that allow you to customize them. Just take a look at this example configuration:</p>    Sorry, your browser doesn't support embedded videos."},{"location":"Documentation/Visual-Effects/Notifications/Notification-Settings/#sending-custom-notifications","title":"Sending custom notifications","text":"<p>A truly custom notification can be sent using the <code>notify</code> event at any time. Check out the events documentation to learn how.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-Settings/#changing-betonquests-built-in-notifications","title":"Changing BetonQuest's built-in notifications","text":""},{"location":"Documentation/Visual-Effects/Notifications/Notification-Settings/#general-notifications","title":"General notifications","text":"<p>These can be anything from BetonQuest notifying a player that their language has been changed to sending a notice about a new changelog to an admin.</p> <p>For example:   When BetonQuest fails to add a quest item to a player's inventory it will send <code>&amp;e*&amp;bYour inventory is full!&amp;e*</code>.   This message is defined in messages.yml along with other default plugin messages. You can redefine them to your liking.</p> <p>The Notify System can do much more than just changing messages, though:</p> <p>All notifications will be displayed using the ChatIO and without a sound by default. You need to use notification categories to change this behaviour. These categories are pretty much just pre-defined NotifyIO settings.   Each notification in messages.yml has a special category with a reserved name assigned to it.</p> <p>For example, If you would like to have the \"language_changed\" notification displayed as an actionbar message, you define the following:</p> <pre><code>notifications:        #General header for all notification settings\n  language_changed:   #Name of the category, same as in messages.yml\n    io: actionbar     #Setting the Notify IO to \"actionbar\"\n</code></pre> <p>Warning</p> <p>A note about the <code>notifications</code> section: BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one <code>notifications</code> section. We will improve this in BQ 2.0.</p> <p>You can add any other Notify IO setting to the category like so: <pre><code>notifications:       \n  language_changed:   \n    io: actionbar     \n    sound: entity.blaze.hurt  #Plays a sound while showing the notification\n\n  changelog: #This is another category. They all need to be inside the 'notifications:' section.\n    sound: entity.experience_orb.pickup      \n</code></pre> A full list of all reserved names can be found on the IO's &amp; Categories page.</p> <p>This feature can be used to disable build-in notifications:   Just set <code>io:</code> to <code>supress</code> for any notification that you want to remove.</p>"},{"location":"Documentation/Visual-Effects/Notifications/Notification-Settings/#objective-notifications","title":"Objective notifications","text":"<p>Some objectives have a <code>notify</code> argument that can be added to their instruction. If you do so, the objective will send a notification to the player if they progress in the objective. You can also add an interval (<code>notify:5</code>) - in this case the player will get a notification every 5 steps towards the completion of the objective.</p> <p>The messages.yml values of these notifications look a bit strange: <pre><code>blocks_to_break: '&amp;2{1} blocks left to break'\n</code></pre> <code>{1}</code> is just an internal variable (similar to the color codes) that will be replaced with a number based on the player's progression.</p> <p>You can customize how these notifications are displayed using exactly the same method as for other built-in notifications.</p>"},{"location":"Downloads/","title":"Downloads","text":""},{"location":"Downloads/#release-builds","title":"Release Builds","text":"<p>Loading latest Release-Build...</p> Show all Release-Builds <p> </p>"},{"location":"Downloads/#development-builds","title":"Development Builds","text":"<p>Development builds are available for testing purposes. They are not recommended for production use.</p> <p>Only builds newer than the latest release are shown here.</p> <p>Loading latest Development-Build...</p> Show all Development-Builds <p> </p>"},{"location":"Participate/Donating-Money/","title":"Donate Money","text":"<p>We are part of the non-profit Open Source Collective! This means all donations must be re-invested into the project. Thanks you for making this project possible!</p> <p>Donations will be used for our monthly costs (server, domain, software licences) and developer commissions to speed up the development. </p> <p></p>"},{"location":"Participate/Donating-Money/#our-community-sponsors","title":"Our Community Sponsors","text":""},{"location":"Participate/Overview/","title":"How can I help BetonQuest?","text":"<ul> <li> <p> Donate Money</p> <p>Help us pay development commissions and operating expenses like server and domain costs.</p> <p> Donate Money </p> </li> <li> <p> Feedback and Ratings</p> <p>If you found a bug within BetonQuest,  or have an idea to make it better, please let us know!  Also consider rating the plugin. </p> </li> </ul>"},{"location":"Participate/Overview/#work-with-us-on-betonquest","title":"Work with us on BetonQuest","text":"<ul> <li> <p> Write better Documentation or Tutorials</p> <p>Please follow our detailed Contributing Guide to obtain a local working environment.   There is a dedicated chapter about our documentation tooling and guidelines.</p> </li> <li> <p> Write Code and add new Features </p> <p>Please follow our detailed Contributing Guide to obtain a local working environment.   A good starting point should be the API documentation.</p> </li> <li> <p> Write Translations </p> <p>Crowdin is our translation platform.  It is easier to use than GitHub, as you don't need to know how to use Git.  You can find the project here.</p> </li> </ul>"},{"location":"Participate/Setup-Project/","title":"Setup Project","text":"<p>The BetonQuest Organisation recommends IntelliJ (Community Edition) as the IDE (Integrated Development Environment). The advantage of using IntelliJ is that this guide contains some steps and the project contains some files that help to fulfill our requirements regarding code and documentation style. You can still use your preferred IDE, but then you need to check on your own that your changes fulfill our requirements.</p>"},{"location":"Participate/Setup-Project/#installing-intellij","title":"Installing IntelliJ","text":"<p>First download IntelliJ and install it.</p>"},{"location":"Participate/Setup-Project/#check-out-the-repository","title":"Check out the repository","text":"<p>You need a Git installation to be able to check out code from GitHub. You can follow this guide if you don't know how to install Git.  </p> <p>Then you should fork the BetonQuest repository to your own account on GitHub. If you want to also work on the Docs Tutorials, you should also fork the Quest-Tutorials repo.</p> <p>After you have set up the IDE, clone the BetonQuest repository from your account. You can also directly clone the repository in IntelliJ.</p> You want to clone the entire repo including the submodules from the get-go? <p>Append <code>--recurse-submodules</code> to your clone command. Make sure you have created all necessary forks before and don't forget to add the remotes for the submodule.</p> In case videos and images are missing after cloning <p>We use Git LFS to store big files like media files, so you need to install that too. Once you have executed the file that you downloaded from the Git LFS website, just run <code>git lfs install</code>. Then use <code>git lfs pull</code> to actually download the files.</p> In case the folder <code>docs/_tutorials</code> is empty <p>You need to initialize the git submodule by running <code>git submodule update --init</code> in the project's root directory.</p>"},{"location":"Participate/Setup-Project/#adding-remote-repository","title":"Adding remote repository","text":"<p>In IntelliJ click on <code>Git</code> in the left upper corner (hidden in the burger menu) and then <code>Manage Remotes...</code>. In the new window you already see a remote called <code>origin</code>. This remote is your fork of BetonQuest. Now add a new repository with the name <code>upstream</code> and the url <code>https://github.com/BetonQuest/BetonQuest.git</code>.</p> <p>In case you also forked the Quest-Tutorials repository, you should also add a remote <code>upstream</code> for <code>https://github.com/BetonQuest/Quest-Tutorials</code>. With that setup, you should always automatically be in the remote branch of Quest-Tutorials you are in BetonQuest.</p>"},{"location":"Participate/Setup-Project/#intellij-settings","title":"IntelliJ settings","text":"<p>Formatting for .md (Markdown) files can break some features of Material for MkDocs, so we disable it for these files. Go to <code>File/Settings/Editor/Code Style</code> then go to the <code>Formatter</code> tab and add <code>*.md</code> to the <code>Do not format:</code> field.</p> <p>In IntelliJ go to <code>File/Settings/Tools/Actions on Save</code> and check the following entries:</p> <ul> <li>Reformat code - Whole file</li> <li>Optimize imports</li> <li>Rearrange code</li> <li>Run code cleanup</li> </ul> <p>In <code>File/Settings/Editor/Code Style/Java</code> navigate to the <code>Imports</code> tab. You will now configure when to use star imports, in general we don't want them at all, but there are some exceptions. Set <code>Class count to use import with '*':</code> and <code>Names count to use static import with '*':</code> to <code>9999999</code>. And under <code>Packages to Use Import with '*'</code> configure the following:</p> Static Package With Subpackages org.mockito.ArgumentMatchers org.junit.jupiter.api.Assertions org.mockito.Mockito <p>Now we enable some automatic checks, when you commit things, that ensures everything is fine. In the <code>Commit</code> tab click on the  icon near the <code>Amend</code> checkbox. Check the following entries under <code>Before Commit</code>:</p> <ul> <li>Reformat Code</li> <li>Rearrange Code</li> <li>Optimize Imports</li> <li>Analyze Code</li> <li>Check TODO (Show All)</li> </ul>"},{"location":"Participate/Setup-Project/#building-the-plugin-jar","title":"Building the Plugin jar","text":"<p>You can build the plugin with Maven. Sometimes, IntelliJ auto-detects that BetonQuest is a Maven project. You can see a \"Maven\" tab on the right side of the editor if that's the case. Otherwise, do this: First, open the \"Project\" tab on the left site. Then right-click the <code>pom.xml</code> file in the projects root folder.  Select \"Add as Maven Project\". </p> <p>At this point it is always recommended to run <code>./mvnw verify</code> to check if the software builds fine before making any changes. To build the BetonQuest jar, you also run <code>./mvnw verify</code>. You can do this from the command line or use IntelliJ's <code>Maven</code> tab (double-click on <code>BetonQuest/Lifecycle/verify</code>). You can then find a <code>BetonQuest.jar</code> in the newly created folder <code>/target/artifacts</code>.</p>"},{"location":"Participate/Setup-Project/#build-speed-up","title":"Build speed up","text":"<p>As BetonQuest has a lot of dependencies, the build can take a long time, especially for the first build. By default, the build speed up is only enabled when running Maven from the command line, but not when using IntelliJ. To enable it, go to <code>File/Settings/Build, Execution, Deployment/Build Tools/Maven</code> and check <code>Use settings from .mvn/maven.config</code>.</p>"},{"location":"Participate/Setup-Project/#build-on-start","title":"Build on Start","text":"<p>The first build of a day can take a while, because every version gets re-checked once every day. This is the reason, why an automatic build on startup reduces the time of following builds. It is really worth it to set it up. In IntelliJ navigate to <code>File/Settings/Tools/Startup Tasks</code> click on the <code>Add</code> button and click <code>Add New Config</code>. Now select <code>Maven</code>, set a <code>Name</code> like <code>BetonQuest Resolve Dependencies</code> and write <code>dependency:resolve</code> into the field <code>Command line</code>. Then confirm with <code>Ok</code> twice. Now after starting IntelliJ the <code>BetonQuest Resolve Dependencies</code> task should run automatically.</p>"},{"location":"Participate/Setup-Project/#building-the-documentation","title":"Building the Documentation","text":"<p>Make sure Python3 is installed on your local system and added to the PATH environment variable. The Python installer allows you to do so with a checkbox called something like \"Add Python to environment variables\".</p> In case you are a Material for MkDocs insider (paid premium version) <p>You need to set two environment variables to be able to build the docs with MkDocs Material insiders.  </p> <p>Set <code>MKDOCS_MATERIAL_INSIDERS</code> to your license key to be able to install the indiders version.</p> <p>When you want to see the insiders version on serve, you need to set <code>MKDOCS_MATERIAL_INSIDERS_ENABLED</code> to <code>true</code>.</p> <p>Under Windows you can set environment variables with <code>setx VARIABLE_NAME VALUE /M</code> in the terminal. Now you need to restart IntelliJ for the changes to take effect. </p> <p>Install all other dependencies by entering <code>python docs/setup-docs-dependencies.py</code> in the terminal on the project's root directory.</p>"},{"location":"Participate/Setup-Project/#see-your-changes-live","title":"See your changes live","text":"<p>Run this command in IntelliJ's integrated terminal (at the bottom) to create a docs preview in your browser:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then visit 127.0.0.1:8000 to make sure that everything works.</p>"},{"location":"Participate/Setup-Project/#next-steps","title":"Next Steps","text":"<p>You can now continue by Creating a new Branch, before you start changing Code or Docs.</p>"},{"location":"Participate/Misc/Versioning-and-Releasing/","title":"Versioning and Releasing","text":""},{"location":"Participate/Misc/Versioning-and-Releasing/#versioning","title":"Versioning","text":"<p>BetonQuest follows the Semantic Versioning specification.</p> <p>We adapt the specification with these version types:</p> <ul> <li><code>1.12.0</code> for git version tags <code>v*</code> (in the official repository)</li> <li><code>1.12.0-DEV-1</code> for commits to <code>main</code> or branches called <code>main_v*</code> (in the official repository)</li> <li><code>1.12.0-DEV-ARTIFACT-5522</code> for commits to other branches (or repos) and Pull requests</li> <li><code>1.12.0-DEV-UNOFFICAL</code> for local builds</li> </ul> <p>Only use the three digits(Major, Minor, Patch) to specify versions in files like the pom.xml. All suffixes are set by the build-pipeline.</p> <p>The officially distributed jar does not contain the version in its name due to limits with the server update mechanism. Therefore, it's named <code>BetonQuest.jar</code>. The version can only be seen ingame by using <code>/q version</code>.</p>"},{"location":"Participate/Misc/Versioning-and-Releasing/#releasing","title":"Releasing","text":"<p>This project has a custom build-pipeline that utilizes GitHub('s) actions.</p>"},{"location":"Participate/Misc/Versioning-and-Releasing/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Check out the remote branch or commit, that you want to use for the release. Make sure that the current version in all the files (pom.xml etc.) is the correct version that should be used for the release. You will need a bash shell later on (e.g. Git Bash). Additionally, a Maven installation is required and must be added to the path. Optionally GitHub-CLI can be installed to enable features like automatic Pull Request creation and release date fetching.</p>"},{"location":"Participate/Misc/Versioning-and-Releasing/#step-2-build-a-release","title":"Step 2: Build a release","text":"<p>Run the script <code>./.github/scripts/release.sh</code> using some sort of bash shell (e.g. Git Bash) from the root dir of the project. It guides you through the creation of the release and prepares the next version. If you run into errors you may need to do the script's release steps manually or fix the script / your setup. </p>"},{"location":"Participate/Process/Create-a-new-Branch/","title":"Create a new Branch","text":"<p>A new branch should always be created from an up to date <code>main</code> branch. That's why you added the BetonQuest repository <code>upstream</code>. Now click on the <code>branch</code> menu from git in the top left corner of IntelliJ IDEA. Then you click on <code>upstream/main</code> and click on <code>New Branch from 'upstream/main'...</code>. Now give the branch a name that describes the changes you want to make and click <code>CREATE</code>.</p> <p></p> <p>A full guide on Managing Git Branches can be found in the IntelliJ IDEA documentation.</p>"},{"location":"Participate/Process/Create-a-new-Branch/#next-steps","title":"Next Steps","text":"<p>Now you are ready to make your changes! Either change Docs or Code, depending on your skills.</p>"},{"location":"Participate/Process/Maintaining-the-Changelog/","title":"Maintaining the Changelog","text":"<p>Before you make a commit, you should keep in mind, that you need to add a changelog entry.</p> <p>We have 6 categories in the CHANGELOG.md file for each version. These are general rules:</p> <ul> <li>Write user-friendly entries - they are the ones that read the changelog after all.</li> <li>Do not repeat the heading for individual entries  <pre><code>Added:\n  * added new conversation style: Hologram\n  * new conversation style: Hologram\n</code></pre></li> <li>Mark events, objectives etc. names with <code>`</code> around them.</li> </ul> <p>Here is a breakdown of what belongs in each section:</p> Added <p>Do not write what class or file was added, describe the feature you added.</p> <pre><code>Added:\n  - event `teleport` allows teleportation of players\n  - Citizens event `movenpc` makes it possible to let a NPC walk to a specific location\n</code></pre> Changed <p>Give qualified information that indicates what the user may have to be aware of. Do not write <code>event x has now argument y</code> - that is a new feature and belongs to <code>Added</code>. Only add to this section if there are changed behaviours.</p> <pre><code>Changed:\n  - event `teleport` now first checks if another plugin canceled the event\n  - german translations have been updated\n</code></pre> Deprecated <p>List things that have been marked for removal. Also mention possible replacements.</p> <pre><code>Deprecated:\n  - event `message` will be deleted, use the `notify` event instead\n  - Minecraft recently replaced material ids with namespaces. Update your items accordingly, ids will stop working soon \n</code></pre> Removed <p>After something has been marked for removal in the category <code>Deprecated</code> it will end up here eventually. Repeat possible replacements.</p> <pre><code>Removed:\n  - `message` event, use the `notify` event instead\n  - old material syntax, use material namespaces instead\n</code></pre> Fixes <p>Solved bugs are listed in this category. Let the users know what the bug did, so they know if they were affected. Mention if the fix changed a behaviour.</p> <pre><code>Fixes:\n  - event `notify` did not resolve variables correctly\n  - Citizens event `movenpc` is now more robust combined with other events like `stopnpc` and `teleportnpc`\n    - you may need to reduce the distance beetween waypoints\n</code></pre> Security <p>If there was a security issue, you write it down here. It's nearly the same as the category <code>Fixes</code>. But if something can be abused to effect server security or performance,  you keep the way how it can be abused secret. DO NOT LEAK EXPLOITABLE SECURITY ISSUES!</p> <pre><code>Security:\n  - the take event is now threadsafe\n  - a deadlock in conversations was fixed\n</code></pre>"},{"location":"Participate/Process/Maintaining-the-Changelog/#next-steps","title":"Next Steps","text":"<p>Continue with Submitting Changes if all your changes are finished. But maybe you are not finished yet, and you want to go back to change Code or Docs.</p>"},{"location":"Participate/Process/Submitting-Changes/","title":"Submitting Changes","text":"<p>The last step of the contributing process is to submit your changes. This is done via a pull request on GitHub.  A pull request basically is asking us to pull your changes into our codebase. Let's create one!</p>"},{"location":"Participate/Process/Submitting-Changes/#push-your-changes","title":"Push your changes","text":"<p>The first step is to push your changes to your fork on GitHub. You can do this using IntelliJ's Git integration.</p>"},{"location":"Participate/Process/Submitting-Changes/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>There are three ways to create a pull request:</p> <ol> <li> <p>If you recently pushed to your fork, you see a <code>Create Pull Request</code> hint on our    repository page.</p> </li> <li> <p>You can go to the Pull Request page on our repository and click on    <code>New Pull Request</code>. But then you need to click on <code>Compare across Forks</code> and then select your <code>Head Repository</code>.</p> </li> <li> <p>You can also click on <code>New Pull Request</code> in your fork, then it already compares it to the BetonQuest repository.</p> </li> </ol> <p>Now give the pull request a short but meaningful title. Then add a description that indicates what you added, removed or changed. If there are related issues, link them with the keyword <code>Closes #issue-id-here</code>, so the issue is automatically closed when the pull request is merged.</p>"},{"location":"Participate/Process/Submitting-Changes/#checklist","title":"Checklist","text":"<p>The list below contains typical requirements that you need to fulfill, and we check during the review. Here are some things you should check by your own:</p> <p>Please make sure that you fulfill these requirements. Did you...</p> ... run Maven verify? <p>The most basic check is Maven Verify. Run it in you IDE and make sure it succeeds!</p> ... solve all TODOs? <p>You shouldn't have any TODOs in your code because it indicates that your code is not finished. Unfinished code is not added to the plugin. Let's see what to do with different types of TODOs / comments:</p> <ul> <li><code>FIXME</code>: Delete it -&gt; Fix it or open an issue on GutHub. </li> <li><code>DEPRECATED</code>: Delete it -&gt; Deprecate with <code>@Deprecated</code> and document it in the Javadocs.</li> <li><code>Auto-generated code</code>: Delete it.</li> <li><code>NOT IMPLEMENTED</code>: Delete it -&gt; Implement or leave empty.</li> </ul> ... remove any commented out code? <p>We use the version control system Git - it will remember any code. So don't even start committing commented out code.</p> ... add debug messages? <p>In general, BetonQuest already has a lot of debug messages. So normally you do not need to add anything. It may be beneficial for new or complicated things.</p>"},{"location":"Participate/Process/Submitting-Changes/#reviewers-checklist","title":"Reviewer's Checklist","text":"<p>The following list is included in the PullRequest template, do not click any of these boxes on GitHub, we will do that. </p> <p>Please make sure that you fulfill these requirements. Did you...</p> ... test your changes? <p>Always test your changes in-game! Keep in mind, that there could be some special case in your code that needs to be tested specifically.</p> ... increment the version? <p>You may need to increment the version number in the <code>pom.xml</code> file. Read more about the  versioning process.</p> ... update the changelog? <p>Don't forget to add a changelog entry for every change you made. Read maintaining the changelog for more information.</p> ... update the documentation? <p>You need to adjust the documentation everytime you changed, added or removed any feature. Remember: Things that  aren't documented don't exist to the user. There can also be other reasons why you should update the documentation, like writing a new tutorial or adjusting a bad example.</p> ... adjust the ConfigPatcher? <p>For the <code>config.yml</code> check out the ConfigPatcher. For quest files, this is currently not relevant. We are working on a new updater.</p> ... clean the commit history? <p>You did multiple commits, that look like <code>progress fixing the bug</code>? Or you did a commit with a wrong description?  </p> <p>Then you now need to do an <code>Interactive Rebase</code>. This changes the commit history. Here is the general git documentation for changing the history. But if you use IntelliJ, you should read edit Git project history.  </p> <p>In case you don't understand, read this guide that explains, why and how you clean the commit history.</p>"},{"location":"Participate/Process/Submitting-Changes/#submit-your-pull-request","title":"Submit your Pull Request","text":"<p>Now click on <code>Create Pull Request</code> to submit your request. </p> <p>If you want to share work-in-progress changes to get early feedback, create a \"draft pull request\". Click on the arrow next to <code>Create Pull Request</code> and then select <code>Create draft Pull Request</code>. This indicates, that this pull request is not finished, and you can click on <code>Ready for review</code> once you are ready.</p> <p>Congrats, you are done! Thank you for contributing! </p> <p>Keep an eye out for reviews of your pull request.</p>"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/","title":"Adding a Dependency","text":""},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#requirements","title":"Requirements","text":"<p>You can only add support for plugins that have a public API. This means Maven must be able to resolve the dependency  from an online repository. Adding dependencies from you local hard-drive is NOT allowed as this stops everyone from  building the plugin.</p>"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#adding-a-new-repo","title":"Adding a new repo","text":"<p>Open up the pom.xml file located in the project's folder. Check if the new dependencies' repository already exists in our  list of repositories. If that's the case, search for the dependency block related to that repository - there are comments above these blocks indicating that.</p> <p>If there is no such repository tag, add it. New repository tags need to be added in this format: <code>betonquest-&lt;repoName&gt;-repo</code>. Then add a new dependency block for that repository. There needs to be a comment above that dependency block that indicates which repository holds this dependency. Take a look at the other blocks for guidance.</p>"},{"location":"Participate/Process/Code/Adding-a-new-Dependency/#setting-up-the-mirror-for-the-new-repo","title":"Setting up the mirror for the new repo","text":"<p>We have configured our Maven project to speed our builds up using mirror repositories. When adding new repositories we need to add them as mirrors to our Maven repository. As long as they are not added, your local Maven build will fail. We will add the repository as a mirror when you open your pull request on GitHub.  </p> <p>However, to test your changes you need to compile.  Therefore, you need to bypass the mirrors so your dependency will be downloaded from the original repository. There are three ways do this:</p> <p>The first option is to temporarily add the following to the <code>mirrorOf</code> entry in the file <code>.mvn/settings.xml</code>. This allows Maven to find the new repo as it is excluded from our mirror repo. <pre><code>      &lt;mirrorOf&gt;*,!betonquest-repoName-repo&lt;/mirrorOf&gt;\n</code></pre></p> <p>Second option, you add the following to the command line when executing Maven to disable our mirrors. <pre><code>-DskipProjectSettings=true\n</code></pre></p> <p>Third option, you ask us on GitHub (Issue or PullRequest) to add the new repository to our mirrors.</p>"},{"location":"Participate/Process/Code/Checking-Requirements/","title":"Checking Requirements","text":""},{"location":"Participate/Process/Code/Checking-Requirements/#fulfil-the-contributing-requirements","title":"Fulfil the Contributing Requirements","text":"<p>Run <code>./mvnw verify</code> before Submitting Changes to check if your change meets the project's requirements regarding code style and quality. GitHub Actions (automated code check on GitHub) will also verify these requirements when you open the pull request.</p> <p>If any requirements are not met, <code>./mvnw verify</code> will fail with this log message: <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n</code></pre> IntelliJ may also show something like <code>Failed to execute goal</code>. Here's a guide how to fix any requirement violations:</p> NullAwayPMDSpotBugsCheckStyleEditorConfig <p>Visit the NullAway Page for general info.  NullAway checks for null pointer exceptions. NullAway's errors look like compilation errors: <pre><code>[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n</code></pre> If you have this message you also have messages, that looks like this right after the above message: <pre><code>[ERROR] /C:/Users/gabri/IdeaProjects/BetonQuest/src/main/java/org/betonquest/betonquest/Backpack.java:[575,41] [NullAway] dereferenced expression name is @Nullable (see http://t.uber.com/nullaway )\n</code></pre> If you only read this without understanding what we try to enforce here, you may be a bit lost. Therefore, you should understand that we try to avoid <code>null</code> completely. To achieve this, by default everything is annotated with <code>@NotNull</code>, disallowing <code>null</code> values. If you want to allow <code>null</code> values, you have to annotate the field or method with <code>@Nullable</code>. With this knowledge, you may understand the error a bit better, but if not give it a read in the NullAway documentation.</p> <p>Visit the PMD Page for general info.  PMD mainly checks for code smells. PMD's errors look like this: <pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.14.0:check (default) on project betonquest: You have 1 PMD violation.\n</code></pre> If you have this message you also have messages, that looks like this: <pre><code>[INFO] PMD Failure: org.betonquest.betonquest.BetonQuest:143 Rule:AvoidLiteralsInIfCondition Priority:3 Avoid using Literals in Conditional Statements.\n</code></pre> If you read this, you may know what is wrong. If you don't know why, visit the PMD page. Then you type in the rule e.g. <code>AvoidLiteralsInIfCondition</code> in the search bar and click on the rule. You will get a detailed description about what is wrong. If you still don't know how to solve it, ask the developers on Discord for help with PMD.</p> <p>Visit the SpotBugs Page for general info.  SpotBugs searches for additional problems, most of them are potential bugs. SpotBugs' errors look like this: <pre><code>Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.2:check (default) on project betonquest: failed with 1 bugs and 0 errors\n</code></pre> If your log contains such a message, it will also contain another message that looks like this: <pre><code>[ERROR] Medium: Null passed for non-null parameter of org.betonquest.betonquest.util.PlayerConverter.getPlayer(String) in org.betonquest.betonquest.BetonQuest.condition(String, ConditionID) [org.betonquest.betonquest.BetonQuest, org.betonquest.betonquest.BetonQuest] Method invoked at BetonQuest.java:[line 349]Known null at BetonQuest.java:[line 344] NP_NULL_PARAM_DEREF\n</code></pre> SpotBugs errors are a little complicated to read, but if you find e.g. <code>NP_NULL_PARAM_DEREF</code> at the end of the line you can simply search it on the SpotBugs page. If you have problems solving these kinds of issues you can ask on our Discord for help with SpotBugs.</p> <p>Visit the CheckStyle Page for general info.  CheckStyle checks the code formatting and style. We have only configured two checks. The first check is the import order, and the second check is that you do not use star imports, excepting some junit imports. There is only a basic check for the imports, and it looks like this: <pre><code>[ERROR] src/main/java/org/betonquest/betonquest/BetonQuest.java:[16,1] (imports) ImportOrder: Wrong order for 'edu.umd.cs.findbugs.annotations.SuppressFBWarnings' import.\n</code></pre> CheckStyle is very simple to read, normally it is in your language and self explaining. In the above error you can find e.g. <code>ImportOrder</code> and you can search on the CheckStyle page for it. If you need help solving an issue here, you can also ask us on our Discord for help with CheckStyle. </p> <p>Visit the EditorConfig Page for general info.  EditorConfig it natively supported by many IDEs and editors. It checks for some really basic formatting like brackets, line endings, indention and some more. EditorConfig violations look like this: <pre><code>[ERROR] There are .editorconfig violations. You may want to run\n[ERROR]     mvn editorconfig:format\n[ERROR] to fix them automagically.\n</code></pre> If your log contains such a message, it will also contain another message that looks like this if you want to solve it manual: <pre><code>[ERROR] src\\main\\java\\org\\betonquest\\betonquest\\BetonQuest.java@284,54: Delete 5 characters - violates trim_trailing_whitespace = true, reported by org.ec4j.linters.TextLinter\n</code></pre> We recommend running <code>./mvnw editorconfig:format</code> or use an IDE that support EditorConfig.</p>"},{"location":"Participate/Process/Code/Workflow/","title":"Changing Code","text":"<p>Make sure to set up the project before doing this step.  You should always create a new branch everytime you develop a new feature, fix a bug or make other changes.</p>"},{"location":"Participate/Process/Code/Workflow/#make-changes","title":"Make changes","text":"<p>Now go ahead and make your changes. Take a look at the sub-pages of this page for more information about specific topics. Then come back here to verify, commit and finally submit your changes.</p>"},{"location":"Participate/Process/Code/Workflow/#maven-verify","title":"Maven verify","text":"<p>After you made changes, you should also run <code>./mvnw verify</code> to check our requirements. If you have problems solving issues with our requirements there is also a page Checking Requirements, that you will probably read later.</p> Improve Build Speed <p>If <code>./mvnw verify</code> takes too long, and you just want a jar, you want to build without checking our requirements. You can execute <code>./mvnw package</code> instead of <code>./mvnw verify</code> for that. But don't forget, you need to successfully run <code>./mvnw verify</code>, before you make a pull request on GitHub!</p>"},{"location":"Participate/Process/Code/Workflow/#maven-profiles","title":"Maven profiles","text":"<p>There are some Maven profiles that you can use to change which tests are executed upon <code>./mvnw verify</code> and <code>./mvnw package</code>. Some profiles can be used to speed up the build time. However, you should always run <code>./mvnw verify</code> with no enabled profiles before making a pull request on GitHub.</p> <p>You can use the <code>Test-None</code> profile to speed up the build process by skipping all tests. This can be useful when rapidly developing and testing changes in game.  Run <code>./mvnw verify -PTest-None</code> or <code>./mvnw package -PTest-None</code> or activate the profile in your IDE's Maven tab on the right side.</p> <p>The <code>Test-All</code> profile will run all tests, even the ones that are normally skipped. This is not really recommended, but if you did lots of big changes that may affect the whole project, you can use this profile to make sure that everything is working. kRun <code>./mvnw verify -PTest-All</code>, <code>./mvnw package -PTest-All</code> or activate the profile in your IDE's Maven tab on the right side.</p> <p>There are more profiles, but you don't need to know them in most cases.</p> The other Profiles <p>There are other profiles prefixed with <code>Test-</code>. You can use them to select a specific scope of tests that you want to run, after changing code in that scope.</p> <p>There is also a profile <code>Skip-Verification</code>, that will skip all verifications. It is only used in the build pipeline to skip verifications that were already done in earlier pipeline steps.</p>"},{"location":"Participate/Process/Code/Workflow/#commit","title":"Commit","text":"<p>After you made changes, don't forget to run <code>./mvnw verify</code> again. You should also add a changelog entry at this point.</p> <p>You need to commit your changes once they are done. You can do this with IntelliJ's Git integration.</p> <p>Here are a few tips how to make good commits:</p> <p>A commit needs to be atomic which means it only contains changes that belong together. Large changes may also be split into multiple commits. This makes it easier to understand your changes.</p> <p>Example: Originally you just wanted to fix a bug, but you also cleaned the code of the class while doing so. Now you should separate these two (logically different) changes into two separate commits. With other words, don't mix up different changes.</p> <p>Another thing to keep in mind is the commit name and description. If you fixed a bug, don't write <code>fixed deadlock</code>. You should give more qualified information like <code>fixed deadlock, when a huge amount of conditons are cheked at the same time</code>. Also, you shouldn't write <code>cleaned the code</code>, instead you should write things like this <code>renamed methods and variables</code>.  </p>"},{"location":"Participate/Process/Code/Workflow/#next-steps","title":"Next Steps","text":"<p>If you also want to adjust the documentation switch to Changing Docs. Once you are done with all changes, continue with Maintaining Changelog In case you already did that: Continue with Submitting Changes.  </p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/","title":"Writing JUnit Tests","text":"<p>Here you can find a summary on how to write JUnit tests for BetonQuest. In order to understand this, you need to have basic knowledge of JUnit tests and mocking of objects and classes.</p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#introduction","title":"Introduction","text":"<p>It is a major goal to write JUnit tests for most parts of BetonQuest.</p> <p>There are things, where you definitely want as many tests as possible:</p> <ul> <li>API</li> <li>Utilities</li> <li>Internal application logic that is used by a bunch of other code</li> <li>Critical parts that can cause a lot of harm when bugged</li> </ul> <p>But there are also some parts, where we do not want tests at all:</p> <ul> <li>If a core API concept has many implementations, the implementations itself should not be tested</li> <li>Some parts of the code require a lot of Bukkit API mocking. If this takes too much time no tests are   necessary</li> </ul>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#naming-convention","title":"Naming Convention","text":"<p>We use <code>snake_case</code> for test method names. The name should be descriptive and readable as the IDE will use it to display the test results and the underscores will be replaced by spaces.</p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#handling-logging","title":"Handling Logging","text":"<p>See Logging for general information about BetonQuest's logging.</p> TestingLegacy Testing <p>You can mock the <code>BetonQuestLogger</code> directly.</p> <p>In case you need a <code>BetonQuestLoggerFactory</code> you must inject a <code>BetonQuestLogger</code> into the <code>SingletonLoggerFactory</code>. Then you can use this factory in your tests. It will always return the logger instance you injected. </p> <p>If you write a test for a legacy class that requires a <code>BetonQuestLogger</code> or a <code>BetonQuestLoggerFactory</code> you can use the <code>BetonQuestLoggerService</code> like so:</p> <p><pre><code>  @ExtendWith(BetonQuestLoggerService.class)\n  public class TestClass {\n</code></pre> Now you can easily obtain a <code>BetonQuestLoggerFactory</code>, a <code>BetonQuestLogger</code> and a static mock of the <code>BetonQuest</code> instance by adding them as parameters into the test method's signature. They will be automatically injected.</p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#logvalidator","title":"LogValidator","text":"<p>You can now add this optional argument to any test's method signature:</p> <pre><code>@ExtendWith(BetonQuestLoggerService.class)\npublic class TestClass {\n\n    @Test\n    public void testCustom(LogValidator validator) {\n</code></pre> <p>The <code>LogValidator</code> is created and passed to your method by the <code>BetonQuestLoggerService</code>. It makes it possible to assert that a log message has been logged in the silent parent logger. The simplest method is <code>assertLogEntry(Level level, String message)</code>, that you can use to check that the given message with the given level has been logged. You can also check that there are no additional log  messages in the <code>LogValidator</code> by calling <code>assertEmpty()</code>.</p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#advanced-features","title":"Advanced Features","text":"Obtaining the parent <code>Logger</code> and a <code>BetonQuestLogger</code> <p>You can also use these two additional arguments:</p> <pre><code>@ExtendWith(BetonQuestLoggerService.class)\n\npublic class TestClass {\n    @Test\n    public void testCustom(LogValidator validator, Logger logger, BetonQuestLogger log) {\n</code></pre> <p>The <code>logger</code> is the silent parent <code>Logger</code>.</p> <p>The <code>log</code> is a new instance of the <code>BetonQuestLogger</code> that you can use to log things during the test. This logger has a topic that can be accessed via <code>BetonQuestLoggerService.LOGGER_TOPIC</code>.</p>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#handling-bukkitscheduler","title":"Handling BukkitScheduler","text":"<p>If you want to test code that only works with the <code>BukkitScheduler</code>, we even have a ready to use solution for this. To use the <code>BukkitSchedulerMock</code> you need to create the following setup:</p> <pre><code>@Test\nvoid testMethod {\n    try (BukkitSchedulerMock scheduler = new BukkitSchedulerMock()) {\n        ...\n    }\n}\n</code></pre> <p>Now you can use the scheduler object for several things. First if you want to perform a single or multiple ticks, you can call the methods <code>performTick()</code> or <code>performTicks(long)</code>:</p> <pre><code>scheduler.performTick();\nscheduler.performTicks(20);\n</code></pre> <p>We also have a method that allows to get the number of ticks since the <code>BukkitSchedulerMock</code> was created.</p> <pre><code>scheduler.getCurrentTick();\n</code></pre> <p>There are some additional features of this scheduler:</p> <pre><code>scheduler.close(); //(1)!\nscheduler.waitAsyncTasksFinished(long); //(2)!\nscheduler.waitAsyncTasksFinished(); //(3)!\n</code></pre> <ol> <li>Shuts down the scheduler. Already called thanks to with \"try with resources\".</li> <li>Wait for all async tasks to finish.</li> <li>One second timeout.</li> </ol>"},{"location":"Participate/Process/Code/Writing-JUnit-Tests/#expanded-visibility-for-testing","title":"Expanded visibility for testing","text":"<p>Sometimes you need a method, class or field to be accessible for your JUnit tests but not for external code. Generally a good way to achieve this is using the default (package-local) access modifier instead of <code>private</code>. Of course the unit tests must be located in the same package for this to work.</p> <p>To clearly mark such elements, that are more widely visible than necessary only for use in test code,  the <code>@VisibleForTesting</code> annotation can be added. Make sure you import it from <code>org.jetbrains.annotations</code>, not from Google Commons or Apache.</p> <p>This will also suppress the PMD rule <code>CommentDefaultAccessModifier</code>  which requires you to add a <code>/* default */</code> or <code>/* package */</code> comment when using default access modifier.</p>"},{"location":"Participate/Process/Docs/Customizations/","title":"mkdocs Customizations","text":"<p>We run a customized version of mkdocs-material that allows for some additional features.</p>"},{"location":"Participate/Process/Docs/Customizations/#toc_depth-per-page","title":"toc_depth per page","text":"<p>You can set the maximum depth of the table of contents per page using the <code>toc_depth</code> variable in the page's metadata. Example<pre><code>---\ntoc_depth: 2\n---\n\n# Some Heading \nPage content here...\n</code></pre> This can be useful for large pages with many headings.  For example, it is used for the Integration List to hide the sub-headings of the individual integrations.</p>"},{"location":"Participate/Process/Docs/Customizations/#mkdocs-snippets","title":"mkdocs-snippets","text":"<p>We have written the mkdocs-snippets plugin to allow for the use of advanced snippets in our documentation. This allows us to include code snippets from other files in the documentation, while preserving links and indentation.</p>"},{"location":"Participate/Process/Docs/Guidelines/","title":"Guidelines","text":"<p>You need to follow these rules in order to contribute to the docs. They are important for a good user experience and provide a consistent baseline for other contributors to work with.</p>"},{"location":"Participate/Process/Docs/Guidelines/#line-length","title":"Line length","text":"<p>All lines must be wrapped after 121 character. You can exceed this limit by a few characters where reasonable. Tables and other special syntax are exempt from this rule.</p>"},{"location":"Participate/Process/Docs/Guidelines/#links","title":"Links","text":"<p>Links can be created using Markdown's link syntax:</p> <p><pre><code>Click the [highlighted words](Contributing.md).\n</code></pre> Result: Click the highlighted words.</p>"},{"location":"Participate/Process/Docs/Guidelines/#displaying-yaml-code","title":"Displaying (YAML) code","text":"<p>You must use code boxes with the specific language set in the header (<code>YAML</code> in this example). You also have to enable line numbers by adding the <code>linenums=\"1\"</code> argument.  Sometimes a setting a title using <code>title=\"Some Title\"</code> is also useful.  Example code<pre><code> ``` YAML linenums=\"1\" title=\"Codebox\"\n use: \"codeboxes for code\"\n ```\n</code></pre></p> <p>Result: Codebox<pre><code>use: \"codeboxes for code\"\n</code></pre></p>"},{"location":"Participate/Process/Docs/Guidelines/#referring-to-yaml-elements-in-written-text","title":"Referring to YAML elements in written text","text":"<p>An example of this would be to reference an event name in an explanation.</p> <pre><code>The event `someEvent` prints a message to the player!\n</code></pre> <p>Result: The event <code>someEvent</code> prints a message to the player!</p>"},{"location":"Participate/Process/Docs/Guidelines/#file-names","title":"File names","text":"<p>Replace all spaces in file and folder names with <code>-</code>!</p>"},{"location":"Participate/Process/Docs/Guidelines/#referring-to-file-names-in-written-text","title":"Referring to File Names in written text","text":"<p>File names in written text must be quoted and italic.</p> <p>Example: Open \"events.yml\" to add these new events.</p>"},{"location":"Participate/Process/Docs/Guidelines/#markdown-formatting-conventions","title":"Markdown Formatting Conventions","text":"<p>Unfortunately, there are different ways to format text in Markdown. Please use the syntax outlined here:</p>"},{"location":"Participate/Process/Docs/Guidelines/#bold","title":"Bold","text":"<p>Bold text is surrounded by two asterisks on each side: <code>**Bold text**</code></p>"},{"location":"Participate/Process/Docs/Guidelines/#italic","title":"Italic","text":"<p>Italic text is surrounded by one underscore on each side: <code>_Italic text_</code></p>"},{"location":"Participate/Process/Docs/Guidelines/#lists","title":"Lists","text":"<p>Lists must be declared as such:</p> <pre><code>* Top Level\n    - Second Level\n    - Second Level\n* Another Top level\n</code></pre> <p>Result:</p> <ul> <li>Top Level<ul> <li>Second Level</li> <li>Second Level</li> </ul> </li> <li>Another Top level</li> </ul>"},{"location":"Participate/Process/Docs/Principles/","title":"Fundamental Principles","text":"<p>A brief overview of basic documentation principles.</p> Strive for consistency. <p>Documentation should be as consistent as possible. This enables users to apply familiar structures (e.g. the structure of explanations) to new topics in the documentation.</p> Write for a global audience. <p>A global audience does not share the same cultural background. That's why you should avoid references to things that are unique to your culture. Example:</p> <ul> <li>The Australian summer season starts in december.</li> </ul> <p>This is also true for certain words or patterns in your language:</p> <ul> <li>Foo and Bar as synonyms for \"example words\" are likely unknown to non-native speakers and translation software.</li> </ul> <p>Take a look at the  Microsoft Style Guide for Global Communications to learn more.</p> Write for non-native speakers. <p>Users from all over the world will read this documentation. Most of them are not native speakers, some even use translators. Simple language should be used to make sure everyone can understand the documentation.</p> Write for beginners and masters alike. <p>Your audience contains people with all kinds of skill levels - this is true for both BetonQuest skills but also for general computer skills. Try to find common ground between these two. New users must still be able to understand your documentation while more experienced users shouldn't be bored by the same explanations over and over again.</p> <p>One great way to do this is by providing optional context through links to other pages.</p> Write documentation about features, not code. <p>Users will have a hard time understanding features that are explained in technical terms. Describe what a feature does not how it works. The same is true for feature names.</p>"},{"location":"Participate/Process/Docs/Workflow/","title":"Changing Docs","text":"<p>Make sure to set up the project before doing this step. You should always create a new branch everytime you write new documentation, fix something or make other changes.</p>"},{"location":"Participate/Process/Docs/Workflow/#live-preview","title":"Live Preview","text":"<p>Run this command in IntelliJ's terminal window (at the bottom) to start a live preview of the documentation. It will be available on 127.0.0.1:8000 by default.</p> <pre><code>mkdocs serve --livereload # (1)!\n</code></pre> <ol> <li><code>--livereload</code> is an optional argument that determines that only changed files will be re-build.    This drastically decreases build time. However, it may lead to inaccurate navigation within your site.    Serve without this argument to validate your changes once finished.</li> </ol> <p>You should work with the live preview as the documentation does not just contain plain markdown, there are many custom elements which are only visible in the preview. The preview updates whenever you click outside of IntelliJ or trigger a file save.</p> Hosting on your entire local network <p>You can also execute this variation to host the website in your local network. This can be useful for testing changes on different devices but is not needed for most tasks. Make sure the hosting device's firewall exposes the port 8000. <pre><code>mkdocs serve -a 0.0.0.0:8000\n</code></pre></p> <p>We use the Material for MkDocs theme for our documentation. Check their documentation to see all custom elements and features.</p>"},{"location":"Participate/Process/Docs/Workflow/#make-changes","title":"Make changes","text":"<p>Now go ahead and make your changes. Take a look at the sub-pages of this page for more information about how to write good documentation or tutorials. Then come back here to commit and submit your changes.</p>"},{"location":"Participate/Process/Docs/Workflow/#commit","title":"Commit","text":"<p>You need to commit your changes once they are done. You can do this with IntelliJ's Git integration.</p> <p>Here are a few tips how to make good commits:</p> <p>All docs-only commits need to be prefixed with <code>[DOCS]</code>. This helps to distinguish them from technical commits that have a very similar name. Additionally, commit names should be short. If needed, provide more detail in the description.</p> <p>A commit needs to be atomic which means it only contains changes that belong together. Large changes may also be split into multiple commits. This makes it easier to understand your changes.</p> <p>Example: Originally you just wanted to fix a spelling mistake, but you also added more examples to a different part  of the documentation while doing so. Now you should separate these two (logically different) changes into two separate commits. With other words, don't mix up different changes.</p>"},{"location":"Participate/Process/Docs/Workflow/#next-steps","title":"Next Steps","text":"<p>If you also want to adjust the code switch to Changing Code. If you already made code changes you should continue with Maintaining Changelog.</p> <p>Otherwise, please continue with Submitting Changes.  </p>"},{"location":"Participate/Process/Docs/Writing-Tutorials/","title":"Writing Tutorials","text":"<p>All tutorials must follow this structure. An example for a tutorial series, that conforms to this standard, can be found in our documentation.</p> <p>Whenever the tutorial refers to downloadable examples, the <code>/bq download</code> feature is meant. It downloads quest from our Quest Tutorials repository.</p>"},{"location":"Participate/Process/Docs/Writing-Tutorials/#tutorial-structure","title":"Tutorial Structure","text":""},{"location":"Participate/Process/Docs/Writing-Tutorials/#intro","title":"Intro","text":"<ul> <li>Goal of this tutorial (What is the feature?)</li> <li>Requirements</li> <li>Skills from previous tutorials</li> <li>Installed plugins</li> <li>A (downloadable) setup</li> <li>Related docs (documentation of the covered features)</li> </ul> Example"},{"location":"Participate/Process/Docs/Writing-Tutorials/#content","title":"Content","text":"<p>It's recommended to split a tutorial into mulitple logical steps. Ideally, once a step has been completed by the user, they should be able to try it out ingame. A step consists of:</p> <ul> <li>Goal / What and why are we going to do?</li> <li>Instruction / How to do it?</li> <li>Explanation / How does the config / feature work? This is tightly coupled with the instruction, e.g. using code block annotations.</li> <li>(Optional) Downloadable Sample Solution / What to do if it does not work?</li> </ul> <p>Sometimes it may not be practical to provide a downloadable solution for every step.  Since these downloadable solutions should always contain the progress from previous steps, they can also be provided in a later step.</p> Example <p></p>"},{"location":"Participate/Process/Docs/Writing-Tutorials/#outro","title":"Outro","text":"<ul> <li>Downloadable Sample Solution for the entire setup</li> <li>Summary on what the user learned</li> <li>Where to find more information about this feature (Reference &amp; Backlinks, may overlap with the intro's \"Related Docs\")</li> <li>What's next? (Only needed if in a tutorial series)</li> </ul> Example"},{"location":"Participate/Process/Docs/Writing-Tutorials/#download-commands","title":"Download Commands","text":"<p>Whenever you want to provide a downloadable example, you can use the <code>/bq download</code> command. But when you do, always replace the git reference with the placeholder <code>${ref}</code>.  This would then look like this: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conversations/1-DirectoryStructure /tutorialQuest overwrite\n</code></pre></p>"},{"location":"Tutorials/Overview/","title":"Welcome to the Tutorials","text":"<p>This documentation provides you with a large number of high quality tutorials that will make you a great quest writer.</p> <p>Help is never far away if you get stuck. We have a Discord  for questions.</p> <ul> <li> <p> Basic Tutorial</p> <p>Learn all BetonQuest basics and build your first questline! </p> <p> Getting started</p> </li> <li> <p> Syntax</p> <p>Learn more about the details of BetonQuest's syntax: Quest Packages,  Templates and more.</p> <p> Syntax</p> </li> <li> <p> More to come</p> <p>Additional tutorials and examples are being worked on. Stay tuned!</p> <p> Help us by donating</p> </li> </ul>"},{"location":"Tutorials/Features/Tracking-Quest-Progress/Overview/","title":"Overview","text":"<p>This is the section where we will talk about tracking a quest progress in different ways. In our opinion it is very important for a good quest/mechanic or whatever comes in mind. After you have done the tutorials you will understand how to \"save\" progress and let players continue at a specific  state.</p>"},{"location":"Tutorials/Features/Tracking-Quest-Progress/Overview/#tracking-quest-progress","title":"Tracking Quest Progress...","text":"<ul> <li> <p> ...with Tags</p> <p>Learning how to use tags is helpful in every way!</p> <p> Tags Tutorial</p> </li> <li> <p> ...with Points</p> <p>Using points is a very nice way to keep track of amounts and progress.</p> <p>Coming soon...</p> </li> <li> <p> ...with Stages</p> <p>You don't want to handle with points? Stages will solve the problem and is easy to configure!</p> <p>Coming soon...</p> </li> </ul>"},{"location":"Tutorials/Features/Tracking-Quest-Progress/Tags/","title":"Tags","text":"<p>Tags can be a great solution to add various \"checkpoints\" if you have small quests or mechanics. With  tags and their conditions, you can give your quests the necessary polish so that players do not have to start over  or repeat tasks. Tags can do much more, but in this tutorial, we will focus only on how to track quest progress  using them.</p> <p>Requirements</p> <p>It is helpful to be familiar with the basics of conditions and understand the underlying principles in order to comprehend and apply this tutorial.</p> <ul> <li>Conditions Tutorial</li> </ul> <p>Related Docs</p> <ul> <li>Conditions Reference</li> <li>Condition Tag</li> </ul>","tags":["Quest-Progress","Tracking","Tags"]},{"location":"Tutorials/Features/Tracking-Quest-Progress/Tags/#1-creating-the-folder-structure-for-the-example-quest","title":"1. Creating the folder structure for the example quest","text":"<p>Add a new structure for the example quest in the <code>QuestPackage</code> folder. The name could be \"questTracking\" for example.</p> <p>The file structure should look like this:</p> <ul> <li> questTracking<ul> <li> package.yml</li> <li> events.yml</li> <li> conditions.yml</li> <li> conversations<ul> <li> joe.yml</li> <li> bonny.yml</li> <li> fren.yml</li> </ul> </li> </ul> </li> </ul> Download the files for this tutorial <p>Instead of manually creating / filling the files, just download them using the command below: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Advanced/Tracking-Quest-Progress/1-ExampleQuest /trackingTutorial overwrite\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/questTracking\"</p> <p>After you have created all the necessary files, we will begin to fill our conversation files with some small talk. If you already downloaded it with the download command above you can skip this part.</p> <p>In this tutorial, we will create three NPCs that you have to talk to, and with tags, we will prevent you  from talking to the same NPC repeatedly. We will also configure the second and third NPC so that you can only talk  to them after you have introduced yourself to the first NPC.</p> bonny.ymljoe.ymlfren.ymlpackage.yml <pre><code>conversations:\n  Bonny:\n    quester: \"Bonny\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey Stranger! You look new to me. Can you introduce yourself?\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you %player%. Please also introduce yourself to Joe and Fren and come back when \n        you've done it!\"\n    player_options:\n      introduce:\n        text: \"I am %player%\"\n        pointer: \"niceToMeetYou\"\n</code></pre> <pre><code>conversations:\n  Joe:\n    quester: \"Joe\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player% Bonny already told me about you! Nice to have you here in our town.\"\n</code></pre> <pre><code>conversations:\n  Fren:\n    quester: \"Fren\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player%. Already know you because bonny told me about you and that you're new here!\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you tho! I really like new people in our town!\"\n    player_options:\n      introduce:\n        text: \"That's correct!\"\n        pointer: \"niceToMeetYou\"\n</code></pre> <pre><code>npcs:\n  '1': \"Joe\"\n  '2': \"Bonny\"\n  '3': \"Fren\"\n</code></pre> <p>Now that we have our basic conversations we need to add tags to it otherwise you could talk to any NPC at any time and we want to prevent that to get a nice feeling conversation with these NPCs.</p>","tags":["Quest-Progress","Tracking","Tags"]},{"location":"Tutorials/Features/Tracking-Quest-Progress/Tags/#2-adding-conditions-to-the-conversations","title":"2. Adding conditions to the conversations","text":"<p>We are now adding conditions to the conversations to prevent the player having the same conversation over and over  again and to make sure that you can only talk to the Fren and Joe after you get the task to meet those.</p> <p>First we add events to the correct part of the conversation where the tag should be added and in order to that we  will add this events with the corresponding conditions to our events/conditions sections.</p> <p>Highlighting</p> <p>Every line/word that is highlighted in blue is new to the file! </p> bonny.ymljoe.ymlfren.ymlevents.ymlconditions.yml <pre><code>conversations:\n  Bonny:\n    quester: \"Bonny\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey Stranger! You look new to me. Can you introduce yourself?\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you %player%. Please also introduce yourself to Joe and Fren and come back when \n        you've done it!\"\n    player_options:\n      introduce:\n        text: \"I am %player%\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagIntroducedToBonny\"\n</code></pre> <pre><code>conversations:\n  Joe:\n    quester: \"Joe\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player% Bonny already told me about you! Nice to have you here in our town.\"\n        events: \"addTagMetJoe\"\n</code></pre> <pre><code>conversations:\n  Fren:\n    quester: \"Fren\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player%. Already know you because Bonny told me about you and that you're new here!\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you tho! I really like new people in our town!\"\n    player_options:\n      introduce:\n        text: \"That's correct!\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagMetFren\"\n</code></pre> <pre><code>events:\n  addTagIntroducedToBonny: \"tag add introducedToBonny\"\n  addTagMetJoe: \"tag add metJoe\"\n  addTagMetFren: \"tag add metFren\"\n</code></pre> <pre><code>conditions:\n  introducedToBonny: \"tag introducedToBonny\"\n  metJoe: \"tag metJoe\"\n  metFren: \"tag metFren\"\n</code></pre> <p>Now that we have written the events and conditions it's important to actually add the condition tags to the  conversations and also add some more conversation so that it makes more sense. This will make the magic work!</p> <p>Tip</p> <p>I always start by writing the events into the conversation options. Once the event is written, I proceed to write it in  the events section to ensure that the event actually exists. After that, I ask myself: What do I need for the event? Do I still need to write a condition or an objective for it? If you proceed systematically like this, you will make significantly fewer mistakes.</p> bonny.ymljoe.ymlfren.yml <pre><code>conversations:\n  Bonny:\n    quester: \"Bonny\"\n    first: \"finishedTask,askingForProgress,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey Stranger! You look new to me. Can you introduce yourself?\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you %player%. Please also introduce yourself to Joe and Fren and come back when \n        you've done it!\"\n      askingForProgress:\n        text: \"Hey %player% I think you don't have met them all yet.. Come back when you are ready!\"\n        conditions: \"!metJoe,!metFren,introducedToBonny\" #(1)!\n      finishedTask:\n        text: \"You have met Joe and Fren! We are all there for you if you need something!\"\n        conditions: \"metJoe,metFren\" #(2)!\n    player_options:\n      introduce:\n        text: \"I am %player%\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagIntroducedToBonny\"\n</code></pre> <ol> <li> <p>metJoe and metFren are the conditions that you need to negotiate because we want them to be met. We  also need introducedToBonny otherwise the conversation starts before the <code>firstGreeting</code> option. Thats  because the metXXX tags are true when negotiated.</p> </li> <li> <p>Both conditions must be true metJoe and metFren in order to activate this conversation. We also add  this conversation to <code>first</code>.</p> </li> </ol> <pre><code>conversations:\n  Joe:\n    quester: \"Joe\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player% Bonny already told me about you! Nice to have you here in our town.\"\n        events: \"addTagMetJoe\"\n        conditions: \"introducedToBonny\" #(1)!\n</code></pre> <ol> <li>This conditions will be added to prevent the player from talking with the NPC before he not introduced  himself to Bonny first.</li> </ol> <pre><code>conversations:\n  Fren:\n    quester: \"Fren\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player%. Already know you because Bonny told me about you and that you're new here!\"\n        pointer: \"introduce\"\n        conditions: \"introducedToBonny\" #(1)!\n      niceToMeetYou:\n        text: \"Nice to meet you tho! I really like new people in our town!\"\n    player_options:\n      introduce:\n        text: \"That's correct!\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagMetFren\"\n</code></pre> <ol> <li>This conditions will be added to prevent the player from talking with the NPC before he not introduced  himself to Bonny first.</li> </ol> <p>After we have added the conditions and events to the conversations and files we can now test it in-game! You can now only talk to Fren and Joe after you introduced yourself to Bonny.</p> Is the example not working? <p>Get the correct configs by running the following command. This will overwrite any changes (including NPC ID's and locations) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial.    <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Features/Tracking-Quest-Progress/2-HalfExample /trackingTutorial overwrite\n</code></pre></p>","tags":["Quest-Progress","Tracking","Tags"]},{"location":"Tutorials/Features/Tracking-Quest-Progress/Tags/#3-complete-the-introduction-quest-optional","title":"3. Complete the introduction quest (optional)","text":"<p>We will now add some events and condition tags to round up the quest feeling. After we talked to the Fren  and Joe, Bonny always would say the same. We can prevent that also adding a condition tag here. Let us have a look:</p> bonny.ymljoe.ymlfren.ymlevents.ymlconditions.yml <pre><code>conversations:\n  Bonny:\n    quester: \"Bonny\"\n    first: \"startMainQuest,finishedTask,askingForProgress,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey Stranger! You look new to me. Can you introduce yourself?\"\n        pointer: \"introduce\"\n      niceToMeetYou:\n        text: \"Nice to meet you %player%. Please also introduce yourself to Joe and Fren and come back when \n        you've done it!\"\n      askingForProgress:\n        text: \"Hey %player% I think you don't have met them all yet.. Come back when you are ready!\"\n        conditions: \"!metJoe,!metFren,introducedToBonny\"\n      finishedTask:\n        text: \"You have met Joe and Fren! We are all there for you if you need something!\"\n        conditions: \"metJoe,metFren\"\n        events: \"addTagIntroducedToEveryone\"\n      startMainQuest:\n        text: \"Now I could need your help! Would you mind bringing me XXX?\"\n        conditions: \"introducedToEveryone\"\n        events: #(1)!\n        pointer: #(2)!\n    player_options:\n      introduce:\n        text: \"I am %player%\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagIntroducedToBonny\"\n</code></pre> <ol> <li> <p>You can now continue your main quest here with whatever you want. Maybe with a pointer to another  conversation or a event to start something.</p> </li> <li> <p>You can now continue your main quest here with whatever you want. Maybe with a pointer to another  conversation or a event to start something.</p> </li> </ol> <pre><code>conversations:\n  Joe:\n    quester: \"Joe\"\n    first: \"mainConversation,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player% Bonny already told me about you! Nice to have you here in our town.\"\n        events: \"addTagMetJoe\"\n        conditions: \"introducedToBonny\"\n      mainConversation:\n        text: \"Very nice to see you again! I dont have any tasks for you at the moment\"\n        conditions: \"metJoe\"\n</code></pre> <pre><code>conversations:\n  Fren:\n    quester: \"Fren\"\n    first: \"mainConversation,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hey %player%. Already know you because Bonny told me about you and that you're new here!\"\n        pointer: \"introduce\"\n        conditions: \"introducedToBonny\"\n      niceToMeetYou:\n        text: \"Nice to meet you tho! I really like new people in our town!\"\n      mainConversation:\n        text: \"You again! I dont have anything to do for you! Come back later.\"\n        conditions: \"metFren\"\n    player_options:\n      introduce:\n        text: \"That's correct!\"\n        pointer: \"niceToMeetYou\"\n        events: \"addTagMetFren\"\n</code></pre> <pre><code>events:\n  addTagIntroducedToBonny: \"tag add introducedToBonny\"\n  addTagMetJoe: \"tag add metJoe\"\n  addTagMetFren: \"tag add metFren\"\n  addTagIntroducedToEveryone: \"run ^tag add introducedToEveryone ^tag delete metFren,metJoe\" #(1)!\n</code></pre> <ol> <li>We suggest to remove unnessecary tags and only have the needed ones active.</li> </ol> <pre><code>conditions:\n  introducedToBonny: \"tag introducedToBonny\"\n  metJoe: \"tag metJoe\"\n  metFren: \"tag metFren\"\n  introducedToEveryone: \"tag introducedToEveryone\"\n</code></pre> Download this part of the tutorial <p>Enter this command in the chat to download this part of the tutorial:    <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Features/Tracking-Quest-Progress/3-FullExample /trackingTutorial overwrite\n</code></pre></p>","tags":["Quest-Progress","Tracking","Tags"]},{"location":"Tutorials/Getting-Started/About/","title":"About the \"Getting Started\" Section","text":"<p>Welcome to BetonQuest! </p> <p>The plugin has tons of features and therefore requires some learning. The \"Getting Started\" section will teach you the very basics of BetonQuest. At first, you will:</p> <ol> <li> Set up a local test server for quest development</li> <li> Install Visual Studio Code for editing quests</li> <li> Learn all BetonQuest basics by creating a questline</li> </ol> <p>Additionally, there are many more tutorials that you can do later on.</p> <p>If you get stuck at any point, do not hesitate to ask for help in the Discord.</p> <p> Let's get started by setting up your test server!</p>"},{"location":"Tutorials/Getting-Started/Basics/Conditions/","title":"Conditions","text":"<p>Now that you know how to give the player tasks using objectives, it is time to learn about conditions.  These are another essential building blog of quests as they allow you to create different outcomes based on the player's actions. This works by attaching conditions to any conversation, event or objective. For example, you could have a conversation option that is only available if the player has a certain item in their inventory.</p> <p>In this tutorial, you will learn how to create and use conditions!</p> <p>Requirements</p> <ul> <li>Conversations Tutorial</li> <li>Events Tutorial</li> <li>Objectives Tutorial</li> </ul> <p>Related Docs</p> <ul> <li>Conditions Reference</li> <li>Conditions List</li> </ul> <p>Download Tutorial Setup</p> <p> Don't do this if you already have the configs of the previous tutorial step. </p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conditions/1-DirectoryStructure /tutorialQuest\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#1-creating-the-folder-structure-for-your-first-condition","title":"1. Creating the folder structure for your first condition","text":"<p>Add a new file to your \"tutorialQuest\" <code>QuestPackage</code> named \"conditions.yml\". The file structure should look like this now:</p> <ul> <li> tutorialQuest<ul> <li> package.yml</li> <li> events.yml</li> <li> objectives.yml</li> <li> conditions.yml</li> <li> conversations<ul> <li> jack.yml</li> <li> blacksmith.yml</li> </ul> </li> </ul> </li> </ul> <p>We now have our file structure in place and can begin creating conditions!</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#2-defining-your-first-condition","title":"2. Defining your first condition","text":"<p>Now that we've created it, open \"conditions.yml\" and add the following content:</p> conditions.yml<pre><code>conditions: # (1)!\n  isDay: \"time 6-18\"\n</code></pre> <ol> <li>All conditions must be defined in a section called <code>conditions</code>.</li> </ol> <p>So, what are we looking at here?</p> <ul> <li><code>isDay</code> is the name of a condition. You can name it whatever you want to. It is recommended to name   it after what it should check.</li> <li>The Condition Instruction:<ul> <li><code>time</code>: The first value in the instruction is always the condition type.</li> <li><code>6-18</code>: This is an option of the <code>time</code> condition. It defines the timespan in which the condition is true. In this    case, it is true from 6am to 6pm.</li> </ul> </li> </ul> <p>Now we've created your first condition that checks if a specific game time is set on the server. Save the file and continue with the next step!</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#3-checking-the-condition-in-game","title":"3. Checking the condition in-game","text":"<p>You can check conditions if they are true or false in-game.</p> <p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.</p> <p>Running a command is the simplest way to accomplish this:</p> <p>Enter <code>/bq condition NAME tutorialQuest.isDay</code> on the server. This command will show you the result \"false\" or \"true\" depending on what time it is. During day time, the result will show true. In the nighttime it will be false.</p> <p>Tip</p> <p>Change the world time using the <code>/time set day</code> and <code>/time set night</code> commands.    This will allow you to test your conditions in-game.</p> Command Part Meaning <code>/bq conditions</code> Tells BetonQuest that some conditions should be checked if true or false. <code>NAME</code> A player's name. <code>tutorialQuest</code> The name of a QuestPackage. This is required because you could have events with the same name in different packages. <code>isDay</code> The name of the condition to check. Don't forget to separate it with a dot from the package <code>tutorialQuest.isDay</code>. Is the example not working? <p>Get the correct configs by running the following command.</p> <p> This will overwrite any changes (including NPC ID's and locations) you have made to the example.</p> <p>Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conditions/2-FirstCondition /tutorialQuest overwrite\n</code></pre></p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#4-integrating-conditions-into-objectives","title":"4. Integrating conditions into objectives","text":"<p>Conditions can be added to objectives to limit the player's ability to progress and complete the objective. The objective will only progress when the condition is \"true\". In this case, we want to achieve that the player is only able to make progress when he's fishing at night. Let's add the condition <code>isDay</code> to the objective:</p> <p>objectives.yml<pre><code>objectives:\n  fishingObj: \"fish COD 3 hookLocation:100;63;100;world range:20 events:caughtAllFish conditions:!isDay\"\n</code></pre> We can see multiple things here:</p> <ul> <li> <p><code>conditions:</code> - this option works on all objectives. Multiple conditions can be added if seperated by comma    (<code>conditions:con1,con2,con3</code>). </p> </li> <li> <p>The exclamation mark (<code>!</code>) in front of a condition inverts it. That means that a condition that is \"true\" will be   received as \"false\" and the other way around. This must be set per condition if multiple conditions are in use    (<code>conditions:!con1,!con2,!con3</code>).</p> </li> <li>Remember that our condition is configured to check if it is daytime (<code>6-18</code>).     We need to invert the <code>isDay</code> condition because we want to make progress when it is night.     Now the condition will return \"true\" if it's nighttime (<code>23-2</code>).</li> </ul> <p>Make these changes, reload and test!</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#5-integrating-conditions-into-conversations","title":"5. Integrating conditions into conversations","text":"<p>Conditions can be used in conversations to control the available <code>player_options</code>. This is a powerful feature for creating complex conversations with multiple answers.</p> <p>For example, the current dialog with the NPC Jack can be repeated infinitely. The player will always obtain more food. This is not what we want.    </p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#51-making-jack-only-give-food-once","title":"5.1. Making Jack only give food once","text":"<p>To solve this problem we need to create an alternative path for the conversation. It must only be shown if the player has obtained the food.  To do so, we will create an event to give the player a \"tag\" and add a condition to the conversation.</p> <p>We will start with a tag condition:</p> conditions.yml<pre><code>conditions:\n  isNight: \"time 6-18\"\n  hasReceivedFood: \"tag foodReceived\"\n</code></pre> <p>What is a tag?</p> <p>A tag is a label that can be added to a player. It is a simple way to store permanent information about the player. Later on, you will learn more about them in another tutorial.</p> <p>This tag condition is \"true\" if the player has the defined tag. Let's break it down:</p> <ul> <li><code>hasRecivedFood</code>: The name of the condition. You can name it whatever you want to. It is recommended to name   it after what it should check.</li> <li>The Condition Instruction:<ul> <li><code>tag</code>: The first value in the instruction is always the condition type.</li> <li><code>foodReceived</code>: This is the name of the tag that the player must have.</li> </ul> </li> </ul> <p>Tags can be assigned to a player using events. Let's create an event that gives the player the tag:</p> events.yml<pre><code>events:\n  # Other events not shown\n  addFoodReceivedTag: \"tag add foodReceived\"\n</code></pre> <p>Tip</p> <p>If you don't understand why we created the event in the <code>events</code> section, you should go back to the events tutorial and read carefully!</p> <p>We are now ready for the next step: Adding the condition and event to the conversation.</p> <p>Open up your <code>jack.yml</code> file in the conversations folder and add the event to give the tag to a player and the condition to not repeat the specified part of the conversation.</p> jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"alreadyReceivedFood,firstGreeting\" #(1)!\n\n    NPC_options:\n      firstGreeting: #(2)!\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\"\n      # Other NPC_options not shown\n      foodAnswer:\n        text: \"You're welcome! Take it... &amp;7*gives food*\"\n        events: \"giveFoodToPlayer,addFoodReceivedTag\" #(3)!\n        pointer: \"thankYou\"\n        conditions: \"!hasReceivedFood\"\n      alreadyReceivedFood:\n        text: \"Hey %player%! I think I already gave you your welcome food...\"\n        conditions: \"hasReceivedFood\"  #(4)!\n        pointer: \"saySorry\"\n      # Other NPC_options not shown\n\n    player_options:\n      # Other player_options not shown\n      saySorry:\n        text: \"You are right. Thanks again!\"\n        pointer: \"townTour\"\n      # Other player_options not shown\n</code></pre> <ol> <li>This option checks all possible starting points for the conversation from left to right.    The first option that the player matches the conditions for will be used. The conditions can be found down in the    <code>NPC_options</code>. If the player matches none of the conditions, the conversation will not start.        In this case, if the player meets the condition <code>hasRecivedFood</code>, they will start at the <code>alreadyReceivedFood</code> option.</li> <li>This option will be shown if no other option matches the conditions.    This is because this option has no conditions and is the last option in the <code>first</code> list.</li> <li>These events will be executed if the player chooses the <code>foodAnswer</code> option. It will give the player the food and the    tag <code>foodReceived</code>.</li> <li>This condition ensures that the player will only see the <code>alreadyFoodReceived</code> option if he has the tag <code>foodReceived</code>.</li> </ol> <p>As you can see, we also added new options to it. Now the NPC will say that you already received the food and won't give you more!</p> <p>Note about testing</p> <p>If you want to test this conversation again, you need to remove the tag from the player. You can do this by using the <code>/bq tag remove &lt;player&gt; &lt;tag&gt;</code> command.</p> Is the example not working? <p>Get the correct configs by running the following command.</p> <p> This will overwrite any changes (including NPC ID's and locations) you have made to the example.</p> <p>Linking NPCs to conversations is explained in the basics tutorial.    <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conditions/3-ConditionsInConversations /tutorialQuest overwrite\n</code></pre></p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#52-limiting-the-town-tour-as-well","title":"5.2. Limiting the town tour as well","text":"<p>The same problem exists with the town tour. The player can do it over and over again. Try to fix it on your own  using the method you just learned.</p> Solution <p>Get the correct configs by running the following command. This will overwrite any changes (including NPC ID's and locations) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conditions/4-JackCompleted /tutorialQuest overwrite\n</code></pre></p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#53-making-the-blacksmith-only-trade-the-armor-once","title":"5.3. Making the Blacksmith only trade the armor once","text":"<p>The blacksmith conversation suffers from a similar problem. There is no way to get the reward, the conversation will  start over and over again. Let's fix that!</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#531-preparing-the-conversation","title":"5.3.1 Preparing the conversation","text":"<p>Let's add some dialog for when the player has accepted the quest but not completed it yet: blacksmith.yml<pre><code>conversations:\n  Blacksmith:\n    quester: \"Blacksmith\"\n    first: \"alreadyStarted,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        # Other player_options not shown\n      alreadyStarted:\n        text: \"Come back to me if you caught all the fish!\"\n        conditions: \"hasStartedFishing\"\n    player_options:\n      # Other player_options not shown\n      accept:\n        text: \"Sure! I could use a new armour.\"\n        event: \"startFishingObj,addStartedFishingTag\"\n        pointer: \"goodLuck\"\n      # Other player_options not shown\n</code></pre></p> <p>As usual, we need to add the condition to the \"conditions.yml\". We will also add a condition to check if the player has the required amount of cod in their inventory. We can do so with an <code>item</code> condition.</p> <p>conditions.yml<pre><code>conditions:\n  isNight: \"time 6-18\"\n  hasRecivedFood: \"tag foodReceived\"\n  hasDoneTour: \"tag tourDone\"\n  hasStartedFishing: \"tag startedFishing\"\n  hasFishInInv: \"item cod:3\"\n  hasDoneQuest: \"tag questDone\"\n</code></pre> Additionally, we must add the new events as well.  Those remove three cod from the player's inventory and add a tag for completing the quest.</p> events.yml<pre><code>events:\n  # Other events not shown\n  addStartedFishingTag: \"tag add startedFishing\"\n  addQuestDoneTag: \"tag add questDone\"\n  takeFishFromPlayer: \"take cod:3\"  \n</code></pre> <p>Now let's use all these new elements to finish up the conversation.</p> <p>Note that we check the <code>hasFishInInv</code> twice in the dialog. This prevents players from cheating by dropping the items once the starting option is determined. If they do so, the conversation will simply end without giving out any items.</p> blacksmith.yml<pre><code>conversations:\n  Blacksmith:\n    quester: \"Blacksmith\"\n    first: \"questDone,caughtAllFish,alreadyStarted,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        # Other player_options not shown\n      caughtAllFish:\n        text: \"Oh let me see! Amazing.. Can I have them?\"\n        pointer: \"agree\"\n        conditions: \"hasFishInInv\"\n      giveFishToBlacksmith:\n        text: \"Thank you very much and here is the promised armour!\"\n        pointer: \"seeYouSoon\"\n        events: \"takeFishFromPlayer,addQuestDoneTag\"\n        conditions: \"hasFishInInv\" #(1)!\n      goodbye:\n        text: \"It was nice to meet you! I hope we will see us soon again. Goodbye\"\n      questDone: \n        text: \"Nice to see you again %player%!\" #(2)!\n        conditions: \"hasDoneQuest\"\n    player_options:\n      # Other player_options not shown\n      deny:\n        text: \"I dont have time right now.\"\n        pointer: \"maybeLater\"\n      agree:\n        text: \"Of course! Take em.\"\n        pointer: \"giveFishToBlacksmith\"\n      seeYouSoon:\n        text: \"That was a pleasure! See you soon...\"\n        pointer: \"goodbye\"\n</code></pre> <ol> <li>This is the cheat protection we talked about earlier. If the player drops the items, the conversation will end.</li> <li>Some dialog for when the player has already completed the quest.</li> </ol>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#532-handing-out-the-armor","title":"5.3.2 Handing out the armor","text":"<p>Now add an event to reward the player on your own. Tip: You must use the <code>give</code> event to hand out items that are defined in the <code>items</code> section of your \"package.yml\" file.</p> SPOILER: Solution package.yml<pre><code>items:\n  # Other items not shown\n  ironHelmet: \"IRON_HELMET\"\n  ironChestplate: \"IRON_CHESTPLATE\"\n  ironLeggings: \"IRON_LEGGINGS\"\n  ironBoots: \"IRON_BOOTS\"\n</code></pre> events.yml<pre><code>events:\n  # Other events not shown\n  rewardPlayer: \"give ironBoots,ironChestplate,ironLeggings,ironHelmet\"\n</code></pre> blacksmith.yml<pre><code>giveFishToBlacksmith:\n  text: \"Thank you very much and here is the promised armour!\"\n  pointer: \"seeYouSoon\"\n  events: \"takeFishFromPlayer,addQuestDoneTag,rewardPlayer\"\n  conditions: \"hasFishInInv\"\n</code></pre> Is the example not working? <p>Get the correct configs by running the following command.</p> <p> This will overwrite any changes (including NPC ID's and locations) you have made to the example.</p> <p>Linking NPCs to conversations is explained in the basics tutorial.    <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conditions/5-FullExample /tutorialQuest overwrite\n</code></pre></p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#6-conditions-in-events","title":"6. Conditions in Events","text":"<p>In this section, you will learn how to use conditions in events. This is handy when you want to block an event from triggering because some conditions for the players are not met.</p> <p>We will temporarily create a tag condition called <code>receiveNotify</code> in the \"conditions.yml\" like so:</p> conditions.yml<pre><code>conditions:\n  receiveNotify: \"tag receiveNotify\"\n</code></pre> <p>We will now create an event to test our recently created condition. For testing purposes, we will use a notify event:</p> events.yml<pre><code>events:\n  notifyPlayer: \"notify You completed the quest! io:Title sound:firework_rocket conditions:receiveNotify\"\n</code></pre> <p>Let's break it down:</p> <ul> <li><code>notifyPlayer</code>: The name of the event.</li> <li><code>notify</code>: The event type - notify events are used to send notifications to the player.</li> <li><code>You completed the quest!</code>: The message of the notification.</li> <li><code>io:Title</code>: The message will be displayed as a title.</li> <li><code>sound:firework_rocket</code>: The message will be accompanied by a firework sound.</li> <li><code>conditions:receiveNotify</code>: The event will only trigger if the condition <code>receiveNotify</code> is met. This argument      works for all events.</li> </ul> <p>You can see that the notify event uses a condition. This means the player is only able to receive the notification if they have the tag.  Save, reload and execute the command in the game to test how it works!</p> <p>You can test it with this BetonQuest command: <pre><code>/bq event PLAYERNAME tutorialQuest.notifyPlayer\n</code></pre> Nothing should happen because the player doesn't have the <code>receiveNotify</code> tag.</p> <p>Now run the following command and then try the command from above again. <pre><code>/bq tag PLAYERNAME add tutorialQuest.receiveNotify\n</code></pre> You should now see the notification on your screen!</p> <p>You can also manually delete a tag using  <pre><code>/bq tag PLAYERNAME del tutorialQuest.receiveNotify`.\n</code></pre> This is very helpful when you are testing your quest and want to reset the player's progress.</p> <p>If you like, you could add the event to your blacksmith conversation. Make sure to remove the condition from the event's instruction. There is no use for it in this quest, but the notify event is a good example to show how to use conditions in events. </p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conditions/#summary","title":"Summary","text":"<p>You've learned what conditions are and how to they are used in objectives, conversations and events. More conditions can be found in the conditions list.</p>","tags":["Conditions-Tutorial"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/","title":"Conversations","text":"<p>In this tutorial, you will learn the basics of the conversations. These allow you to create a dialog between the player and a NPC. Therefore, these are the basic tool for story telling.</p> <p>Requirements</p> <ul> <li>Setup Guide</li> </ul> <p>Related Docs</p> <ul> <li>Conversations</li> </ul> <p>Download Tutorial Setup</p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conversations/1-DirectoryStructure /tutorialQuest overwrite\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#1-linking-a-conversation-to-a-npc","title":"1. Linking a conversation to a NPC","text":"<p>Usually, conversations happen between a NPC and the player.  Therefore, we need to create the <code>npcs</code> section in the package.yml so that the plugin knows which Citizens NPC uses which conversation. This is how it works:</p> <p>package.yml<pre><code>npcs:\n  '1': \"Jack\"\n</code></pre> This links the NPC with the given Citizens ID (<code>1</code>) to the conversation with the given identifier (<code>Jack</code>). Save the file after editing.</p> How to create a Citizens NPC? Where do I find the NPC's ID? <p>Execute this command if you haven't created an NPC yet: <code>/npc create Jack</code> This will show you the ID of the newly created NPC.</p> <p>If you already have one, do this:    </p> <ol> <li>Stay close to the NPC who's ID you want.</li> <li>Type the command <code>/npc select</code> to select the nearest NPC.</li> <li>Type the command <code>/npc id</code> to get the ID from the selected NPC.</li> </ol>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#2-creating-your-first-conversation","title":"2. Creating your first conversation","text":"<p>It's time to create the first conversation with Jack! This chapter will teach you the basic structure of a conversation.</p> <p>Let's take a look at how a conversation is defined in the plugin's files:</p> <p>Tip: Click the plus buttons next to the text for explanations! </p> jack.yml<pre><code>conversations:\n  Jack: # (1)!\n    quester: \"Jack\" # (2)!\n    first: \"firstGreeting\" # (3)!\n    NPC_options: # (4)!\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\" # (5)!\n\n    player_options: # (6)!\n      whereYouFrom:\n        text: \"First I want to know who you are!\"\n</code></pre> <ol> <li>This is the identifier of the conversation. Make sure this equals the conversation identifier in \"package.yml\". </li> <li>Defines the name that is displayed during the conversation.</li> <li>Defines which <code>NPC_option</code> should be used as the start of the conversation.</li> <li>This section contains everything the NPC says.</li> <li>Defines which <code>player_option</code> is shown next. </li> <li>This section contains everything the player says.</li> </ol> <p>A BetonQuest conversation is a cycle of responses between the NPC and the player. Anything the NPC says is called <code>NPC_options</code>, everything the player answers is called <code>player_options</code>.</p> <p>A conversation always starts with an <code>NPC_option</code>.  Now the player must answer the NPC using a <code>player_option</code>.</p> <p>Options point to each other using the <code>pointer</code> argument. In the case of an NPC_option, the pointer argument would contain the name of a <code>player_option</code>.  Usually, a player has more than one answer to choose from. This is done by adding multiple <code>player_option</code> names to a <code>NPC_option</code>.</p> <p>After the player responded, they are shown another <code>NPC_option</code> that the previously chosen <code>player_option</code> points to.</p> <p>Whenever either a <code>player_option</code> or a <code>NPC_option</code> point to no other option the conversation ends as there are no more   responses or answers.</p> <p>The Conversation Cycle</p> <pre><code>graph LR\nX{Conversation Starts} --&gt; C\nC[First NPC_option] --&gt; A\nA[player_option] --&gt; |Pointer|B[NPC_option];\nB --&gt; |Pointer|A;\nA -.No pointer present .-&gt; D\nB -.No pointer present .-&gt; D\nD{Conversation Ends}</code></pre>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#3-trying-the-conversation-ingame","title":"3. Trying the Conversation ingame","text":"<p>You can easily check if your quest is working on the server. Open the file \"jack.yml\" in the \"conversations\" folder. Copy the above conversation into it and save the file.</p> <p>Now type <code>/bq reload</code> in the chat and right-click the NPC.</p> <p>You can select the answer by pressing the jump key (Space by default).</p>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#4-conversations-with-multiple-choices","title":"4. Conversations with multiple choices","text":"<p>Let's see how to create multiple responses for the player to choose from using the <code>pointer</code> argument.</p> <p>A <code>NPC_option</code> can point to multiple player options at the same time. As soon as a pointer argument contains more than one <code>player_option</code>, the player can choose.</p> <p>Tip: Highlighted lines in blue are new compared with the previous example. </p> jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\"\n      whoAmI:\n        text: \"I am &amp;6Jack&amp;r. The mayor of this beautiful town. We have some big farms and good old taverns well worth checking out! So now where are you from?\"\n        pointer: \"smallIsland,bigCity\" # (1)!\n      islandAnswer: \n        text: \"That sounds familiar! I grew up in a small town with few people. So we already have something in common! Do you want something to eat?\"\n      cityAnswer: \n        text: \"Oh I know! I think you're from Kayra, right? Nice city but to be honest I prefer country life... You look a bit hungry. Do you want something to eat?\"\n\n    player_options:\n      whereYouFrom: \n        text: \"First I want to know who you are!\"\n        pointer: \"whoAmI\" \n      smallIsland: # (2)!\n        text: \"From a small island located east.\"\n        pointer: \"islandAnswer\" # (4)!\n      bigCity:  # (3)!\n        text: \"From a big city located west.\"\n        pointer: \"cityAnswer\" # (5)!\n</code></pre> <ol> <li>This <code>NPC_option</code> points to multiple <code>player_options</code>. This allows the player to choose. The names of the <code>player_options</code> must be comma seperated.</li> <li>The <code>whoAmI</code> <code>npc_option</code> points to me.</li> <li>Gets pointed on by the <code>whoAmI</code> <code>npc_option</code>.</li> <li>Points to the <code>islandAnswer</code> <code>NPC_option</code>.</li> <li>Points to the <code>cityAnswer</code> <code>NPC_option</code>.</li> </ol> <p>With these changes, the mayor asks the player where he is from. The player can either say that they are from a <code>smallIsland</code> or from a <code>bigCity</code>. This creates two different paths through the conversation. </p>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#5-joining-conversation-paths","title":"5. Joining conversation paths","text":"<p>Let's join these paths again to show the same ending: Add the same <code>pointer</code> argument to both paths' <code>NPC_options</code>. They point to the new <code>yesPlease</code> <code>player_option</code>. jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Hello and welcome to my town traveler! Nice to see you. Where are you from?\"\n        pointer: \"whereYouFrom\"\n      whoAmI:\n        text: \"I am &amp;6Jack&amp;r. The mayor of this beautiful town. We have some big farms and good old taverns well worth checking out! So now where are you from?\"\n        pointer: \"smallIsland,bigCity\"\n      islandAnswer:\n        text: \"That sounds familiar! I grew up in a small town with few people. So we already have something in common! Do you want something to eat?\"\n        pointer: \"yesPlease\" # (1)!\n      cityAnswer:\n        text: \"Oh I know! I think you're from Kayra, right? Nice city but to be honest I prefer country life... You look a bit hungry. Do you want something to eat?\"\n        pointer: \"yesPlease\" # (2)!\n      foodAnswer:\n        text: \"You're welcome! Take it... &amp;7*gives food*\"\n\n    player_options:\n      whereYouFrom:\n        text: \"First I want to know who you are!\"\n        pointer: \"whoAmI\"\n      smallIsland:\n        text: \"From a small island located east.\"\n        pointer: \"islandAnswer\"\n      bigCity:\n        text: \"From a big city located west.\"\n        pointer: \"cityAnswer\"\n      yesPlease: # (3)!\n        text: \"Oh yes I'm starving! Thank you.\"\n        pointer: \"foodAnswer\"\n</code></pre></p> <ol> <li>I point to <code>yesPlease</code> in the <code>player_options</code> section.</li> <li>I also point to <code>yesPlease</code> in the <code>player_options</code> section.</li> <li>Two <code>NPC_options</code> point to me.</li> </ol> <p>The following graph shows the paths through the conversation. Since there are two <code>pointers</code> assigned to the <code>whoAmI</code> option, the player can choose between one of the paths.</p> <p>Conversation Flow Graph</p> <pre><code>stateDiagram-v2\n    [*] --&gt; firstGreeting: Interaction with NPC\n    firstGreeting --&gt; whereYouFrom: points to\n    whereYouFrom --&gt; whoAmI: points to\n    whoAmI --&gt; smallIsland: points to\n    whoAmI --&gt; bigCity: points to\n    smallIsland --&gt; islandAnswer: points to\n    bigCity --&gt; cityAnswer: points to\n    islandAnswer --&gt; yesPlease: points to\n    cityAnswer --&gt; yesPlease: points to\n    yesPlease --&gt; foodAnswer: points to</code></pre> <p>Try the conversation ingame by saving the file and executing the <code>/bq reload</code> command! Then right-click Jack. Select different options by using the keys for walking forwards and backwards (W and S by default). Confirm  options by jumping (Space by default).</p> Is the example not working? <p>Get the correct configs by running the following command.</p> <p> This will overwrite any changes (including NPC ID's and locations) you have made to the example.</p> <p>Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/q download BetonQuest/Quest-Tutorials ${ref} QuestPackages /Basics/Conversations/2-FullExample /tutorialQuest overwrite\n</code></pre></p>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Conversations/#summary","title":"Summary","text":"<p>You've learned how to create simple conversations in which the player can choose different paths. In the next part of the basics tutorial you will learn how Jack the mayor can give food to the player using events!</p> <p> Events </p>","tags":["Conversation-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/","title":"Events","text":"<p>After you learned how to create conversations we will now take a look at events. These allow you to change the game  world. This can be anything from modifying a player's inventory to placing blocks. In this tutorial, we will give the player items and teleport them to different locations using events.</p> <p>Requirements</p> <ul> <li>Conversations Tutorial</li> </ul> <p>Related Docs</p> <ul> <li>Events Reference</li> <li>Events List</li> </ul> <p>Download Tutorial Setup</p> <p> Don't do this if you already have the configs of the previous tutorial step. </p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Conversations/1-DirectoryStructure /tutorialQuest\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#1-creating-the-folder-structure-for-your-first-event","title":"1. Creating the folder structure for your first event","text":"<p>Add a new file to your \"tutorialQuest\" <code>QuestPackage</code> named \"events.yml\". Here is an overview of what your directory structure should look like now:</p> <ul> <li> tutorialQuest<ul> <li> package.yml</li> <li> events.yml</li> <li> conversations<ul> <li> jack.yml</li> </ul> </li> </ul> </li> </ul> <p>We now have our file structure ready and can start writing events!</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#2-defining-your-first-event","title":"2. Defining your first event","text":"<p>Open the <code>events.yml</code> now that we have created it and add the following content: </p> events.yml<pre><code>events: # (1)!\n  giveFoodToPlayer: \"give steak:16\"\n</code></pre> <ol> <li>All events must be defined in an <code>events</code> section.</li> </ol> <p>So what do we see here?</p> <ul> <li><code>giveFoodToPlayer</code>  is the name of the event. You are free to choose any name. However, it is  recommended to name     it after what it does. That just makes it easier to understand your quest.</li> <li>The Event Instruction. <ul> <li><code>give</code> The first value in the instruction is always the event type.</li> <li><code>steak:16</code> This is an option of the give event. It defines which item you want to give and which amount    seperated by a colon.</li> </ul> </li> </ul> <p>Before we can test if the event works ingame we have to create the item <code>steak</code> because BetonQuest doesn't know what a <code>steak</code> is.</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#3-creating-the-item-in-the-items-section","title":"3. Creating the item in the items section","text":"<p>For some event types like <code>give</code> you need to specify an item in the <code>items</code> section. It holds definitions of all items you want to create/use in your quest. We will create the item section in the \"package.yml\" file. </p> package.yml<pre><code>npcs:\n  '1': \"Jack\"\n\nitems:\n  steak: \"COOKED_BEEF\" # (1)!\n</code></pre> <ol> <li>Links the <code>steak</code> item name from your BetonQuest configs to the ingame <code>minecraft:COOKED_BEEF</code> item.</li> </ol> <p>Now <code>steak</code> is an item name that can be used throughout your quest.</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#4-integrating-events-into-conversations","title":"4. Integrating events into conversations","text":"<p>Let's run the event from your conversation.</p> <p>Tip: Highlighted lines in blue are new compared with the previous example. </p> jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      #... (1)\n      foodAnswer:\n        text: \"Your welcome! Take it... &amp;7*gives food*\"\n        events: \"giveFoodToPlayer\" # (2)!\n        pointer: \"thankYou\"\n    player_options:\n      #...\n      thankYou: \n        text: \"Oh that smells really good!\"\n</code></pre> <ol> <li>The tutorial will only show relevant parts of the examples from now on. </li> <li>The event argument must contain one or multiple event names. These events are executed when the corresponding    option is shown to the player.This argument can be used on both player and npc options.</li> </ol> <p>Make these changes to your conversation, reload and test! The NPC should now give the player food.</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#5-testing-your-first-event-ingame","title":"5. Testing your first event ingame","text":"<p>You can also run events using commands.</p> <p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.     </p> <p>The easiest way to do this is by running a command:</p> <p>Enter <code>/bq event NAME tutorialQuest.giveFoodToPlayer</code> on the server. This command will give you the specified amount of steak if you've done everything right!</p> Command Part Meaning <code>/bq event</code> Tells BetonQuest that some event should be executed. <code>NAME</code> A player's name. <code>tutorialQuest</code> The name of a QuestPackage. This is required because you could have events with the same name in different packages. <code>giveFoodToPlayer</code> The name of the event to execute. Don't forget to separate it with a dot from the package <code>tutorialQuest.giveFoodToPlayer</code>. <p>You can also run this command from the console (without the slash at the start). </p> Is the example not working? <p>Get the correct configs by running the following command. This will overwrite any changes (including NPC ID's and locations) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Events/1-FirstEvent /tutorialQuest overwrite\n</code></pre></p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#6-creating-folder-events","title":"6. Creating folder events","text":"<p>Now we will create a tour through the mayors city. Meanwhile, we will learn about the teleport and folder events.</p> <p>Open the \"events.yml\" file and add these lines:                                                                                     events.yml<pre><code>events:\n  giveFoodToPlayer: \"give steak:16\"\n  townTour: \"folder tpLocation1,tpLocation2,tpLocation3,tpBlacksmith delay:2 period:5\"\n  tpLocation1: \"teleport 100;70;100;world\" # (1)!\n  tpLocation2: \"teleport 200;73;200;world\" # (2)!\n  tpLocation3: \"teleport 300;71;300;world\" # (3)!\n  tpBlacksmith: \"teleport 50;70;50;world\" # (4)!\n</code></pre></p> <ol> <li>Adjust the coordinates and world name to your world. It must be in the unified location format</li> <li>Adjust the coordinates and world name to your world. It must be in the unified location format</li> <li>Adjust the coordinates and world name to your world. It must be in the unified location format</li> <li>Adjust the coordinates and world name to your world. It must be in the unified location format</li> </ol> <p>As you can see, there are a few new events of the types <code>folder</code> and <code>teleport</code>. The folder event wraps multiple events inside itself. Once triggered, it simply executes its events.  Every event type is documented in the events list, read more about the folder and teleport events there. </p> <p>Running the <code>townTour</code> event will teleport you to a new location every five seconds until we get to our final destination, the blacksmith. The folder event is done after the <code>tpBlacksmith</code> event was run.</p> <p>Danger</p> <p>Make sure you are in creative mode when testing this event. Otherwise, you might die from fall- or suffocation damage. Running <code>/gamemode creative</code> will change your game mode to creative.</p> <p>Now we will add the folder event to Jack's conversation. jack.yml<pre><code>conversations:\n  Jack:\n    quester: \"Jack\"\n    first: \"firstGreeting\"\n    NPC_options:\n      #...\n      foodAnswer:\n        text: \"You're welcome! Take it... &amp;7*gives food*\"\n        events: \"giveFoodToPlayer\"\n        pointer: \"thankYou\"\n      townTour:\n        text: \"Yeah that's true. You know what also smells good? The fresh air in my town! Would you like to take a little tour?\"\n        pointer: \"enoughTime,noTimeForThat\" # (1)!\n      startTheTour:\n        text: \"Great! It is a honor for me to guide you through the town.\"\n        events: \"townTour\" # (2)!\n      noProblem:\n        text: \"That's fine! Maybe you have time another day... Just talk to me again. See you!\"\n    player_options:\n      #...\n      thankYou:\n        text: \"Oh that smells really good!\"\n        pointer: \"townTour\" # (3)!\n      enoughTime:\n        text: \"Yes of course! Show me everything.\"\n        pointer: \"startTheTour\"\n      noTimeForThat:\n        text: \"Sorry but I don't have time now...\"\n        pointer: \"noProblem\"\n</code></pre></p> <ol> <li>The player once again has a choice.</li> <li>This is the event name for the new event that we will create. It gets triggered when the <code>startTheTour</code> NPC option is shown.</li> <li>This extends the existing conversation.</li> </ol> <p>These modifications allow the player to choose whether they want to take a town tour or not.</p> <p>Now speak with the NPC again to take the tour.</p> Is the example not working? <p>Get the correct configs by running the following command. This will overwrite any changes (including NPC ID's and locations) you have made to the example. Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Events/2-TownTour /tutorialQuest overwrite\n</code></pre></p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Events/#summary","title":"Summary","text":"<p>You've learned what events are and how to create them. You can now give a player some food or even teleport him through the whole town! More events can be found in the events list. Next you will learn how to give tasks to the player using objectives. </p> <p> Objectives Tutorial</p>","tags":["Event-Tutorials"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/","title":"Objectives","text":"<p>In the last tutorial you learned to create and use events.  This tutorial is about objectives. Objectives are tasks which you can assign to a player. For example breaking blocks or fishing fish. The possibilities are nearly endless! You will learn about these in this tutorial.</p> <p>Requirements</p> <ul> <li>Conversations Tutorial</li> <li>Events Tutorial</li> </ul> <p>Related Docs</p> <ul> <li>Objectives Reference</li> <li>Objectives List</li> </ul> <p>Download Tutorial Setup</p> <p> Don't do this if you already have the configs of the previous tutorial step. </p> <p>Enter this command in the chat to download the pre-made setup for this tutorial: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Objectives/1-DirectoryStructure /tutorialQuest\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/tutorialQuest\"</p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#1-creating-the-folder-structure-for-your-first-objective","title":"1. Creating the folder structure for your first objective","text":"<p>Add a new file to your \"tutorialQuest\" <code>QuestPackage</code> named \"objectives.yml\" and  a new file to your \"tutorialQuest\" Conversations folder named \"blacksmith.yml\". You may ask why we add a new file to the conversations folder. This is because the city tour currently ends in nothingness.  We're going to add a blacksmith NPC that the player can talk to.</p> <p>Here is an overview of what your directory structure should look like now:</p> <ul> <li> tutorialQuest<ul> <li> package.yml</li> <li> events.yml</li> <li> objectives.yml</li> <li> conversations<ul> <li> jack.yml</li> <li> blacksmith.yml</li> </ul> </li> </ul> </li> </ul> <p>We now have our file structure ready and can start writing objectives and a new conversation!</p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#2-defining-your-first-objective-and-finishing-event","title":"2. Defining your first objective and finishing event","text":"<p>Open the newly created file \"objectives.yml\" and add the following:</p> objectives.yml<pre><code>objectives: # (1)!\n  fishingObj: \"fish cod 3 notify hookLocation:100;63;100;world range:20 events:caughtAllFish\"\n</code></pre> <ol> <li>All objectives must be defined in an <code>objectives</code> section.</li> </ol> <p>Let's explain:</p> <ul> <li><code>fishingObj</code>  is the name of the objective. You can choose any name you want. However, it is  recommended to name   it after what it does. That just makes it easier to understand your quest.</li> <li>The Objective Instruction.<ul> <li><code>fish</code>: The first value in the instruction is always the objective type.</li> <li><code>cod</code>: This is an option of the objective <code>fish</code>. It defines which item you have to fish.</li> <li><code>3</code>: This is another option. It defines the amount to fish.</li> <li><code>notify</code>: This is a general argument for most objectives. It enables a notification when the player progresses the objective.</li> <li><code>hookLocation:100;63;100;world</code>: This option defines where the hook of the fishing rod must be located. Only fish that are     fished in this specific area are counted by the objective. You must adjust this to your world!</li> <li><code>range:20</code>: If you use the hook location you also have to define the range option. This is the range around the hook location coordinate    where fished things are still counted.</li> <li><code>events:caughtAllFish</code>: This is not an option of the fish objective but a general objective argument. The defined event(s)    get triggered once the objective is completed (after you caught 3 cod at the specified hook location).</li> </ul> </li> </ul> <p>After that we add the <code>caughtAllFish</code> event to the \"events.yml\" like this:</p> <p>events.yml<pre><code>events:\n  # Other events not shown here\n  tpBlacksmith: \"teleport 50;70;50;world\"\n  caughtAllFish: \"notify You caught enough fish!\\nReturn to the blacksmith! io:Title sound:firework_rocket\"\n</code></pre> It lets the player know that they successfully completed the objective.</p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#3-creating-the-item-in-the-items-section","title":"3. Creating the item in the items section","text":"<p>As we learned in the previous tutorial we have to define <code>cod</code> in the item section because BetonQuest doesn't know what <code>cod</code> is. To add the item to the list, let's reopen the \"package.yml\" file.</p> package.yml<pre><code>npcs:\n  '1': \"Jack\"\n\nitems:\n  steak: \"COOKED_BEEF\"\n  cod: \"COD\" # (1)!\n</code></pre> <ol> <li>Links the <code>cod</code> item name from your BetonQuest configs to the ingame <code>minecraft:COD</code> item.</li> </ol> <p>Now, <code>cod</code> is a defined item that can be utilized throughout the entire quest.</p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#4-testing-your-first-objective-ingame","title":"4. Testing your first objective ingame","text":"<p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.</p> <p>Objectives must be started before they start watching the player's actions. The easiest way to do this is by running a command:</p> <p>Enter <code>/bq objective YOUR_NAME add tutorialQuest.fishObj</code> on the server. This command will start the objective for the player. If you want to check if you have done it correctly, go to the defined location and fish 3 cod. After you caught 3 cod you should get a notification.</p> <p>Faster Fishing</p> <p>Use this command to get a superfast fishing rod: 1.20.5+<pre><code>/give @p fishing_rod[custom_name='[\"\",{\"text\":\"Instant Fishing Rod\",\"color\":\"yellow\"}]',lore=['[\"\",{\"text\":\"Instantly summons a hungry fish...\",\"italic\":false}]'],item_name=derp,enchantments={levels:{lure:100}}]\n</code></pre> pre 1.20.5<pre><code>/give @p fishing_rod{display:{Name:'{\"text\":\"Instant Fishing Rod\",\"color\":\"yellow\",\"italic\":true}',Lore:['{\"text\":\"Instantly summons a hungry fish...\"}']},HideFlags:1,Enchantments:[{id:\"minecraft:lure\",lvl:100s}]} 1\n</code></pre></p> Command Part Meaning <code>/bq objective</code> Tells BetonQuest that some event should be executed. <code>NAME</code> A player's name. <code>add</code>/<code>complete</code>/<code>del</code>/<code>list</code> Use these arguments to rather add, complete or delete an objective. The list argument does not require any further arguments and lists all objectives of the selected player. <code>tutorialQuest</code> The name of a QuestPackage. This is required because you could have objectives with the same name in different packages. <code>fishObj</code> The name of the objective to execute. Don't forget to separate it with a dot from the package <code>tutorialQuest.fishObj</code>. <p>You can also run the <code>/bq objective NAME</code> to list all active objectives of a player.  <code>/bq objective NAME</code> to list all active objectives of a player.</p> <p>To manually complete the objective for a player you need to type <code>/bq objective YOUR_NAME complete tutorialQuest.fishObj</code>. After you send this command you should also get a notification about the completion of this objective.</p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#5-using-events-to-start-objectives","title":"5. Using events to start objectives","text":"<p>Objectives cannot only be started and stopped using commands, but also with events. Let's add an event to start the fishing objective:</p> events.yml<pre><code>events:\n  # Other events not shown here\n  tpBlacksmith: \"teleport 50;70;50;world\"\n  caughtAllFish: \"notify You caught enough fish!\\nReturn to the blacksmith! io:Title sound:firework_rocket\"\n  startFishingObj: \"objective start fishingObj\" # (1)!\n</code></pre> <ol> <li>Starts the objective <code>fishingObj</code> for the player that this event is executed on.</li> </ol>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#6-integrating-objectives-into-conversations","title":"6. Integrating objectives into conversations","text":"<p>As you know, we can run events from conversations. We can now use the new event to start an objective from a conversation.</p> <p>Let's add some dialog to the newly created file named \"blacksmith.yml\" in the conversation folder:</p> blacksmith.yml<pre><code>conversations:\n  Blacksmith:\n    quester: Blacksmith\n    first: firstGreeting\n    NPC_options:\n      firstGreeting:\n        text: Welcome %player% in Valencia! The mayor already told me that you are new to our town.\n        pointer: thatsRight\n      newArmorForNewCitizens:\n        text: So every new citizens in our town will get a new armour from me but you have to do something for me in order to get this really nice upgrade!\n        pointer: whatToDo\n      collectFish:\n        text: You will have to fish 3 fresh cod for me and bring them to me. After that I will give you the nice new armour! Is that a deal?\n        pointer: accept,deny # (1)!\n      maybeLater:\n        text: No problem! You can comeback later aswell. Bye!\n      goodLuck:\n        text: Good luck and I will see you later!\n    player_options:\n      thatsRight:\n        text: Yeah thats true. Thank you!\n        pointer: newArmorForNewCitizens\n      whatToDo:\n        text: What can I do for you?\n        pointer: collectFish\n      accept:\n        text: Sure! I could use a new armour.\n        event: startFishingObj # (2)!\n        pointer: goodLuck\n      deny:\n        text: I dont have time right now.\n        pointer: maybeLater\n</code></pre> <ol> <li>The player have the choice to say yes or no.</li> <li>This is the event to start your actual objective task to fish 3 fresh cod.</li> </ol> <p>Now link the conversation to a new NPC that is placed wherever the city tour ends. You should already know how to link the dialog to the npc in \"package.yml\". If not, check the previous tutorials!</p> <p>It is very important to save all files everytime you test something! Type <code>/bq reload</code> on your server after saving.</p> Is the example not working? <p>Get the correct configs by running the following command.</p> <p> This will overwrite any changes (including NPC ID's and locations) you have made to the example.</p> <p>Linking NPCs to conversations is explained in the basics tutorial. <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Basics/Objectives/2-FullExample /tutorialQuest\n</code></pre></p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/Objectives/#summary","title":"Summary","text":"<p>You've learned what objectives are and how to create them. You can now give a player an  objective to have a more advanced quest! More objectives can be found in the objectives list. In the next tutorial you will learn how conditions work and how to use them to make the Blacksmith react to the completed objective.</p> <p> Conditions Tutorial </p>","tags":["Objectives"]},{"location":"Tutorials/Getting-Started/Basics/YAML-Basics/","title":"YAML Basics","text":"<p>This plugin uses the YAML (<code>.yml</code>) format for all files. You may already know it from other plugins as most use this format.</p> <p>Unfortunately, you'll likely soon experience that your quest is not working because you made a YAML syntax error. This is the case because it is quite easy to make a mistake in YAML syntax.</p> <p>So let's briefly talk about what YAML is and how it works.</p> <p>Requirements</p> <ul> <li>No further requirements</li> </ul> <p>Related Docs</p> <ul> <li>Handling YAML Errors</li> </ul>"},{"location":"Tutorials/Getting-Started/Basics/YAML-Basics/#what-is-yaml","title":"What is YAML?","text":"<p>YAML is a data-serialization language that is readable by humans. It is frequently used for Minecraft related configuration files.</p> <p>YAML is <code>key: \"value\"</code> based. This means you use a  to get a certain value. Values should be surrounded by double quotes (<code>\"...\"</code>). Let me show you an example:</p> <p>YAML Data Format<pre><code>key: \"value\"\nJack: \"Some data about Jack\"\n</code></pre> Now you can use the  <code>Jack</code> to obtain <code>Some data about Jack</code>.</p> <p>Keys and values can also be nested into each other. Then they must be indented with two spaces.</p> Nested YAML<pre><code>outerName:\n  innerName: \"innerValue\"\n  anotherInnerName: \"BetonQuest is great!\"\n</code></pre> <p>Tabs are not supported. Use spaces instead.</p> <p>You shouldn't name anything <code>yes</code>, <code>no</code>, <code>on</code>, <code>off</code>, <code>null</code>, <code>true</code> or <code>false</code> as those names are reserved keywords in YAML.  </p> <p> Next Step: Conversations</p>"},{"location":"Tutorials/Getting-Started/Setup-Guide/Installing-BetonQuest/","title":"Installation","text":"<p>To use BetonQuest, you need to install it on your server. This page will guide you through the installation process for all plugins that are required for this tutorial. </p> <p>Requirements</p> <ul> <li>Setting up a Test Server</li> </ul> <p>Related Docs</p> <ul> <li>No related documentation</li> </ul>"},{"location":"Tutorials/Getting-Started/Setup-Guide/Installing-BetonQuest/#required-plugins","title":"Required Plugins","text":"<ol> <li> <p>In order to use BetonQuest you (obviously)    need to add the \"BetonQuest.jar\" to the \"plugins\" folder in the server. If you haven't downloaded it yet, you can    get it from the download page.</p> </li> <li> <p>You also need Citizens for this    tutorial. If you can't afford to buy it, you can download it for free.    Just give the first paragraph of their Spigot page a good read, and you will find the link to the free download.    Also put the \"Citizens.jar\" file in your server's \"plugins\" folder.</p> </li> <li> <p>You also need ProtocolLib for this    tutorial. Put the \"ProtocolLib.jar\" file in your server's \"plugins\" folder as well.      You do have to be a bit careful with ProtocolLib. Often, the current release on Spigot may not support the latest version    of Minecraft. You might have to download the latest dev build from their dev build site.</p> </li> </ol> <p>Once you have installed these, restart your server!</p> <p> Next Step: Setting up Visual Studio Code</p>"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-VSCode/","title":"Setting Up Visual Studio Code","text":"<p>What is the most important thing before writing quests? Correct! We need a good text editor to make our lives easier with shortcuts and syntax highlighting. In this tutorial, you will be introduced to Visual Studio Code (VSCode), the most popular text editor.</p> <p>In this tutorial, you will learn how to install and use it to your advantage!</p> <p>Alternative Editors</p> <p>If you are more familiar with another IDE or text editor (such as IntelliJ or Vim), feel free to use it to write Quest. The use of VSCode is only recommended by us based on our experience.</p> <p>Requirements</p> <ul> <li>Installing BetonQuest</li> </ul> <p>Related Docs</p> <ul> <li>No related documentation</li> </ul>","tags":["VSCode","Editor"]},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-VSCode/#1-download-and-install-visual-studio-code","title":"1. Download and Install Visual Studio Code","text":"<p>In this step, we will install VSCode on your computer.</p> <p> Install Visual Studio Code</p> <p>Install it like any other software. The default settings are sufficient for BetonQuest usage.</p> <p>Now start Visual Studio Code. We will activate the <code>Auto-Save</code> feature. Click \"File\" in the top left corner and then click on \"Auto-Save\".</p> <p>This is a very useful feature that automatically saves your files. No data will ever be lost again! It also saves you from one of the most common errors when writing quests: Forgetting to save! From now on, you can just execute <code>/bq reload</code> as soon as your mouse leaves the editor.</p> VSCode Auto-Save Setup <p></p> <p>Now that you have a working VS Code installation, you can learn how to use it.</p>","tags":["VSCode","Editor"]},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-VSCode/#2-creating-a-workspace","title":"2. Creating a workspace","text":"<p>If you want to work fast and efficient, it is necessary to create a workspace! A workspace is a folder that contains all your project's files. In this case, it will be the BetonQuest folder with all quests and settings.</p> More than one workspace <p>If you want to have more than one plugin in your workspace, you can click on \"File\" and then \"Add Folder to Workspace\" to add any other folder. You can also close and reopen the workspace at any time using the steps below.</p> <p>And this is how to do it:</p> <p>Step 1: Left-click on the folder button.</p> <p></p> <p>Step 2: Left-click on \"Open Folder\".</p> <p></p> <p>Step 3: Define a path and click on \"Add\".</p> <p>Navigate to your server files  Go to the \"plugins\" folder  Select the \"BetonQuest\" folder</p> <p></p> <p>If you have done everything correctly, it will look like this:</p> <p></p> <p>In the next topic, you will learn more about how to deal with YAML syntax errors.</p>","tags":["VSCode","Editor"]},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-VSCode/#3-installing-the-yaml-syntax-extension","title":"3. Installing the YAML Syntax extension","text":"<p>VSCode can highlight mistakes made in the configuration file format (YAML).  Because this is NOT a built-in function, we need to install the YAML Plugin from the Extensions store!</p> <p>To do so, click on the \"Extension Button\" as it is shown in the picture below:</p> <p></p> <p>A new tab will open. Now search for <code>YAML</code> and install the plugin from the author \"Red Hat\"</p> <p></p> <p>If the installation was successful, you can click on the folder button on the left side again.</p> <p>No worries, installing this plugin is not dangerous. It is verified!</p>","tags":["VSCode","Editor"]},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-VSCode/#summary","title":"Summary","text":"<p>Now that we have created a proper setup for writing quests, we will talk a bit about the YAML format that is required  for quests!</p> <p> Next Step: YAML Basics</p>","tags":["VSCode","Editor"]},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-Test-Server/","title":"Setting up a Test Server","text":"<p>As a starting point for your questing journey, we will set up a local development installation for BetonQuest.</p> <p>Requirements</p> <ul> <li>No further requirements</li> </ul> <p>Related Docs</p> <ul> <li>No related documentation</li> </ul>"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-Test-Server/#why-do-i-need-a-local-server","title":"Why do I need a local server?!","text":"<p>You might think that a local test server is useless because you already have a remote server. There are multiple reasons why you really need one:</p> <ul> <li>Working on a live server could lead to crashes and bugs that your players will have to deal with.</li> <li>Making quests can, especially for new questers, lead to unexpected behavior. This can be anything from spawning hundreds of mobs to endlessly giving out items to a player. Exactly the stuff you don't want to happen.</li> <li>Working with a test server is usually faster and therefore more productive. You can restart it all the time, change plugin configurations as you wish, etc.</li> </ul>"},{"location":"Tutorials/Getting-Started/Setup-Guide/Setting-up-a-Test-Server/#setup-of-your-local-server","title":"Setup of your local server","text":"<ul> <li> <p>Step 1 As BetonQuest requires paper as server software, we need to install it first.  Head over to Papers download page and download the latest version of Paper.</p> </li> <li> <p>Step 2 Create a new folder for the server in a place you can easily access.  Making a new folder is important because the server will create a lot of files that would mess up your Desktop etc. Move the downloaded file in the newly created folder.</p> </li> <li> <p>Step 3 Rename the file to just \"paper\". If the file name contains a \".jar\" ending make sure to keep it.</p> </li> <li> <p>Step 4 You need a start script to start your server. Open your text editor and create a file named \"start.bat\" (for Linux and Mac: \"start.sh\"). Place it next to the \"paper.jar\". Open it and copy this into it: <pre><code>java -Xms1G -Xmx1G -jar paper.jar --nogui\npause\n</code></pre> Make sure to save it as a \".bat\" file (for Linux and Mac: \".sh\")! If you save it as a \".txt\" file it will not work.</p> What does this do? <p>This script tells Java to search for a file named \"paper.jar\". The <code>1G</code> setting in both the <code>-Xms</code> and <code>-Xmx</code> options is how much RAM you want to give to the server  (<code>1G</code> = 1 GigaByte RAM, <code>2G</code> = 2 GigaByte RAM, <code>700M</code> for 700 MegaBytes, etc.). You should not need more then 1GB in most cases.      </p> </li> <li> <p>Step 5 Start the server by double-clicking on the start file. Please wait until the server tells you to accept the EULA. Now check the server's folder. You will find a bunch of new folders and files that have been generated. You need to accept the EULA (Minecraft's End-User-License-Agreement) to be able to run a Minecraft server. Open up the \"eula.txt\" file, read the terms and agree by setting <code>eula=false</code> to <code>eula=true</code>.</p> </li> <li> <p>Step 6 From now on, the start file can be used to start the server. You can stop your server by typing <code>stop</code>. Alternatively, you can press Ctrl+C (for Mac: Cmd+C). Restart the server and connect to it via the server address <code>localhost</code> with your Minecraft game.</p> </li> <li> <p>Step 7 Once you joined the server, enter the following command in your server's console: <code>op &lt;YOUR-NAME&gt;</code>  This will give you all permissions on the server, which is required for the following steps.</p> </li> </ul> <p> Next Step: Install Dependencies</p>"},{"location":"Tutorials/Syntax/Quest-Packages/","title":"Quest Packages","text":"<p>This tutorial will teach you about the package managing system, which helps you keep your quests organized. You can write a small quest in just one file or split a big quest into lots of small files. It's completely up to you! </p> <p>Requirements</p> <p>Doing this tutorial helps but is not strictly required:</p> <ul> <li>Basic Tutorial</li> </ul> <p>Related Docs</p> <ul> <li>Package Structure Reference</li> <li>Defining Features Reference</li> </ul>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#1-what-is-a-quest-package","title":"1. What is a Quest Package?","text":"<p>A quest package is a folder that contains all the files that belong to a \"quest\". Since BetonQuest doesn't have its own  definition of a quest, a quest package could technically also contain multiple quests. That is up to you.</p> <p>It is created by placing a package.yml file inside a folder. If a folder lacks the package.yml, it will be considered as a part of another package that is located in a folder above it.</p> <p>The files inside a quest package can be organized in any way you like. There are no limitations on file names or file count. The only thing that matters is that the package.yml file is present. </p> <p>Let's compare the structure of the basic tutorial to one of a realistic quest package: </p> <p>Basics Tutorial Structure</p> <ul> <li> tutorialQuest<ul> <li> package.yml (1)</li> <li> events.yml  (2)</li> <li> conditions.yml</li> <li> objectives.yml</li> <li> conversations<ul> <li> blacksmith.yml</li> <li> jack.yml</li> </ul> </li> </ul> </li> </ul> <ol> <li>The package.yml file is required to make the folder a quest package.</li> <li>We created only one file per content type to make the basics tutorial easier. In a real quest package you would    probably have multiple files per content type.</li> </ol> <p>Typical Quest Structure</p> <ul> <li> myExampleQuest<ul> <li> package.yml (1)</li> <li> myEventsList1.yml (2)</li> <li> myEventsList2.yml (3)</li> <li> importantConditions.yml</li> <li> normalObjectives.yml (4)</li> <li> dungeonObjectives.yml</li> <li> myVariablesFile.yml</li> <li> conversations (5)<ul> <li> indiana.yml</li> <li> jones.yml</li> </ul> </li> </ul> </li> </ul> <ol> <li>The package.yml file is required to make a folder a quest package. In this case the package is called <code>myExampleQuest</code>    because the folder it is located in is called <code>myExampleQuest</code>.</li> <li>Multiple files with the same content type are possible and typically for bigger quests.</li> <li>Multiple files with the same content type are possible and typically for bigger quests.</li> <li>The files can have ANY name you want as the content type is defined in the file itself. How that works is explained    later in this tutorial.</li> <li>Since this folder does not contain a package.yml, it will be considered as a part of the quest package.</li> </ol>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#2-creating-a-quest-package-with-multiple-files","title":"2. Creating a Quest Package with multiple files","text":"<p>Download this example quest and take a look at the following structure overview and explanation. It's a simple woodcutting quest with a reward upon completion. Then play around with this system to get a feel for it.</p> Download the files for this tutorial <p>Instead of manually creating / filling the files, just download them using the command below: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Syntax/packageStructure/1-MultiFileStructure /packageStructure/MultiFile\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/packageStructure/MultiFile\"</p> <p>File Structure</p> <ul> <li> QuestPackages<ul> <li> myExampleQuest<ul> <li> package.yml</li> <li> myEventsList1.yml</li> <li> myEventsList2.yml</li> <li> importantConditions.yml</li> <li> myAwesomeObjectives.yml</li> <li> myVariablesFile.yml</li> <li> conversations<ul> <li> jones.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>File Contents</p> package.ymljones.ymlmyEventsList1.ymlmyEventsList2.ymlmyAwesomeObjectives.ymlimportantConditions.yml <pre><code>npcs:\n  '0': \"Jones\"\n\nitems:\n  oakLog: \"minecraft:oak_log\"\n  jonesAxe: \"IRON_AXE name:\u00a77Jones_Hardened_Axe enchants:DIG_SPEED:2,DURABILITY:4\"\n</code></pre> <pre><code>conversations:\n  Jones:\n    quester: \"Jones\"\n    first: \"questAlreadyDone,noWoodInInv,wrongWood,questNotDone,questDone,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Yoo! You look like you can handle those heavy axes to cut down some trees..?\"\n        pointer: \"probably\"\n      woodAmountAnswer:\n        text: \"Bring me 20 logs of oak and you will get my special axe for woodcutting!\"\n        pointer: \"letsDoIt\"\n      seeYou:\n        text: \"See you soon!\"\n      noWoodInInv:\n        text: \"Looks like you don't have the required wood with you. Bring me 20 oak logs!\"\n        conditions: \"startedTag,woodcuttingDoneTag,!logsInInventory\"\n      wrongWood:\n        text: \"Oh you still need some time for the mission?.. You have to actually chop them down and not take it from your chest!\"\n        conditions: \"startedTag,!woodcuttingDoneTag,logsInInventory\"\n      questNotDone:\n        text: \"Oh you still need some time for the mission?..\"\n        conditions: \"startedTag,!woodcuttingDoneTag,!logsInInventory\"\n      questDone:\n        text: \"That's the wood I was looking for! Thank you so much! Here is my special axe for my special friend.\"\n        events: \"questDone\"\n        conditions: \"woodcuttingDoneTag,logsInInventory\"\n      questAlreadyDone:\n        text: \"Hey! I don't need you anymore. Thanks again for the help.\"\n        conditions: \"questDoneTag\"\n    player_options:\n      probably:\n        text: \"Yes I can do that for you! How much wood do you need?\"\n        pointer: \"woodAmountAnswer\"\n      letsDoIt:\n        text: \"Alright let's get the job done!\"\n        pointer: \"seeYou\"\n        events: \"questStarted\"\n</code></pre> <pre><code>events:\n  questStarted: \"folder startedTagAdd,addWoodcuttingObj\"\n  startedTagAdd: \"tag add startedTag\"\n  addWoodcuttingObj: \"objective add woodCuttingObj\"\n</code></pre> <pre><code>events:\n  questDone: \"folder takeWoodFromPlayer,rewardPlayer,addQuestDoneTag\"\n  takeWoodFromPlayer: \"take oakLog:10\"\n  rewardPlayer: \"give jonesAxe\"\n  addQuestDoneTag: \"tag add questDoneTag\"\n\n  addWoodcuttingDoneTag: \"tag add woodcuttingDoneTag\"\n</code></pre> <pre><code>objectives:\n  woodCuttingObj: \"block OAK_LOG -10 notify events:addWoodcuttingDoneTag\"\n</code></pre> <pre><code>conditions:\n  woodcuttingDoneTag: \"tag woodcuttingDoneTag\"\n  logsInInventory: \"item oakLog:10\"\n  questDoneTag: \"tag questDoneTag\"\n  startedTag: \"tag startedTag\"\n</code></pre> <p>As you can see: Every feature goes into a section like <code>events:</code>, <code>objectives:</code>, <code>conversations:</code> which are marked in blue in this example quest. BetonQuest uses these section names to understand the contents of a file. You can write these sections in any file you want, and it will still work! That's the way you can organize your quests.</p> <p>A note about Sections</p> <p>While you can have multiple sections in one file, you can't have multiple sections with the same name. For example, you can't have two <code>events:</code> sections in one file. If you do, the second one will overwrite the first one. You can however have <code>events:</code> sections in two different files. In this case, the events from both files will be loaded.</p> <p>You also cannot have two features (e.g. events) with the same name in one package, even if those are in different files.</p>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#3-creating-a-quest-package-with-a-single-file","title":"3. Creating a Quest Package with a single file","text":"<p>Now that you understood how the multifile system works we will try another example. It's the exact same quest but in just one file:</p> <p>Example</p> package.yml<pre><code>npcs:\n  '0': \"Jones\"\n\nitems:\n  oakLog: \"minecraft:oak_log\"\n  jewelry: \"minecraft:diamond\"\n\nconversations:\n  Jones:\n    quester: \"Jones\"\n    first: \"questAlreadyDone,noWoodInInv,wrongWood,questNotDone,questDone,firstGreeting\"\n    NPC_options:\n      firstGreeting:\n        text: \"Yoo! You look like you can handle those heavy axes to cut down some trees..?\"\n        pointer: \"probably\"\n      woodAmountAnswer:\n        text: \"Bring me 20 logs of oak and you will get my special axe for woodcutting!\"\n        pointer: \"letsDoIt\"\n      seeYou:\n        text: \"See you soon!\"\n      noWoodInInv:\n        text: \"Looks like you don't have the required wood with you. Bring me 20 oak logs!\"\n        conditions: \"startedTag,woodcuttingDoneTag,!logsInInventory\"\n      wrongWood:\n        text: \"Oh you still need some time for the mission?.. You have to actually chop them down and not take it from your chest!\"\n        conditions: \"startedTag,!woodcuttingDoneTag,logsInInventory\"\n      questNotDone:\n        text: \"Oh you still need some time for the mission?..\"\n        conditions: \"startedTag,!woodcuttingDoneTag,!logsInInventory\"\n      questDone:\n        text: \"That's the wood I was looking for! Thank you so much! Here is my special axe for my special friend.\"\n        events: \"questDone\"\n        conditions: \"woodcuttingDoneTag,logsInInventory\"\n      questAlreadyDone:\n        text: \"Hey! I don't need you anymore. Thanks again for the help.\"\n        conditions: \"questDoneTag\"\n    player_options:\n      probably:\n        text: \"Yes I can do that for you! How much wood do you need?\"\n        pointer: \"woodAmountAnswer\"\n      letsDoIt:\n        text: \"Alright let's get the job done!\"\n        pointer: \"seeYou\"\n        events: \"questStarted\"\n\nevents:\n  questStarted: \"folder startedTagAdd,addWoodcuttingObj\"\n  startedTagAdd: \"tag add startedTag\"\n  addWoodcuttingObj: \"objective add woodCuttingObj\"\n\n  questDone: \"folder takeWoodFromPlayer,rewardPlayer,addQuestDoneTag\"\n  takeWoodFromPlayer: \"take oakLog:10\"\n  rewardPlayer: \"give jewelry:2\"\n  addQuestDoneTag: \"tag add questDoneTag\"\n\n  addWoodcuttingDoneTag: \"tag add woodcuttingDoneTag\"\n\nobjectives:\n  woodCuttingObj: \"block OAK_LOG -10 notify events:addWoodcuttingDoneTag\"\n\nconditions:\n  woodcuttingDoneTag: \"tag woodcuttingDoneTag\"\n  logsInInventory: \"item oakLog:10\"\n  questDoneTag: \"tag questDoneTag\"\n  startedTag: \"tag startedTag\"\n</code></pre> <p>You can download this example as well. No worries, the files of the previous example will not get overwritten. Instead, a new folder will be created in the previous package.</p> Download the files for this tutorial <p>Instead of manually creating / filling the files, just download them using the command below: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Syntax/packageStructure/2-SingleFileStructure /packageStructure/SingleFile\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/packageStructure/SingleFile\"</p>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#4-creating-packages-in-packages","title":"4. Creating packages in packages","text":"<p>It is also possible to have a package inside a package. And it's pretty easy to do! Just look at the following structure:</p> <p>Example 1</p> <ul> <li> QuestPackages<ul> <li> woodCuttingQuest<ul> <li> package.yml</li> <li> miningQuest<ul> <li> package.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Example 2</p> <ul> <li> QuestPackages<ul> <li> woodCuttingQuest<ul> <li> package.yml</li> <li> miningQuest<ul> <li> package.yml</li> <li> fishingQuest<ul> <li> package.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Not hard to understand but to make things clearer: Every folder that contains a package.yml file is a standalone quest package. By creating a folder with a package.yml file inside another package, you create a standalone \"subpackage\". </p> Download the files for this tutorial <p>Instead of manually creating / filling the files, just download them using the command below: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Syntax/packageStructure/3-PackageInPackage /packageStructure/PackageInPackage\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/packageStructure/PackageInPackage\"</p>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#5-creating-subdirectories-in-a-package","title":"5. Creating subdirectories in a package","text":"<p>Now you know, that it is possible to do nearly everything to structure your quests. But there is one more possibility: subdirectories. Let me first show you the example for it:</p> <p>Example</p> <ul> <li> QuestPackages<ul> <li> woodCuttingQuest<ul> <li> package.yml</li> <li> questPart1<ul> <li> myEventsPart1.yml</li> <li> MageConversation.yml</li> </ul> </li> <li> questPart2<ul> <li> myEventsPart2.yml</li> <li> KingConversation.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>You can create as many subdirectories in your quest packages as you like. Just create a folder with a name of your choice and start adding files to it! As long as you don't create a package.yml file in a subdirectory, it will belong to the package defined further up  in the directory tree.</p> <p>Directory names with spaces</p> <p>The only limitation for directory names are spaces. These cannot be used. </p> Download the files for this tutorial <p>Instead of manually creating / filling the files, just download them using the command below: <pre><code>/bq download BetonQuest/Quest-Tutorials 79b984742ae10cbf7ea0006fbbd77486868fc6ed QuestPackages /Syntax/packageStructure/4-SubDirectory /packageStructure/SubDirectory\n</code></pre> You can now find all files needed for this tutorial in this location: \"YOUR-SERVER-LOCATION/plugins/BetonQuest/QuestPackages/packageStructure/SubDirectory\"</p>","tags":["QuestPackages"]},{"location":"Tutorials/Syntax/Quest-Packages/#summary","title":"Summary","text":"<p>You have learned how to structure your quest packages. Now you are able to pick the best structure for your quests. </p>","tags":["QuestPackages"]},{"location":"Tutorials/Tools/YAML-Errors/","title":"Handling YAML Syntax Errors","text":"<p>What if you make a YAML mistake? How can you find it?</p> <p>Requirements</p> <ul> <li>YAML Basics</li> </ul> <p>Related Docs</p> <ul> <li>No related documentation</li> </ul>"},{"location":"Tutorials/Tools/YAML-Errors/#example-yaml-errors","title":"Example YAML Errors","text":"<p>Let me show you an example of a small quest with a few typical YAML errors. You might be able to see that something is off. Example Quest with YAML Errors<pre><code>conversations:\n  Jack:\n    NPC_options:\n      completeQuest:\n       text: \"Hello, how are you?\"\n       conditions: !hasEnoughFish\n\nevents:\n  giveFishObj \"objective add fishObj\"\n  notifyPlayer: 'notify You've completed the quest!'\n  addTag: \"tag add enoughFish\"\n</code></pre></p> <p>You will notice that two events in the events section are written in green instead of blue. That's because of a YAML Syntax error. Do you already see the mistake here? It is simple: There is a colon (<code>:</code>) missing after the key <code>giveFishObj</code> in line 9. Because of the missing colon YAML will fail to parse this file.</p> <p>But now let's have a look at the same file in VSCode. The YAML Syntax extension will clearly highlight the error:</p> <p></p> <p>If you hover over the error, you will see more information:</p> <p></p> <p>Whilst these are quite technical and hard to understand, the highlighting will clearly show you where errors need to be fixed.</p> <p>Let's have a look at the condition <code>!hasEnoughFish</code> in the conversations part:</p> <p></p> <p>This will give us an unresolved tag: ... error because special characters like the exclamation mark (<code>!</code>)  cannot be written without surrounding (<code>\" \"</code>) double quotes.</p> <p>Another common mistake is to use single quotes to surround a value and then also use it inside the value itself like this:</p> <p></p> <p>Instead, the line should be written like this: <code>notifyPlayer: \"notify You've completed the quest!\"</code> To prevent those errors we highly recommend to always use double quotes.</p>"}]}