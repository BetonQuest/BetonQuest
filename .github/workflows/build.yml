name: Build
on: [ push, pull_request ]

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.save_version.outputs.version }}
      VERSION_TYPE: ${{ steps.save_type.outputs.version_type }}
      PREVIOUS_VERSION_TAG: ${{ steps.save_tag.outputs.previous_version_tag }}
      CHANGES_IN_DOCS_ONLY: ${{ steps.save_changes.outputs.changes_in_docs_only }}

    steps:
      - name: Validate that a fork does not create a version tag
        if: "github.repository != 'BetonQuest/BetonQuest' && startsWith(github.ref,'refs/tags/v')"
        run: |
          echo "Version tags are not supported in forks!"
          exit 1
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Read version from pom.xml
        run: |
          MAVEN_VERSION=$(mvn help:evaluate -Dexpression=version -q -DforceStdout)
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "Collected the pom.xml version. The version is '$MAVEN_VERSION'"
      - name: Get the previous build-number tag from Development Build
        id: save_tag
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') || startsWith(github.ref,'refs/tags/v') )"
        run: |
          PREVIOUS_VERSION_TAG=$(git tag -l ${MAVEN_VERSION}-build-number-* | head -n 1)
          echo "PREVIOUS_VERSION_TAG=$PREVIOUS_VERSION_TAG" >> $GITHUB_ENV
          echo ::set-output name=previous_version_tag::$PREVIOUS_VERSION_TAG
          echo "Collected the previous build-number tag. The tag is '$PREVIOUS_VERSION_TAG'"
      - name: Check for difference in docs only
        id: save_changes
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          DIFF_OUTSIDE=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- . ':(exclude)docs/' && echo Nothing || echo Changes)
          DIFF_INSIDE=$(git diff --quiet ${PREVIOUS_VERSION_TAG} -- docs/ && echo Nothing || echo Changes)
          if [[ $DIFF_OUTSIDE == Nothing && $DIFF_INSIDE == Changes ]]; then CHANGES_IN_DOCS_ONLY=true; else CHANGES_IN_DOCS_ONLY=false; fi
          echo "CHANGES_IN_DOCS_ONLY=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
          echo ::set-output name=changes_in_docs_only::$CHANGES_IN_DOCS_ONLY
          echo "Check for difference in docs only. The value is '$CHANGES_IN_DOCS_ONLY'"
      - name: Generate build number for Development Build
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') ) && env.CHANGES_IN_DOCS_ONLY == 'false'"
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.github_token }}
          prefix: ${{ env.MAVEN_VERSION }}
      - name: Set version for 'Release Build'
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          TAG_VERSION=${GITHUB_REF:11}
          echo "Collected the tag version. The version is '$TAG_VERSION'"
          if [ $TAG_VERSION != $MAVEN_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_VERSION' and pom is '$MAVEN_VERSION'."; exit 1; fi
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=release" >> $GITHUB_ENV
      - name: Set version for 'Development Build'
        if: "github.repository == 'BetonQuest/BetonQuest' && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          if [ $CHANGES_IN_DOCS_ONLY == true ]; then MAVEN_VERSION=${PREVIOUS_VERSION_TAG/build-number/DEV}; else MAVEN_VERSION=${MAVEN_VERSION}-DEV-${BUILD_NUMBER}; fi
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=developement" >> $GITHUB_ENV
      - name: Set version for 'Artifact Build'
        if: "github.repository != 'BetonQuest/BetonQuest' || !startsWith(github.ref,'refs/tags/v') && github.ref != 'refs/heads/master' && !startsWith(github.ref,'refs/heads/master_v')"
        run: |
          if [ ${{ github.repository }} != 'BetonQuest/BetonQuest' ]; then REPO=${{ github.repository }}-; fi
          MAVEN_VERSION=${MAVEN_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
          echo "MAVEN_VERSION=$MAVEN_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=artifact" >> $GITHUB_ENV
      - name: Save version to output variable
        id: save_version
        run: |
          echo "The version is '$MAVEN_VERSION'"
          echo ::set-output name=version::$MAVEN_VERSION
      - name: Save version type to output variable
        id: save_type
        run: |
          echo "The version type is '$VERSION_TYPE'"
          echo ::set-output name=version_type::$VERSION_TYPE

  build-artifacts:
    name: Build Artifacts
    needs: [ prepare ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Remove SNAPSHOT version for Release Build
        if: "env.VERSION_TYPE == 'release'"
        run: |
          mvn versions:set -DremoveSnapshot
      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${VERSION}\]~g" ./CHANGELOG.md
      - name: Set plugin version
        run: |
          sed -i "s~\${maven-version}~${VERSION}~g" ./src/main/resources/plugin.yml
      - name: Activate lf line ending check in editorconfig
        run: |
          sed -i "s~#end_of_line = ~end_of_line = ~g" ./.editorconfig
      - name: Set mirror for all repositories in settings.xml
        uses: whelk-io/maven-settings-xml-action@v15
        with:
          mirrors: |
            [
              {
                "id": "betonquest-mirror",
                "mirrorOf": "*",
                "url": "https://betonquest.org/nexus/repository/default/"
              }
            ]
      - name: Build with Maven. Phase 'package'
        if: "github.event_name == 'pull_request'"
        run: |
          mvn -B package
      - name: Build with Maven. Phase 'verify'
        run: |
          mvn -B verify
          mkdir -p build/artifacts
          cp -r target/artifacts/* build/artifacts/
          git diff > build/artifacts/changes.patch
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts

  build-docs:
    name: Build Docs
    needs: [ prepare ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull
      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Select mkDocs requirements
        run: |
          [ -z $MKDOCS_MATERIAL_INSIDERS ] && TXT=docs-requirements.txt || TXT=docs-requirements-insiders.txt
          echo "TXT=$TXT" >> $GITHUB_ENV
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/${{ env.TXT }}') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/$TXT
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${VERSION}\]~g" ./CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s~\${current-date}~$DATE~g" ./CHANGELOG.md
          cp ./CHANGELOG.md './docs/Documentation/CHANGELOG.md'
      - name: Build with mkdocs
        run: |
          mkdocs build
          mkdir -p build/docs
          cp -r target/docs/* build/docs/
          git diff > build/docs/changes.patch
      - name: Upload Docs
        uses: actions/upload-artifact@v2
        with:
          name: BetonQuest-Docs
          path: build/docs

  deploy-artifacts:
    name: Deploy Artifacts
    if: "needs.prepare.outputs.VERSION_TYPE == 'release' || needs.prepare.outputs.VERSION_TYPE == 'developement' && needs.prepare.outputs.CHANGES_IN_DOCS_ONLY == 'false'"
    needs: [ prepare, build-artifacts, build-docs ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Load target folder and patch file
        run: |
          mkdir -p target/artifacts
          cp -r build/artifacts/* target/artifacts/
          git apply build/artifacts/changes.patch
          rm build/artifacts/changes.patch
      - name: Set mirror for all repositories in settings.xml
        uses: whelk-io/maven-settings-xml-action@v15
        with:
          servers: |
            [
              {
                "id": "betonquest",
                "username": "${env.REPOSITORY_USER}",
                "password": "${env.REPOSITORY_PASS}",
                "configuration": {
                  "httpConfiguration": {
                    "all": {
                      "usePreemptive": "true"
                    }
                  }
                }
              }
            ]
          mirrors: |
            [
              {
                "id": "betonquest-mirror",
                "mirrorOf": "*",
                "url": "https://betonquest.org/nexus/repository/default/"
              }
            ]
      - name: Publish to Maven Repository
        run: |
          mvn -B deploy
        env:
          REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}

  deploy-docs:
    name: Deploy Docs
    concurrency: gh-pages-deploy
    if: "needs.prepare.outputs.VERSION_TYPE == 'release' || needs.prepare.outputs.VERSION_TYPE == 'developement'"
    needs: [ prepare, build-artifacts, build-docs ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull
      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Download Docs
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Docs
          path: build/docs/
      - name: Select mkDocs requirements
        run: |
          [ -z $MKDOCS_MATERIAL_INSIDERS ] && TXT=docs-requirements.txt || TXT=docs-requirements-insiders.txt
          echo "TXT=$TXT" >> $GITHUB_ENV
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/config/${{ env.TXT }}') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./config/$TXT
        env:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
      - name: Load target folder and patch file
        run: |
          mkdir -p target/docs
          cp -r build/docs/* target/docs/
          git apply build/docs/changes.patch
          rm build/docs/changes.patch
      - name: Deploy Release to Github Pages
        if: "env.VERSION_TYPE == 'release'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"

          mike deploy --push --update-aliases ${VERSION} RELEASE
          mike delete --push ${VERSION}-DEV
      - name: Deploy Developement to Github Pages
        if: "env.VERSION_TYPE == 'developement'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"

          IFS='-' read -r -a array <<< "$VERSION"
          [ ${{ github.ref }} == 'refs/heads/master' ] && mike deploy --push --update-aliases ${array[0]}-DEV DEV || mike deploy --push --update-aliases ${array[0]}-DEV

  create-release:
    name: Create Release Build
    if: "always() && !cancelled() && needs.prepare.outputs.VERSION_TYPE == 'release'"
    needs: [ prepare, deploy-artifacts, deploy-docs ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Check previous Jobs
        if: "needs.deploy-artifacts.result != 'success' || needs.deploy-docs.result != 'success'"
        run: |
          exit 1
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/
      - name: Download Docs
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Docs
          path: build/docs/
      - name: Load target folder
        run: |
          mkdir -p target/artifacts
          mkdir -p target/docs
          cp -r build/artifacts/* target/artifacts/
          cp -r build/docs/* target/docs/
          rm build/artifacts/changes.patch
          rm build/docs/changes.patch
      - name: Zip Docs
        run: |
          cd build/docs/
          find . -name \*.mp4 -type f -delete
          zip -r Docs.zip .
          cd ../..
      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${VERSION}\]~g" ./CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          sed -i "s~\${current-date}~$DATE~g" ./CHANGELOG.md
      - name: Create release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: false
          PRE_RELEASE: false
          CHANGELOG_FILE: CHANGELOG.md
          RELEASE_NAME: BetonQuest ${{ env.VERSION }}
        with:
          args: |
            build/artifacts/BetonQuest.jar
            build/docs/Docs.zip
      - name: Delete obsolete git tag
        run: |
          git push origin :${PREVIOUS_VERSION_TAG}
      - name: Publish to Discord
        if: "always()"
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          VERSION: ${{ env.VERSION }}
          RELEASE: "release"

  create-developement:
    name: Create Developement Build
    if: "always() && !cancelled() && needs.prepare.outputs.VERSION_TYPE == 'developement' && needs.prepare.outputs.CHANGES_IN_DOCS_ONLY != 'true'"
    needs: [ prepare, deploy-artifacts, deploy-docs ]
    runs-on: ubuntu-latest

    steps:
      - name: Set variables from 'Prepare Build Variables'
        run: |
          echo "VERSION=${{ needs.prepare.outputs.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TYPE=${{ needs.prepare.outputs.VERSION_TYPE }}" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION_TAG=${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}" >> $GITHUB_ENV
          echo "CHANGES_IN_DOCS_ONLY=${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}" >> $GITHUB_ENV
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Check previous Jobs
        if: "needs.deploy-artifacts.result != 'success' || needs.deploy-docs.result != 'success'"
        run: |
          exit 1
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Artifacts
          path: build/artifacts/
      - name: Download Docs
        uses: actions/download-artifact@v2
        with:
          name: BetonQuest-Docs
          path: build/docs/
      - name: Load target folder
        run: |
          mkdir -p target/artifacts
          mkdir -p target/docs
          cp -r build/artifacts/* target/artifacts/
          cp -r build/docs/* target/docs/
          rm build/artifacts/changes.patch
          rm build/docs/changes.patch
      - name: Zip Docs
        run: |
          cd build/docs/
          find . -name \*.mp4 -type f -delete
          zip -r Docs.zip .
          cd ../..
      - name: Prepare developement variables
        run: |
          IFS='-' read -r -a array <<< "$VERSION"
          echo "VERSION_KEY=${array[0]}" >> $GITHUB_ENV
          echo "VERSION_NUMBER=${array[2]}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Create developement
        run: |
          if [ -z "$PASSWORD" ]; then echo "WARNING! You need to pass the SNAPSHOT_UPLOAD_PASSWORD environment variable."; exit 1; fi
          RESPONSE="$(curl --form-string "secret=$PASSWORD" --form-string "version=$VERSION_KEY" --form-string "versionNumber=$VERSION_NUMBER" --form-string "runID=$RUN_ID" --form-string "branch=$BRANCH_NAME" --form-string "commitHash=$COMMIT_HASH" --form "plugin=@\"$PLUGIN\"" --form "docs=@\"$DOCS\"" https://dev.betonquest.org/api/v1/builds/upload)"
          if [ "$RESPONSE" != "Upload successful" ]; then echo "WARNING! The upload was not successful. The response was '$RESPONSE'"; exit 1; fi
        env:
          PASSWORD: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}
          RUN_ID: ${{ github.run_id }}
          COMMIT_HASH: ${{ github.sha }}
          PLUGIN: "build/artifacts/BetonQuest.jar"
          DOCS: "build/docs/Docs.zip"
      - name: Publish to Discord
        if: "always()"
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
