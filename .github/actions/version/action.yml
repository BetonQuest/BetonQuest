name: Setup version context
description: |
  Setup the version context with a bunch of environment variables based on maven.

inputs:
  ROOT_REPOSITORY:
    description: |
      The root repository name.
    required: true
  GITHUB_TOKEN:
    description: |
      The GitHub token to use for creating the build-number tag.
    required: true
  EXCLUDE_PATHS:
    default: |
    description: |
      Multiline list of paths to exclude from the check.
    required: false

outputs:
  VERSION:
    description: |
      The version of the build.
    value: ${{ steps.version.outputs.VERSION }}
  VERSION_TYPE:
    description: |
      The type of the build.
    value: ${{ steps.version_type.outputs.VERSION_TYPE }}
  VERSION_MAVEN:
    description: |
      The version of the build in maven format.
    value: ${{ steps.version_maven.outputs.VERSION_MAVEN }}
  VERSION_IS_NEW:
    description: |
      Whether the changes are only in the docs folder.
    value: ${{ steps.require_new.outputs.NEW_VERSION_REQUIRED || 'true' }}

runs:
  using: composite
  steps:
    - uses: ./.github/actions/version/type
      id: version_type
      with:
        ROOT_REPOSITORY: ${{ inputs.ROOT_REPOSITORY }}
    - uses: ./.github/actions/version/required
      id: require_new
      if: "env.VERSION_TYPE == 'development'"
      with:
        TARGET_PATHS: ${{ inputs.EXCLUDE_PATHS }}
    - name: Read revision version from pom.xml
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        REVISION_VERSION="$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)"
        echo "REVISION_VERSION=$REVISION_VERSION" >> $GITHUB_ENV
    - name: Get the previous build-number tag from Development Build
      if: "env.VERSION_TYPE == 'release' || env.VERSION_TYPE == 'development'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        VERSION_PREVIOUS_TAG="$(git tag -l ${REVISION_VERSION}-build-number-* | head -n 1)"
        echo "VERSION_PREVIOUS_TAG=$VERSION_PREVIOUS_TAG" >> $GITHUB_ENV
    - name: Generate build number for Development Build
      if: "env.VERSION_TYPE == 'development' && env.NEW_VERSION_REQUIRED == 'true'"
      uses: onyxmueller/build-tag-number@v1.0.3
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        prefix: ${{ env.REVISION_VERSION }}
    - name: Set version for 'Release Build'
      if: "env.VERSION_TYPE == 'release'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        TAG_VERSION="${GITHUB_REF#*/*/}"
        echo "Collected the tag version. The version is '$TAG_VERSION'"
        if [ ${TAG_VERSION:1} != $REVISION_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_VERSION' and pom is '$REVISION_VERSION'."; exit 1; fi
        echo "VERSION_MAVEN=$REVISION_VERSION" >> $GITHUB_ENV
        echo "VERSION=$REVISION_VERSION" >> $GITHUB_ENV
    - name: Set version for 'Development Build'
      if: "env.VERSION_TYPE == 'development'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "VERSION_MAVEN=${REVISION_VERSION}-SNAPSHOT" >> $GITHUB_ENV
        if [ ${{ env.NEW_VERSION_REQUIRED }} == false ]; then VERSION=${VERSION_PREVIOUS_TAG/build-number/DEV}; else VERSION=${REVISION_VERSION}-DEV-${BUILD_NUMBER}; fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Set version for 'Artifact Build'
      if: "env.VERSION_TYPE == 'artifact'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        if [ ${{ github.repository }} != ${{ inputs.ROOT_REPOSITORY }} ]; then REPO=${{ github.repository }}-; else REPO=""; fi
        echo "VERSION_MAVEN=${REVISION_VERSION}-DEV-UNOFFICIAL" >> $GITHUB_ENV
        VERSION=${REVISION_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Save version to output variable
      id: version
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    - name: Save version maven format to output variable
      id: version_maven
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "VERSION_MAVEN=$VERSION_MAVEN" >> $GITHUB_OUTPUT
