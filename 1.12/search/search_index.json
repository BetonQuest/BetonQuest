{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"\ud83d\udc4b Welcome!","text":"<p>BetonQuest is an advanced and powerful quest plugin.  It offers RPG-style conversations with NPCs and an extremly flexible quest system.    </p> <p>It's multi-path conversations can be displayed in many ways ranging from basic clickable chat output, to all-new technologies. BetonQuest is not limited to simple, repetitive quests but can also power highly flexible ones that have never been seen before.</p> <p>This is made possible by support for more than 25 other plugins such as Citizens, MMOCore, MMOItems, MythicMobs, JobsReborn, Magic, McMMO, Denizen and Skript. You can also interact with other quest plugins such as \"Quests\" to maintain compatibility with existing Quests on your server.</p> <p>Please visit the page that fits your needs the most:</p> <p>Im a server owner!  Im a quester!  I want to contribute!  Im a developer! </p>"},{"location":"Features/","title":"Feature List","text":"<p>This page is unfinished and only shows some of our features.</p>  All other features can be found in the \"User Documentation\" tab."},{"location":"Features/#beautiful-multi-threaded-conversations","title":"Beautiful multi-threaded Conversations","text":"<p>Players can have immersive conversation with NPC's by utilizing BetonQuests Multi-Path-Conversation System. Questers can freely define multi-threaded stories, narrated with NPC conversations, and with multiple endings that affect a player's gameplay. Questers can also choose between five different styles to display their conversations.</p>   Sorry, your browser doesn't support embedded videos."},{"location":"Features/#custom-notification-system","title":"Custom Notification System","text":"<p>Questers can make use of BetonQuests notifyIO system that provides access to all of Minecafts GUI elements to display notifications. Therefore you can provide information to your players like so:</p>   Sorry, your browser doesn't support embedded videos.   <p>BetonQuest makes it possible to provide NPC conversations in any language. Each player can set his own language which means that - if translated - all conversations will be in the players native language.</p> <p>You can give players information about where they are in a quest using the \"Journal\". The Journal is a book in which you can write content based on the players actions.</p>"},{"location":"Features/#player-npc-and-hologram-hider","title":"Player, NPC and Hologram Hider","text":"<p>BetonQuest allows you to hide Players from each other based on whatever conditions you define. The same works for NPC's and HolographicDisplays Holograms.</p>  Sorry, your browser doesn't support embedded videos."},{"location":"Features/#upcoming-first-class-item-system","title":"[Upcoming] First Class Item System","text":"<p>BetonQuest allows for item customization far beyond what other plugins can do. You can use ANY item from ANY plugin in your quests as rewards or conditions. BetonQuest also features a set of powerful item flags that will add non-vanilla behaviour to your items. For example, you could make a proper \"Quest Item\" that cannot be thrown away and won't be dropped when the player dies. This system is really powerful, read the final concept to get an idea of what will be possible.</p>"},{"location":"Features/#countless-integrations","title":"Countless Integrations","text":"<p>BetonQuest supports dozens of plugins, ranging from standard plugins like WorldGuard/WorldEdit and Citizens to more advanced ones such as EffectLib. </p> <p>It also offers support for other quest plugins, so you can just keep your old quests and create further additions to your quest lines based upon the progress in your old plugin.</p> <p>If just Beton isn't enough you can always just hook into Skript or Denizen too.</p> <p>Full list of integrations here.</p>"},{"location":"Features/#examples","title":"Examples","text":"<p>Our community created a lot of cool stuff! Take a look at this handpicked selection: </p>"},{"location":"Features/#water-well-by-titanium","title":"Water Well by Titanium","text":"Sorry, your browser doesn't support embedded videos."},{"location":"Features/#wheat-press-by-titanium","title":"Wheat Press by Titanium","text":"Sorry, your browser doesn't support embedded videos."},{"location":"Features/#dialog-with-audio-by-bartos13","title":"Dialog with audio by Bartos13","text":""},{"location":"Features/#wandering-trader-by-ley","title":"Wandering Trader by Ley","text":"<p>The trader appears for a few minutes and then leaves until the next day.</p>  Sorry, your browser doesn't support embedded videos."},{"location":"For-Owners/","title":"Information for Owners","text":"<p>BetonQuest has quite a lot of features and use cases. This page will give you an overview on where BetonQuest works best. </p>"},{"location":"For-Owners/#advantages","title":"Advantages","text":"<ul> <li> <p>BetonQuest empowers your staff to write truly unique quests.     These can range from basic daily quests to complete storylines with multiple outcomes.   It offers extensive customization options which enables your staff to also make your servers quests look special.</p> </li> <li> <p>This is a free, OpenSource project. Any custom features you need can be contributed.</p> </li> <li> <p>BetonQuest integrates with 27 other plugins.</p> </li> <li> <p>BetonQuest can not only be utilized for quests but for light scripting. Some users use BetonQuest as the \"Backbone\" of   their server. This is made possible by our extensive support for 3th party plugins.   You can even run Denizen and Skript scripts from BetonQuest!</p> </li> <li> <p>BetonQuests  discord community    provides active support for you and your staff.</p> </li> <li> <p>This website provides in-depth learning material for your staff which teaches them all BetonQuest basics.   It also has guides on related topics such as the setup of a local test server,   so your main server will not get flooded with bugs while your staff learns to write quests.</p> </li> </ul>"},{"location":"For-Owners/#disadvantages","title":"Disadvantages","text":"<ul> <li>The creation of quests may take longer then with other plugins due to BetonQuests enormous flexibility.   This is also true for the learning curve, your staff will need some time to learn BetonQuest.   However, one of the goals of the further development of BetonQuest is to reduce the overhead that is needed for simple quests.</li> </ul>"},{"location":"For-Owners/#betonquest-vs-other-plugins","title":"BetonQuest vs. other Plugins","text":"Feature<sup>1</sup> BetonQuest Quests BeautyQuests QuestCreator MangoQuest Free   (20$) OpenSource API (Private)<sup>2</sup> Version Support 1.13.2-1.18 1.7-1.17.0 1.11-1.16.5 1.7-1.17.0 1.13-1.16.5 Database Support SQL Lite &amp; MySQL MySQL MySQL Bungee Support Per Player Language Multi-Path Conversations Client Side NPCs Ingame Editor Chat Included Paid Addon for GUI External Editor Organized File Structure Integrated Plugins 27 12 15 23 7 <p>ProQuest, QuestWorld (2) and Quest by LMBishop have been classified as way to limited or unknown to appear in this table. They are simple task plugins, not plugins that are able to create story driven quests.</p> <ol> <li> <p>This table has been last updated on the 17<sup>th</sup> of January 2021. If there are any mistakes let us know!\u00a0\u21a9</p> </li> <li> <p>This means that Open Source plugins cannot add support which is considered an unfriendly policy.\u00a0\u21a9</p> </li> </ol>"},{"location":"For-Questers/","title":"\ud83c\udfa8 For Questers","text":""},{"location":"For-Questers/#powerfull-tool","title":"Powerfull Tool","text":"<p>BetonQuest empowers you to create nearly any quest you can imagine. It provides dozends of premade but flexible systems that can be tuned to your liking.   Combine them to a truly unique quest, storyline, or even game!  </p> <p>Here is one example by \"Titanium\", one of your users:</p>  Sorry, your browser doesn't support embedded videos."},{"location":"For-Questers/#valuable-skill","title":"Valuable Skill","text":"<p>Not only can you let your imagination run wild on your own projects, you can also fulfill comissions for servers. Being able to write quests with BetonQuest is a valuable skill since you can make most admins dreams come true. BetonQuest is not only limited to quests but can also be used in combination with the Denizen or Skript plugins that allow you to create  things that would only be possible by coding your own plugin.</p> <p>Learning how to use BetonQuest is not super easy since it is quite complex due to its enormous flexibility. This website provides great learning material that will help you on your journey to become a good quester. If you struggle to understand something just join the community discord  and ask! Support is usually really fast.</p> <p>After learning BetonQuest you can create high quality quests for one of over 500 servers that run BetonQuest!</p> <p>Have a look on our feature page to see all the cool stuff in action!</p>"},{"location":"Contributing/Contributing/","title":"Contributing","text":"<p>First of all, thank you for looking at this page! </p> <p>You have numerous options to contribute to BetonQuest.  Check this list to see what fits your skills:</p>"},{"location":"Contributing/Contributing/#reporting-bugs","title":"Reporting bugs","text":"<p>You just need to follow the bug report template on GitHub to submit a bug report. Please give us all information that is requested in the template!</p>"},{"location":"Contributing/Contributing/#suggesting-features","title":"Suggesting features","text":"<p>Before you suggest a feature please make sure it does not already exist! Search in the docs and if you are not sure ask in the discord!  Once you are sure the feature does not already exist please also make sure nobody has already suggested it. Both things will save us time and therefore make it possible to implement more features.</p> <p>Once you did that too simply  open a new issue on GitHub. Maybe someday someone will find the time to make your dream come true. </p>"},{"location":"Contributing/Contributing/#translations","title":"Translations","text":"<p>We love to see this plugin used by people all around the globe. Therefore, we would be happy if you could translate it to your language and share the translation with me.  You can send us the edited messages.yml file via discord or submit a pull request.</p>"},{"location":"Contributing/Contributing/#improving-the-docs","title":"Improving the docs","text":"<p>If you want to help improve the docs in any way check the Docs Contributing Guidelines!</p>"},{"location":"Contributing/Contributing/#writing-code","title":"Writing code","text":"<p>If you want to write code for BetonQuest check the Developer Documentation!</p>"},{"location":"Contributing/Sponsors/","title":"\ud83d\udcb2 Patreon","text":"<p>This is a community funded project! Our monthly costs (server, domain, software licences) are paid by our Sponsors.</p> <p>Support us on Open Collective!  </p> <p>Thanks to all our Sponsors for making this project possible!</p>"},{"location":"Contributing/Documentation/Guidelines/","title":"\ud83d\udcda Guidelines","text":"<p>You need to follow these rules in order to contribute to the docs. They are important for a good user experience and provide a consistent baseline for other contributors to work with.</p>"},{"location":"Contributing/Documentation/Guidelines/#links","title":"Links","text":""},{"location":"Contributing/Documentation/Guidelines/#internal","title":"Internal","text":"<p>Links to internal pages can be opened in the same tab. This works with the normal markdown link syntax:</p> <p><pre><code>Click the [highlighted words](Contributing.md).\n</code></pre> Result: Click the highlighted words.</p>"},{"location":"Contributing/Documentation/Guidelines/#external","title":"External","text":"<p>Links to external sites must be opened in new tabs using this html code:</p> <p><pre><code>&lt;a href=\"https://betonquest.org/\" target=\"_blank\"&gt;Clickable text that opens a new tab&lt;/a&gt;\n</code></pre> Result: Clickable text that opens a new tab</p>"},{"location":"Contributing/Documentation/Guidelines/#displaying-yaml-code","title":"Displaying (YAML) code","text":"<p>You must use codeboxes with the specific language set in the header (<code>YAML</code> in this example). You also have to enable line numbers by adding the <code>linenums=\"1\"</code> argument.  <pre><code> ``` YAML linenums=\"1\"\n use: \"codeboxes for code\"\n ```\n</code></pre></p> <p>Result: <pre><code>use: \"codeboxes for code\"\n</code></pre></p>"},{"location":"Contributing/Documentation/Guidelines/#refering-to-yaml-elements-in-written-text","title":"Refering to YAML elements in written text","text":"<p>An example of this would be to reference an event name in an explanation.</p> <pre><code>The event `someEvent` prints a message to the player!\n</code></pre> <p>Result: The event <code>someEvent</code> prints a message to the player!</p>"},{"location":"Contributing/Documentation/Guidelines/#file-names","title":"File names","text":"<p>Replace all spaces in file and folder names with <code>-</code>!</p>"},{"location":"Contributing/Documentation/Guidelines/#lists","title":"Lists","text":"<p>Lists must be declared as such:</p> <pre><code>* Top Level\n    - Second Level\n    - Second Level\n* Another Top level\n</code></pre> <p>Result:</p> <ul> <li>Top Level<ul> <li>Second Level</li> <li>Second Level</li> </ul> </li> <li>Another Top level</li> </ul>"},{"location":"Contributing/Documentation/Guidelines/#line-length","title":"Line length","text":"<p>A single line may only have 170 characters. Please wrap at 121 though.</p>"},{"location":"Contributing/Documentation/Setup/","title":"\ud83d\udd27 Setup","text":""},{"location":"Contributing/Documentation/Setup/#setup","title":"Setup","text":""},{"location":"Contributing/Documentation/Setup/#quick-edits","title":"Quick Edits","text":"<p>Quick changes can be made by clicking the pencil icon at the top of each page. This lets you edit the docs directly in  your browser. The Guidelines still apply!</p> <p>All the files are markdown files. Markdown is the stuff you partially know from discord text highlighting.</p> <p><code>**Bold text**</code> result <code>_Italic text_</code> result</p>"},{"location":"Contributing/Documentation/Setup/#advanced-edits","title":"Advanced Edits","text":"<p>More advanced edits can be done with  IntelliJ  or any other IDEA.  This guide will show the process with it and includes some neat tricks that are exclusive to IntelliJ.</p> <ul> <li> <p>Clone in IntelliJ and select the \"Docs\" project scope.</p> </li> <li> <p>Create a new branch before you start editing anything.</p> </li> </ul> <p>Make sure Python3 is installed on your local system. If you use Python for more than this you might want to look into python virtual environments to avoid conflicts. This should not be the case for any non-devs though.</p> <p>You may need to install GTK if you are on Windows. Install all other dependencies by entering <code>pip install -r config/docs-requirements.txt</code> in the console.</p> <p>In case you are a material-mkdocs insider (paid premium version): Set your license key by executing <code>set MKDOCS_MATERIAL_INSIDERS=LICENSE_KEY_HERE</code> (Windows) in the console. Then run <code>pip install -r config/docs-requirements-insiders.txt</code> instead of <code>docs-requirements.txt</code>.</p> <p>The only thing thats missing once you have done all that is all large files (images &amp; videos). We use  Git LFS to store them, so you need to install that too. Just run <code>git lfs install</code> once you have executed the file that you downloaded from the Git LFS website. Then use <code>git lfs pull</code> to actually download the files.</p> <p>Congrats! You should be ready to go.</p>"},{"location":"Contributing/Documentation/Setup/#see-your-changes-live","title":"See your changes live","text":"<p>You are now primarily working with tools called mkdocs and  mkdocs-material-theme in case you want to google anything. All files are regular markdown files though.</p> <p>MkDocs enables you to create a website that shows you your changes while you make them. Execute this to see a preview of the webpage on 127.0.0.1:8000:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"Developer-Documentation/API/","title":"\u2699\ufe0f API","text":""},{"location":"Developer-Documentation/API/#accessing-the-plugin","title":"Accessing the plugin","text":"<p>Warning</p> <p>All existing API will break in BetonQuest 2.0 which is being worked on while you read this. If you plan on doing something with this API please keep in mind that you will need to change it again later.</p> <p>Add this to your pom.yml.</p> <pre><code>&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;betonquest-repo&lt;/id&gt;\n&lt;url&gt;https://betonquest.org/nexus/repository/betonquest/&lt;/url&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;pl.betoncraft&lt;/groupId&gt;\n&lt;artifactId&gt;betonquest&lt;/artifactId&gt;\n&lt;version&gt;1.12.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"Developer-Documentation/API/#writing-events","title":"Writing events","text":"<p>Writing events is the easiest. You need to create a class extending <code>QuestEvent</code> for each new event. The constructor must take one argument, an <code>Instruction</code> object. In the constructor you must extract all information from the instruction, for example skill names, locations etc. The description of the <code>Instruction</code> class is down below. Don't worry about checking event conditions, these are handled by the rest of BetonQuest's logic.</p> <p>Events are not bound to any player so firing it is done through <code>fire(String playerID)</code> method. You have to override it with your code responsible for doing stuff your event should do. Here you should use data previously parsed by the constructor. Don't access <code>Instruction</code> object here, it will lower the performance. You can convert <code>playerID</code> to <code>Player</code> object using the <code>PlayerConverter</code> class (it's a relict of times when both UUIDs and names could be used in Bukkit to identify players).</p> <p>If you want your event to be persistent, you need to set <code>super.persistent</code> variable to <code>true</code> in the constructor. This will make BetonQuest run this event even if the <code>playerID</code> points to an offline player, so prepare your code for that.</p> <p>If you want your event to be static, you need to set <code>super.staticness</code> variable to <code>true</code> in the constructor. This will allow BetonQuest to run this event with <code>playerID</code> set to <code>null</code>, so prepare your code for that.</p> <p>When you'll finish your class you need to invoke <code>registerEvents(String name, Class&lt;? extends QuestEvent&gt; class)</code> from BetonQuest instance (which you can get using <code>BetonQuest.getInstance()</code> static method). The name for your event will be used in instruction strings (such as \"journal\" for journal event). The class argument is the <code>Class</code> object of your event. You can get it using <code>YourEvent.class</code>. That's it, you created an event. Don't forget to check it for bugs!</p> <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>"},{"location":"Developer-Documentation/API/#writing-conditions","title":"Writing conditions","text":"<p>Writing conditions is easy too. They must extend <code>Condition</code> and override <code>execute(String playerID)</code> method, which should return <code>true</code> or <code>false</code>, depending on if the condition was met. You register them using <code>registerConditions(String name, Class&lt;? extends Condition)</code> method from BetonQuest instance as well. The rest is almost the same, you're defining the constructor which will parse the <code>Instruction</code> object and overriding <code>execute(String playerID)</code> method to check if the player meets the condition. Don't worry about inverting it, as it's automatically done by BetonQuest.</p> <p>Conditions are always getting an online player in the <code>execute(String playerID)</code> method, so you don't need to check that manually.</p> <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>"},{"location":"Developer-Documentation/API/#writing-objectives","title":"Writing objectives","text":"<p>Objectives are more complicated because they use event handlers and they must store players' data. They extend <code>Objective</code> class. As always, you need to extract all data from supplied <code>Instruction</code> object in the constructor. Don't register listeners in the constructor!</p> <p>If your objective handles changing data (like amount of mobs left to kill) you should create a class extending <code>ObjectiveData</code>. For example <code>block</code> objective does need to store amount of blocks left to place/break, and it does that using \"BlockData\" class. In the constructor it receives three strings: data string, ID of the player and ID of the objective. The latter two are used by BetonQuest to correctly save and load the former one from the database.</p> <p>The data string should contains all the information you need in your objective. You must write a parser which will extract the information, methods used in the objective to alter the information, and override the <code>toString()</code> method in so it returns data string in the format parsable by your parser. Everytime the data in your object changes (like when killing a mob), you need to call <code>update()</code> method. It will save the data to the database.</p> <p>Now you should override <code>getDefaultDataInstruction()</code> method. It must return the default data instruction understandable by your parser. For example in <code>tame</code> objective it will return the amount of mobs to tame. If you don't use data objects, just return an empty string (not <code>null</code>, just <code>\"\"</code>).</p> <p>In order for your objective to use the data object you have created you need to set the <code>template</code> variable to this object's class. If you're not defining the data object (because you don't need to handle the changing data), you should set the <code>template</code> simply to <code>ObjectiveData.class</code>.</p> <p>Every time your objective accepts the player's action (for example killing the right mob in MobKill objective) it must be also verified with <code>checkConditions()</code> method. You don't want your objective ignoring all conditions, right? When you decide that the objective is completed you should call <code>completeObjective()</code> method. It will fire all events for you, so you don't have to do this manually.</p> <p><code>start()</code> and <code>stop()</code> methods must start objective's listeners and stop them accordingly. It's because the plugin turns the objective's listeners off if there are no players having it active. Here usually you will register/unregister listeners, but some objectives may be different. For example <code>delay</code> objective starts and cancels a runnable, instead of using listeners.</p> <p>If your objective has some properties (used in variables) you should override the <code>String getProperty(String property, String playerID)</code> method. At runtime, if anyone uses <code>%objective.yourObjective.theProperty%</code> variable, BetonQuest will call that method with <code>theProperty</code> keyword as the first argument. Using it you should parse the data of the objective and return it as a String. If the supplied property name is incorrect or there was an error during getting the value, return an empty String and optionally log an error (<code>LogUtils.getLogger().log(...)</code>).</p> <p>Objectives are registered the same way as conditions and events, using <code>registerObjective(String name, Class&lt;? extends Objective&gt;)</code> method.</p> <p>Warning</p> <p>IDE's typically autocomplete the wrong constructor. A correct constructor takes a single <code>Instruction</code> argument.</p>"},{"location":"Developer-Documentation/API/#reading-instruction-object","title":"Reading <code>Instruction</code> object","text":"<p>The <code>Instruction</code> object parses the instruction string defined by the user and splits it into arguments. You can ask it for required arguments one by one with <code>next()</code> method or a parser method like <code>getQuestItem()</code>. Required arguments are the ones specified at the very beginning of an instruction string, for example <code>add someTag</code> in <code>tag</code> event. It will automaticly throw <code>InstructionParseException</code> for you if it encounters an error, for example when there were no more arguments in user's instruction or it can't parse the argument to the type you asked for.</p> <p>You can also ask for optional arguments: if the instruction string contains argument <code>arg:something</code> and you ask for optional <code>arg</code>, it will give you <code>something</code>. If there is no optional argument, it will return <code>null</code>. Don't worry about passing that <code>null</code> to parser methods like <code>getLocation(String)</code>, they won't throw an error, they'll simply return that <code>null</code>.</p> <p>Parser methods are there for your convenience. You could write a location parser for yourself, but there's no need for that, you can just use <code>getLocation()</code> or <code>getLocation(String)</code> method and receive <code>LocationData</code> object. The former method is simply <code>getLocation(next())</code>.</p> <p>If your instruction is more complicated and <code>Instruction</code> class doesn't provide necessary methods, you can still parse the instruction string manually. You can get it with <code>getInstruction()</code> method. Just remember to throw <code>InstructionParseException</code> when the instruction supplied by the user is incorrect. BetonQuest will catch them and display a message in the console.</p>"},{"location":"Developer-Documentation/API/#writing-variables","title":"Writing variables","text":"<p>All variables need to extend <code>Variable</code> class. In the constructor you must parse the instruction and extract all information about your variable's behavior. Then you have to override the <code>String getValue(String playerID)</code> method. It should return the value of the variable for the supplied player. If it's impossible, it should return an empty String. Registering variables is done via <code>BetonQuest.registerVariable(String name, Class&lt;? extends Variable&gt; variable)</code> method.</p>"},{"location":"Developer-Documentation/API/#firing-events","title":"Firing events","text":"<p>The plugin has a static method for firing events - <code>event(String playerID, EventID eventID)</code>. First parameter is ID of the player. Second one represents ID of the event. To get it, simply create an instance of the <code>EventID</code> class. You can't fire an event directly using an instruction string.</p>"},{"location":"Developer-Documentation/API/#checking-conditions","title":"Checking conditions","text":"<p>BetonQuest has static boolean method <code>condition(String playerID, String conditionID)</code>. It works similarly as event method described above.</p>"},{"location":"Developer-Documentation/API/#starting-objectives","title":"Starting objectives","text":"<p>The <code>newObjective(String playerID, String objectiveID)</code> method will launch the objective from start. You can however use <code>resumeObjective(String playerID, String objectiveID, String instruction)</code> to pass your own <code>ObjectiveData</code> instruction to the objective. It will not be saved to the database, because it is assumed that the objective has just been loaded from it and it exists there without any change. You should save it manually.</p>"},{"location":"Developer-Documentation/API/#creating-additional-conversation-inputoutput-methods","title":"Creating additional conversation input/output methods","text":"<p>In order to register an object as the conversation input/output it needs to implement <code>ConversationIO</code> interface. The constructor will receive three arguments: Conversation object, playerID String and NPC name String. It needs to parse the required data here and register all needed listeners. The <code>setResponse(String response)</code> method will receive NPC's text from the conversation. The <code>addOption(String option)</code> method will be called by the conversation for each reply option for this NPC text. The object must store all this data and when <code>display()</code> is called, it must use it to display the player the output. When it detects that the player chose an answer, it should pass it to the conversation using <code>Conversation.passPlayerAnswer(int number)</code> method. The integer is the number of the answer, starting at 1. <code>clear()</code> method will be called at the beginning of the new conversation cycle. It should clear all the previous options, so they do not overlap. <code>end()</code> method will be called when the conversation ends and it should unregister all listeners. You can also call that message when you detect that the player forced conversation ending (for example by moving away from the NPC). Remember to notify the conversation about that using <code>Conversation.end()</code>.</p> <p>Registering the conversation inputs/outputs is done in the same way as objectives, events and conditions, through <code>BetonQuest.registerConversationIO(String name, Class&lt;? extends ConversationIO&gt;)</code> method.</p>"},{"location":"Developer-Documentation/API/#listening-to-betonquest-bukkit-events","title":"Listening to BetonQuest (Bukkit) events","text":"<p>BetonQuest calls Bukkit events on a few occasions: when a conversation is started, finished and when an option is selected. You can find these events in <code>pl.betoncraft.betonquest.api</code> package and use them in your plugins. If you need any additional events just open and issue on GitHub or send me a pull request.</p>"},{"location":"Developer-Documentation/API/#debugging","title":"Debugging","text":"<p>You can debug your code using <code>LogUtils</code> class by simply call <code>LogUtils.getlogger().log(..)</code> to log something.</p> <p>We use the following levels for this aspects: - <code>SEVER</code> - Anything happen, that breaks the plugin, or a main function of the plugin - <code>WARNING</code> - The most things, where something not normal or unexpected happens, but the plugin still work correctly for the rest(all catch blocks, when not SEVER) - <code>INFO</code> - Anything you want to log, that also should appear in the normal console - <code>CONFIG</code> - Not in use at the moment - <code>FINE</code> - All messages, that you want to only appear in the debug log file, not in the console - <code>FINER</code> - Do not use this, this is reserved, for exception logging, like you call LogUtils.logThrowable or LogUtils.logThrowableIgnore - <code>FINEST</code> - Not in use at the moment</p> <p>If you have a <code>catch</code> block, please log this with a message, that calls <code>exception.getMessage()</code> and log the complete exception by using the <code>Logutils.logThrowable(e)</code>. The methods <code>logThrowableReport()</code> and <code>logThrowableIgnore()</code> may only be executed by BetonQuest.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/","title":"Contributing Guidelines","text":"<p>The BetonQuest organisation recommends IntelliJ Community Edition as the preferred IDE. This makes it possible to ship a complete project setup that ensures a consistent code quality and style. The project has been setup using maven and will build immediately on your device without any extra work (like manually adding dependencies).</p> <p>Everyone that wants to use another IDE can do so but has to ensure that their code meets the guidelines. Notice that everything that is prescribed in the Coding Guidelines will be checked by the Build-Pipeline. The Build-Pipeline will not accept commits that fail to respect the guidelines.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#walkthrough-of-the-guidelines","title":"Walkthrough of the Guidelines","text":""},{"location":"Developer-Documentation/Contributing-Guidelines/#setup","title":"Setup","text":"<p>You can clone the project from our GitHub repository:</p> <pre><code>git clone https://github.com/BetonQuest/BetonQuest.git\n</code></pre>"},{"location":"Developer-Documentation/Contributing-Guidelines/#get-ready-to-create-a-pull-request","title":"Get ready to create a Pull Request!","text":""},{"location":"Developer-Documentation/Contributing-Guidelines/#test-your-changes","title":"Test your changes!","text":"<p>Please ensure your changes actually work and haven't introduced any bugs. Therefore, you should compile the plugin and run it on a local 1.13+ test server. Please install any related dependencies! If you changed code related to MySQL then setup a MySQL on your machine and test if BetonQuest still saves its data correctly. </p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#does-your-change-require-updates-to-users-configs","title":"Does your change require updates to users configs?","text":"<p>This would be the case if you removed arguments or renamed e.g. an event. You then have to write code to update any related configs to your new syntax. Search for the ConfigUpdater class in the project to see how its done.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#validate-your-codes-quality","title":"Validate your codes quality","text":"<p>Please check you code with PMD. IntelliJ's plugin store offer the QAPlug &amp; QAPlug - PMD plugins for free. We provide our own ruleset for PMD (config/pmd-ruleset.xml) that needs to be imported in QAPlug.  To do so open IntelliJ's settings and navigate to  QAPlug -&gt; Coding Rules. Click the plus and select Project Profile. Now you just need to tick \"Import Profile\" to add our ruleset (config/pmd-ruleset.xml).</p> <p>Please also remove any TODO's along with commented out code.</p> <p>You can run <code>mvn verify</code> locally to ensure that you meet (nearly) all conditions before creating a PR.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#update-the-changelog","title":"Update the Changelog","text":"<p>You need to add your changes to the Changelog.md file that can be found in the projects root folder.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#update-the-documentation","title":"Update the documentation","text":"<p>You also need to document changes or additions to the plugins feature set in our documentation. Please notice that the documentation  also has it's own guidelines.</p>"},{"location":"Developer-Documentation/Contributing-Guidelines/#clean-the-commit-history","title":"Clean the commit history","text":"<p>You need to have a clean commit history in order to get you PR accepted. Check out this guide if you don't know how to do so.</p>"},{"location":"Developer-Documentation/Versioning-and-Releasing/","title":"Versioning and Releasing","text":""},{"location":"Developer-Documentation/Versioning-and-Releasing/#versioning","title":"Versioning","text":"<p>BetonQuest follows the Semantic Versioning specification.</p> <p>We adapt the specification with these version types: * <code>1.12.0</code> for git version tags <code>v*</code> (in the official repository) * <code>1.12.0-DEV-1</code> for commits to <code>main</code> or branches called <code>main_v*</code> (in the official repository) * <code>1.12.0-DEV-ARTIFACT-5522</code> for commits to other branches (or repos) and Pull requests * <code>1.12.0-DEV-UNOFFICAL</code> for local builds</p> <p>Only use the three digits(Major, Minor, Patch) to specify versions in files like the pom.xml. All suffixes are set by the build-pipeline.</p> <p>The officially distributed jar does not contain the version in its name due to limits with the Spigot updater. Therefore, it's named <code>BetonQuest.jar</code>. The version can only be seen ingame by using <code>/q version</code>.</p>"},{"location":"Developer-Documentation/Versioning-and-Releasing/#releasing","title":"Releasing","text":"<p>This project has a custom build-pipeline that utilizes GitHub('s) actions.</p>"},{"location":"Developer-Documentation/Versioning-and-Releasing/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Check out the remote branch or commit, that you want to use for the release. Make sure that the current version in all the files (pom.xml etc.) is the correct version that should be used for the release.</p>"},{"location":"Developer-Documentation/Versioning-and-Releasing/#step-2-build-a-release","title":"Step 2: Build a release","text":"<p>Run the script <code>./.github/scripts/release.sh</code>. It leads you through the creation of a release. If you run into errors you may need to do the script's release steps manually. </p>"},{"location":"Downloads/","title":"Home","text":""},{"location":"Downloads/#release-builds","title":"Release Builds","text":"<p>The latest release.</p> <p>Loading latest Release-Build...</p> Show all Release-Builds <p> </p>"},{"location":"Downloads/#development-builds","title":"Development Builds","text":"<p>Development builds are available for testing purposes. They are not recommended for production use.</p> <p>Loading latest Development-Build...</p> Show all Development-Builds <p> </p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/","title":"FAQ","text":"<p>If you have any questions please read this page first. You can easily look for your questions using the table of contents  to the right. It's very likely that it has been already asked and answered.  If not, feel free to ask us in the discord  !.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#where-is-the-command-for-creating-quests","title":"Where is the command for creating quests?","text":"<p>There is no such command. BetonQuest is too complex to edit it using commands or chest GUI's. We have a VSCode addon to make editing easier.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#can-you-add-particles-over-npcs-heads-like-in-quests-plugin","title":"Can you add particles over NPCs' heads like in \"Quests\" plugin?","text":"<p>Yes! Check out the EffectLib compatibility documentation.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#can-i-assign-multiple-conversation-files-to-one-npc","title":"Can I assign multiple conversation files to one NPC?","text":"<p>No. You can use cross-conversation-pointers though.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#can-i-delete-all-tags-from-a-player-at-once","title":"Can I delete all tags from a player at once?","text":"<p>No. You either need to run all <code>/q t del PLAYER PACKAGE.TAG</code> commands, or you can use <code>/q purge PLAYER</code> to reset an entire player profile. If you want this as a scripted part of your quest however: Either use a folder event that holds all tag-deleting events. Or use a <code>run</code> event in which you specify all tag-deleting events at once. (We will improve this don't worry)</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-do-i-start-an-objective-from-a-conversation","title":"How do I start an objective from a conversation?","text":"<p>Use the objective event.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#why-is-x-thing-not-working","title":"Why is X thing not working?","text":"<p>If something stopped working before asking for help please do /q reload and READ THE OUTPUT IN CONSOLE! You will be able to see which events etc. loaded and which didn't with the reasons why. You may be able to fix it yourself from this or use this information, so we can better help you!</p> <p>Also double check you saved your files and if needed reupload them to your server. This is insanely common and can be overlooked!</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#i-have-an-error-which-says-cannot-load-pluginsbetonquestsomefileyml-what-is-wrong","title":"I have an error which says \"Cannot load plugins/BetonQuest/{someFile}.yml\", what is wrong?","text":"<p>You have incorrect YAML syntax in your conversation file. Usually it's because you started a line with <code>!</code> or <code>&amp;</code>, forgot colons or made some weird things with apostrophes.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-to-get-a-formatted-version-of-the-blockobjectives-variables","title":"How to get a formatted version of the BlockObjective's variables?","text":"<p>The math variable is perfect for this. <code>/papi parse USER %betonquest_BlockVar:math.calc:|objective.test.left|%</code></p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-to-display-1-10-in-objective-notify","title":"How to display \"1 / 10\" in objective notify","text":"<p>This problem can be solved by scripting a small custom message system.</p> <p>The core ideas of that system are:</p> <ul> <li> <p>An objective always has an amount of 1 as we want to show a message upon each progression towards our goal.</p> </li> <li> <p>The objective instantly restarts after it is finished thanks to the <code>persistent</code> argument.    It will be deleted using the objective event once it's finished.</p> </li> <li> <p>The systems logic is essentially just a point variable that is increased on each completion and a notify event being run.   That notify event displays a the current objective progress.</p> </li> <li> <p>The objective gets reset with an event that has a condition bound to it. That means that the event will only be run once   the condition is true. in this case the player needs 10 points / needs to have mined 10 blocks.</p> </li> </ul> <p>Here is an example for the block objective. <pre><code>#objectives.yml\nmineStone: \"block stone -1 persistent events:blockBroken\"\n\n#events.yml\nblockBroken: \"folder addPoint,sendNotify,checkForCompletion\"\n\naddPoint: \"point blockCounter 1\"\nsendNotify: \"notify &amp;a%point.blockCounter.amount%&amp;8/&amp;210 &amp;7stone broken. io:chat\"\n\ncheckForCompletion: \"run ^objective remove mineStone ^deletepoint blockCounter conditions:has10Points\"\n\n#conditions.yml\nhas10Points: \"point blockCounter 10\"\n</code></pre></p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-can-i-let-the-npc-say-things-across-multiple-lines","title":"How can I let the NPC say things across multiple lines?","text":"<p>You need to use the PIPE <code>|</code> character at the start of the multiline string. <pre><code>text: |\nThis is line one.\nThis is line two.\n\nYou\ncan also\nformat this using spaces.\n</code></pre></p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-to-deal-with-unresolvable-variables-that-show-0","title":"How to deal with unresolvable variables that show \"0\"?","text":"<p>You can just add them together using <code>math.calc</code>. <pre><code>%math.calc:objective.PickWheat1.left+objective.PickWheat2.left+objective.PickWheat3.left+objective.PickWheat4.left'\n</code></pre></p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-to-match-different-items-with-just-one-condition","title":"How to match different items with just one condition?","text":"<p>If you want a player to have e.g. <code>potato + poisonous_potato = 64</code> in his inventory you can make a special item in your  items.yml file that matches items based of their names.  More specifically, you can have a Block Selector that is a regex. It would look like this in the example: <pre><code>#items.yml\nanyPotato: \".*potato.*\"\n\n#conditions.yml\nhasAnyPotato: \"item anyPotato\"\n</code></pre></p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#how-to-store-custom-text-in-a-variable-how-to-use-the-variable-objective","title":"How to store custom text in a variable / How to use the variable objective?","text":"<ol> <li> <p>Start a variable objective for the player. It serves as a variable storage: <pre><code>#objectives.yml\nmyVariableStorage: \"variable no-chat\"\n</code></pre></p> </li> <li> <p>Assign values to that storage using a key and a value. Both can be any text you like: <pre><code>#events.yml\naddBlock: \"variable myVariableStorage blockName REDSTONE\"\naddLocation: \"variable myVariableStorage location 123;456;789;world\"\n</code></pre></p> </li> <li> <p>Read from your variable storage using the storages name and the data key. <pre><code>#conditions.yml\nhasHeartBlock: \"testforblock %objective.myVariableStorage.location% %objective.myVariableStorage.blockName%\"\n</code></pre></p> </li> </ol>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#error-quester-is-not-defined","title":"Error \"Quester is not defined\"","text":"<p>You either actually did not define the <code>quester: someName</code> option at the top of your conversation, or your YAML syntax is invalid. YAML Syntax Errors are the HUGE red lines that you see when you do /q reload. They lead to the file not being properly read -&gt; All kinds of errors like \"can't find quester etc.\" Copy your file into http://www.yamllint.com/ to confirm that it is actually a YAML error and fix your syntax. Best practise is to define all options like this: <code>myOptionName: \"myData\"</code> The double quotes prevent YAMl issues with e.g. <code>!</code>.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#other-plugins-override-betonquest-commands-betonquest-overrides-other-commands","title":"Other plugins override BetonQuest commands / BetonQuest overrides other commands!","text":"<p>You can change which command is used using a Bukkit feature: https://bukkit.gamepedia.com/Commands.yml</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#handling-death-in-your-quests","title":"Handling death in your quests","text":"<p>Sometimes, while writing a dangerous quest you will want something specific to happen when the player dies. If it's a boss battle you may want to fail the quest, if it's a dungeon you may want to respawn the player at the beginning of a level etc. You can do that with <code>die</code> objective - simply start it for the player at the beginning of the quest and make it fire events that will do the thing you want (like teleporting the player to desired respawn point, removing tags set during the quest etc). You can add <code>persistent</code> argument to the objective instruction string to make it active even after completing it. Remember to <code>delete</code> it after the quest is done!</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#creating-regions-for-one-player-at-the-time","title":"Creating regions for one player at the time","text":"<p>Imagine you have a room to which the player is teleported. Then suddenly mobs start to spawn and the player must kill them (because it's a trap or something). The player has killed all the mobs, he got a tag and wants to proceed but all of the sudden another player teleports into the room and all the mobs start to spawn again. The first player is quickly killed and the second one easily kills all mobs. You can prevent such situations by using <code>party</code> condition. Just check with it if the party consisting of \"players inside the room\" has greater amount of players that 1. Set the range to something big enough so it covers the room and the party condition can be tag or location.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#racing-with-folder-event","title":"Racing with folder event","text":"<p>Since <code>folder</code> event can run <code>tag</code> events even for offline players you can create races. Create <code>location</code> objective where you want the finish line to be and condition it with negated \"race_failed\" tag (or similar). It will mean that \"if the player has not failed the race, he can win it by reaching the location\". Now when the race starts fire <code>folder</code> event with the amount of time you want to give your players to complete the race. This event should set \"race_failed\" tag. If the player reaches the location before this tag is set, he will fire all events in that <code>location</code> objective, but if the time has passed, the objective will not be completed. You can figure the rest out for yourself.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#random-daily-quests","title":"Random daily quests","text":"<p>Starting the random quest must be blocked with a special tag. If there is no such tag, the conversation option should appear. Create a few quests, each of them started with single <code>folder</code> event (they must be started by single event!). Now add those events to another <code>folder</code> event and make it <code>random:1</code>. At the end of every quest add <code>delay</code> which will reset the special blocking tag. Now add that <code>folder</code> event to the conversation option. When the player chooses it he will start one random quest, and the conversation option will become available after defined in <code>delay</code> objective time after completing the quest.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#the-same-random-daily-quest-for-every-player","title":"The same random daily quest for every player","text":"<p>To do this use something called \"Static event\". Run a static <code>folder</code> event every day at some late hour (for example 4am). The <code>folder</code> event should be <code>random:1</code> and contain several different <code>globaltag</code> events. These events will set a specific tag. Now when the player starts the conversation and asks about the daily quest the NPC should check (using the <code>globaltag</code> condition) which tag is currently set and give the player different quests based on that. Of course, the static folder event also needs to remove the the current tag before setting a new one.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#global-quests-all-players-work-together","title":"Global Quests (all players work together)","text":"<p>There is no super easy way to do this yet. One would do this: Create an objective that is immediately fired upon the first action (this means setting the amount to one for most objectives). That objective must be <code>persistent</code> so it restarts immediately upon completion. It would trigger a <code>globalpoint</code> event that increases some globalpoint variable by one. That globalpoint variable tracks the players combined progress as it is the same for all of them. Therefore, there must also be some sort of <code>globalpoint</code>condition that checks whether the \"global objective\" has been completed. It must be checked in a \"checkCompletion\" event that is run alongside the globalpoint event. It could look like this:</p> <pre><code>checkCompletion: \"run ^objective delete globalQuest ^folder giveRewards,notifyRewards conditions:globalObjectiveDone\"\n</code></pre>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#make-the-npc-react-randomly","title":"Make the NPC react randomly","text":"<p>Imagine you want to lie to NPC and he has 15% chance of believing you completely, 35% of being suspicious and 50% of not believing at all. The common denominator for those percentages is 20, so we can write it as 3/20, 7/20 and 10/20. The NPC will check options one after another until it finds one which meets all conditions. We will use <code>random</code> condition with our options. The first one will have <code>3-20</code> chance (that's the format used by <code>random</code> condition). If this condition fails, the NPC will check next option. But it won't be <code>7-20</code>, because we already \"used\" 3 of 20. If you wrote it like that, the chance would be too low. That's why it will be <code>7-17</code>. The third option should have <code>10-10</code> (because <code>17 - 7 = 10</code> and 50% is 10/20), but as you can see it will always be true. It's because we want the last option to be shown if both previous fail. You don't have to add the last condition at all.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#quest-gui","title":"Quest GUI","text":"<p>If you want your players to be able to choose a quest everywhere, every time, then you can create a conversation which can be started with an item. This one is a little hacky but it shows flexibility of BetonQuest. First you need a conversation which behaves as a quest choosing GUI. Name the NPC \"Quester\", add one option for each quest etc. Now you need an objective which will start this conversation using <code>conversation</code> event. It should be <code>action</code> objective, set to right click on any block. Add <code>hand</code> condition to make it accept only clicks with a specific item and make the objective <code>persistent</code> (so players can use it multiple times). The item used here should be marked as Quest Item so players can't drop it. Now define new global location covering your whole map and using it start the objective and give players the item. This way all players (existing and new) will get the quest item, which opens a GUI with quests when right clicked.</p>"},{"location":"Learn-Beton/Frequently-Asked-Questions/#non-linear-objectives-in-quests","title":"Non-Linear Objectives in Quests","text":"<p>If ever you're making a quest that has the player completing multiple objectives at once in order to complete the quest itself, you may want to add the option of being able to complete the objectives in a non-linear fashion (Objective C -&gt; Objective A -&gt; Objective B -&gt; Completed). There are multiple ways of doing this but this one is probably the simplest. Firstly, create as many objectives as you want. We are going to be working with three objectives:</p> objectives.yml <pre><code>Objective_A: Objective_Arguments events:Rewards\nObjective_B: Objective_Arguments events:Rewards\nObjective_C: Objective_Arguments events:Rewards\n</code></pre> <p>Now that the player has been given these three objectives, we will also create three <code>objective</code> conditions that check the player for these objectives:</p> conditions.yml <pre><code>Has_Objective_A: objective Objective_A\nHas_Objective_B: objective Objective_B\nHas_Objective_C: objective Objective_C\n</code></pre> <p>We will also create one <code>and</code> condition, which means a player must (or must not, depending on negation)  meet all conditions in order for it to return as true. In this case, the player must not be in the process of completing these objectives. The <code>!</code> in front of the ConditionIDs negates the arguments within the condition. Make sure you have wrapped the condition with <code>'</code> or <code>\"</code> depending on your preferences.</p> conditions.yml <pre><code>All_Objectives_Done: 'and !Has_Objective_A,!Has_Objective_B,!Has_Objective_C'\n</code></pre> <p>Finally, create the event that you wanted to use to give the quest rewards to the player. To this event, you will add the <code>All_Objectives_Done</code> condition. This ensures that the event will not be fired unless the player has completed all objectives.</p> events.yml <pre><code>Rewards: RewardEventArguments condition:All_Objectives_Done\n</code></pre> <p>Now, simply add this <code>Rewards</code> event to every one of your objectives and you have now created a way for players to complete a quest's objective in a non-linear fashion! You can add as many or as little objectives as you want, you just have to add the additional objectives to the conditions.</p>"},{"location":"Learn-Beton/Welcome/","title":"Welcome!","text":"<p>About learning BetonQuest 1.12.X</p> <p>It is not recommended to learn BetonQuest 1.12.X as it is a legacy version and will only receive bug fixes. Instead, start with 2.0.0-DEV! It's a complete overhaul of the plugin and has a lot of new features.  While it is still in development, more than 100 servers run it already as it's very stable.     </p> <p>There are also much better tutorials for 2.0.0! </p> <p> 2.0.0-DEV Tutorials</p> <p>Welcome to BetonQuest! Thank you for trying it out. This plugin can do some really  cool stuff and therefore requires some learning.</p> <p>If you ever struggle with anything please don't hesitate to ask in the   discord  !   Its best to join it now before you forget we have one!</p> <p>Start your journey by setting up a local test server.</p>"},{"location":"Learn-Beton/Getting-Started/Installing-BetonQuest/","title":"Installation","text":"<p>In order to use BetonQuest you (obviously) need to add the <code>BetonQuest.jar</code> that you downloaded from Spigot to your plugins folder. If there is no plugin folder in your servers folder simply create one. You also need Citizens to make some cool  looking NPC's. If you can't afford to buy it you can download it for free. Just give the first paragraph of their Spigot page a good read and you will find the link. Also put the <code>Citizens.jar</code> file in your servers plugin folder.</p> <p>Once you have installed these start up your server!</p> <p>Next step: Setting up the editor</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/","title":"\ud83c\udf93 Learn BetonQuest","text":"<p>There are two ways to get started with BetonQuest:</p> <p>About learning BetonQuest 1.12.X</p> <p>It is not recommended to learn BetonQuest 1.12.X as it is a legacy version and will only receive bug fixes. Instead, start with 2.0.0-DEV! It's a complete overhaul of the plugin and has a lot of new features.  While it is still in development, more than 100 servers run it already as it's very stable.     </p> <p>There are also much better tutorials for 2.0.0! </p> <p> 2.0.0-DEV Tutorials</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#checking-out-the-default-example-quest","title":"Checking out the \"default\" example quest.","text":"<p>Let's start by checking out the build in example quest. You can find it in the BetonQuest directory that has been generated in your plugins folder. The folder you are looking for is named \"default\".</p> <p>Open it up and find a file called main.yml. It contains a lot of options, but you only need to look at this section: <pre><code>npcs:\n'0': innkeeper\n</code></pre> You will need to change the <code>'0'</code> to the ID of the Citizens NPC you want to learn Beton with.  You obtain a NPC's ID by selecting it with /npc sel while looking at it and then running /npc id.  Execute /q reload and right-click the NPC.</p> <p>The conversation should start. If it did not, check if you correctly assigned the ID. Ask the Innkeeper for some quests. He will tell you to cut some trees. If you want, type /journal to get the journal and see a new entry. Now, don't try to place any wood blocks. BetonQuest will detect that and increase the number of blocks to destroy. Just go and find some trees that you can cut down. Now you can return to the Innkeeper and give him the wood. You will receive the reward.</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#using-events-and-conditions","title":"Using events and conditions","text":"<p>Now that you know how a (very) simple quest looks like time to start learning how to write something similar.  Let's start with events. We won't do conversations just now, since they heavily use events and conditions,  so you need to know them first. You can read complete reference to events in the Reference chapter. Do that now or just continue with this tutorial.</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#events","title":"Events","text":"<p>Let's just open events.yml file inside the default package. Add a new line at the bottom:</p> <pre><code>mega: \"notify Hello world!\"\n</code></pre> <p>This is an event instruction. BetonQuest will use it to determine what type of event is used and what exactly it should do. <code>mega</code> is the event's name, <code>notify</code> is the events type and <code>Hello world!</code> tells the notify event what it needs to display. In this case, if you run <code>mega</code> event, it will display <code>Hello world!</code> as a chat message. Now save the file, issue /q reload command and run the event with /q e {name} default.mega command (<code>q</code> is shortcut for <code>quest</code>, <code>e</code> is shortcut for <code>event</code>, <code>{name}</code> is your Minecraft name without the brackets, <code>default</code> is the package/quest and <code>mega</code> is the name of the event we've just created). It should show you a <code>Hello world!</code> notification in the chat.</p> <p>Let's create another event, a more complicated one. <code>teleport</code> seems complicated enough. As you can read in the Events list, it needs a single argument, the location. Press F3 and check out your current location (it's shown on the left, three numbers, <code>x</code>, <code>y</code> and <code>z</code>). Now add in events.yml another line:</p> <pre><code>tp: \"teleport 100;200;300;world\"\n</code></pre> <p>and replace <code>100</code> with your <code>x</code> coordinate, <code>200</code> with <code>y</code> and <code>300</code> with <code>z</code>. <code>world</code> needs to be replaced with your  current world's name. Save the file, reload the plugin (/q reload) and run this event with a command described before. It should teleport you to the location you have specified.</p> <p>Congratulations, you have just created your first events. Go ahead and do some experiments with other event types.  You can find them in Events list chapter. Once you're done let's start learning conditions.</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#conditions","title":"Conditions","text":"<p>Open the conditions.yml file and add a new line:</p> <pre><code>mega: \"location 100;200;300;world 5\"\n</code></pre> <p>Can you see how we named the <code>mega</code> condition in the same way as the <code>mega</code> event? They are not connected in any way. Condition names and event names are separated, so you can give them the same name without any problems. Now let's look at the instruction string. As you can suspect, <code>location</code> is a type of the condition. This one means that we'll be  checking if the player is near that location (you should change the location to the place where you're standing right now, so you don't have to run around the world). Note that at the end of location argument there is an additional number, <code>5</code>. This is the maximum distance you can be away from the location to meet the condition. Alright, save the file and reload the plugin.</p> <p>Now walk to the location you have defined in the condition. Try to stand on the exact block corresponding to that location.  Issue /q c {name} default.mega command (<code>c</code> is shortcut for <code>condition</code>). It should show you \"Condition blah blah blah: true\". We're focusing on that last word, true. This means that you're meeting the condition: you're standing within 5 block radius of the location. Now move 2 blocks away and issue that command again. You should still be meeting the condition.  Walk 4 more blocks away and try now. It should show false. You are now outside of that 5 block radius. Get it? Great.</p> <p>Now I'll show you the simplest use of those conditions. Open the events.yml file again, and at the end of <code>mega</code>  instruction add <code>conditions:mega</code> argument. By the way, rename your events to something that actually fits the type of the event, otherwise it will get confusing really fast. Example:</p> events.ymlconditions.yml <pre><code># This is a comment btw\n# Old:\nmega: \"notify Hello world!\"\n\n# New:\nsayHello: \"notify Hello world! conditions:isAtSpawn\"\n</code></pre> <pre><code># Old:\nmega: \"location 100;200;300;world 5\"\n\n# New:\nisAtSpawn: \"location 100;200;300;world 5\"\n</code></pre> <p>Now <code>sayHello</code> event will run only if it meets <code>isAtSpawn</code> condition. Reload the plugin, walk outside of the 5 block radius and try to run <code>sayHello</code> event. Puff, nothing happens. It's because you're not meeting <code>isAtSpawn</code> condition. Walk into the radius again and try to run that event now. It should happily display the <code>Hello world!</code> notification.</p> <p>It's very nice that we can add such conditions, but the problem is: what if you wanted to display the notification only if the player is outside the radius? Don't worry, you don't have to specify <code>inverted_location</code> condition or anything like that. You can simply negate the condition. Negation makes the condition behave in the exact opposite way, in this case it <code>isAtSpawn</code> will be met only if the player is outside of the 5 block radius, and it won't be met if he's inside. Open the events.yml and add an exclamation mark before the <code>isAtSpawn</code> condition, so it looks like this:</p> <pre><code>sayHello: \"notify Hello world! conditions:!isAtSpawn\"\n</code></pre> <p>This means \"display the <code>Hello world!</code> notification if the <code>isAtSpawn</code> condition is not met\". Save the file, reload the plugin and run the event inside and outside of the radius to see how it works.</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#basic-tags","title":"Basic tags","text":"<p>Now that you know how to use events and conditions I'll show you what tags are. Create new events:</p> <pre><code>add_beton_tag: \"tag add beton\"\ndel_beton_tag: \"tag del beton\"\n</code></pre> <p>It's a good practice to give your events names that describe what they are doing. Imagine you have 100 events, <code>foo24</code>, <code>bar65</code>, <code>baz12</code> etc. You would get lost pretty quickly. So, <code>add_beton_tag</code> event here simply adds <code>beton</code> tag to the player, <code>del_beton_tag</code> removes it. Save the file, reload the plugin and run this event. Nothing happens... or does it? Issue /q t {name} command (<code>t</code> is shortcut for <code>tags</code>). It should show you a list with few entries. Right now focus on <code>default.beton</code>, the rest are used by the default quest for Innkeeper. Alright, <code>default</code> is the name of the package in which the tag is, and <code>beton</code> is the name of the tag, as defined in <code>add_beton_tag</code> event. Now run <code>del_beton_tag</code> event. Guess what, <code>default.beton</code> disappeared from the list! And that's it, you know how to add and remove tags. Pretty useless.</p> <p>Nothing could be more wrong. Tags are one the most powerful things in BetonQuest. They just need to be used with <code>tag</code> condition. Open conditions.yml and add</p> <pre><code>has_beton_tag: \"tag beton\"\n</code></pre> <p>line. As you can imagine, <code>tag</code> is the type of condition (the same as <code>tag</code> event, but these are not the same things - one is an event, the other one is a condition) and <code>beton</code> is the name of the tag. You don't have to specify <code>default.beton</code>, but you can if you want. Now save, reload and check it with a command. It should show false, since you have removed the tag with <code>del_beton_tag</code> event. Add it again with <code>add_beton_tag</code> event and check the <code>has_beton_tag</code> condition again. Now it will show true.</p> <p>Now you probably understand how powerful this system is. You could for example set a tag on the first time the player talks with an NPC, and if the NPC sees that tag next time they talk, he will tell something different, like \"welcome back\".</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#creating-objectives","title":"Creating objectives","text":"<p>Time to write some objectives! Open the objectives.yml file and add a new line:</p> <pre><code>kill_creepers: \"mobkill CREEPER 3 events:tp conditions:has_beton_tag\"\n</code></pre> <p>Now let's analyze it. <code>kill_creepers</code> is a name of the objective. <code>mobkill</code> is a type. In this case, to complete the objective the player will have to kill some mobs. <code>creeper</code> is a type of the mob, so we know that these mobs will have to be Creepers. <code>3</code> is the amount. It means that the player has to kill 3 Creepers. <code>events:tp</code> means than once the player kills those Creepers, the <code>tp</code> event will be run. <code>conditions:has_beton_tag</code> tells us that the player will have to have <code>beton</code> tag while killing Creepers to complete the objective. Save it, reload the plugin and issue /q o {name} add default.kill_creepers command (<code>o</code> is for <code>objective</code>, <code>add</code> tells the plugin to add an objective).</p> <p>Now you can check if you actually have this objective with /q o {name} command, it will show you all your active objectives. It should show <code>default.kill_creepers</code>. Alright, remove (yes, remove!) the <code>beton</code> tag from you and find some Creepers to kill. Once you killes 3 of them you will notice that nothing happened. It's because <code>has_beton_tag</code> condtion is not met, so the objective does not count your progress. Now add the tag again and kill another Creepers. When the third is dead you should be teleported to the location defined in <code>tp</code> event.</p> <p>Congratulations, now you know how to use objectives. You should experiment with other types now, since objectives will be used very often in your quests. Once you're done check out the Writing your first conversation chapter to use your knowledge to write your fisrt conversation.</p>"},{"location":"Learn-Beton/Getting-Started/Learn-BetonQuest/#writing-your-first-conversation","title":"Writing your first conversation","text":"<p>Now that you have seen BetonQuest in action and understood events, conditions and objectives, it's time for writing your first conversation. There's a conversations directory inside the default package. It contains a single file, innkeeper.yml. This is the conversation with Innkeeper, the one who asks you to cut some trees. Open it, we'll use that for reference. Now create a new file, let's say miner.yml. Now type (don't copy-paste it, you'll learn better while typing) that into the file:</p> <pre><code>quester: Miner\nfirst: greeting\nNPC_options:\ngreeting:\ntext: Hi there, traveler!\n</code></pre> <p>It's the most basic conversation possible. The NPC named <code>Miner</code> upon starting the conversation will use <code>greeting</code> option, which means he will say <code>Hi there, traveler!</code>. Then the conversation will end, because there are no player options defined. Now you need to link the conversation with an NPC. For that you now need to create or select another NPC. Then you link your conversation to the npc in the main.yml file. Open it now. As you can see the previous NPC conversation is linked to <code>Innkeeper</code> word. Now add another line under the Innkeeper: <code>'1': miner</code>, save the file and reload the server. This will link our new conversation with the NPC with the id \"1\". Now click on that NPC.</p> <p>Guess what, the conversation finished right after it started.  The Miner just said <code>Hi there, traveler!</code>, as expected. Now go to the conversation file and edit it (again, manually, no copy-paste!) so the options look like this:</p> <pre><code>NPC_options:\ngreeting:\ntext: Hi there, traveler!\npointers: hello,bye\nplayer_options:\nhello:\ntext: Hello!\nbye:\ntext: I need to go, sorry.\n</code></pre> <p>When you save the file, reload the plugin and start the conversation again you will notice that there are two options for you to choose: <code>Hello!</code> and <code>I need to go, sorry.</code> Choosing any of them will end the conversation, because these options did not specify any pointers.</p> <p>Now add a new NPC option, for example <code>weather</code> with text <code>Nice weather.</code> and make <code>hello</code> player option point to it. When you save&amp;reload, the Miner should say <code>Nice weather.</code> when you tell him <code>Hello!</code>. I think you get how it works.</p> <pre><code>NPC_options:\ngreeting:\ntext: Hi there, traveler!\npointers: hello,bye\nweather:\ntext: Nice weather.\nplayer_options:\nhello:\ntext: Hello!\npointer: weather\nbye:\ntext: I need to go, sorry.\n</code></pre> <p>Now, every time you talk to the Miner, he will say the same thing. It would be nice if the second time you talk to him he knew your name. We can do that with tags. Define a <code>meet_miner</code> event and <code>has_met_miner</code> condition. When you talk to the Miner for the first time, he will check if you have met him. If not, he will meet you (with that event) and next time you talk, the condition will be passed and he will use your name.</p> <p>Now, rename <code>greeting</code> NPC option to <code>first_greeting</code>. Add <code>meet_miner</code> event and negated <code>has_met_miner</code> condition (negated because this option should only show if the player has not met the Miner yet). You will need to surround the condition with <code>''</code>, because strings cannot start with exclamation marks in YAML. It should look like this:</p> <pre><code>first: first_greeting\nNPC_options:\nfirst_greeting:\ntext: Hi there, traveler!\ncondition: '!has_met_miner'\nevent: meet_miner\npointers: hello,bye </code></pre> <p>This means: <code>first_greeting</code> should be used if the player does not pass <code>has_met_miner</code> condition (meaning he doesn't have a tag because he haven't talked to the NPC yet). When this option is used, it will fire <code>meet_miner</code> event and display <code>hello</code> and <code>bye</code> options. Alright, but what happens if the player met the Miner and now negated <code>has_met_miner</code> condition doesn't work? NPC will try to use next option defined in <code>first</code> setting. There is none yet, so let's add it.</p> <pre><code>first: first_greeting,regular_greeting\nNPC_options:\nregular_greeting:\ntext: Hi %player%!\npointers: hello,bye\n</code></pre> <p>This option does not have any conditions, so if the <code>first_greeting</code> fails, the NPC will always choose this one. Now take a look at the <code>%player%</code> thing. It's a variable. In this place it will show your name. There are more than this one, they are described in Reference chapter. Alright, save&amp;reload and start the conversation. If you did everything correctly, the Miner should greet you as a \"traveler\", and the second time you talk to him, he should greet you with your Minecraft name.</p> <p>Here's the whole conversation you created, so you can check if you understood everything correctly:</p> <pre><code>first: first_greeting,regular_greeting\nNPC_options:\nfirst_greeting:\ntext: Hi there, traveler!\ncondition: '!has_met_miner'\nevent: meet_miner\npointers: hello,bye regular_greeting:\ntext: Hi %player%!\npointers: hello,bye\nweather:\ntext: Nice weather.\nplayer_options:\nhello:\ntext: Hello!\npointer: weather\nbye:\ntext: I need to go, sorry.\n</code></pre> <p>Now you should experiment some more with this conversation, you can help yourself by looking at the innkeeper.yml file. Try to understand how that conversation works step by step. As the excercise you should complete the Miner NPC, so he asks you to mine some iron ore, then smelt it in the furnace, next craft an armor with it and return to him wearing this armor.</p> <p>You might want to check out the Reference chapter to see how to handle items in  your quests and how to add entries to the journal. If you want to use Citizens NPCs instead of the ones made with clay  you will find information you need in that chapter too. To find out more about events, conditions, objectives and variables, take a look at the appropriate lists (after the Reference chapter).</p>"},{"location":"Learn-Beton/Getting-Started/Setting-up-a-local-test-server/","title":"Setting up a local test server","text":""},{"location":"Learn-Beton/Getting-Started/Setting-up-a-local-test-server/#why-do-i-need-a-local-server","title":"Why do I need a local server?!","text":"<p>You might think that a local test server is useless because you already have a remote server. There are multiple reasons why you really need one:</p> <ul> <li>Working on a live server could lead to crashes and bugs that your players will have to deal with.</li> <li>Making quests can, especially for new questers, lead to unexpected behavior. This can be anything from spawning hundreds of mobs to endlessly giving out items to a player. Exactly the stuff you don't want to happen.</li> <li>Working with a test server is usually faster and therefore more productive. You can restart it all the time, change plugin configurations as you wish etc.</li> </ul>"},{"location":"Learn-Beton/Getting-Started/Setting-up-a-local-test-server/#setup-of-your-local-server","title":"Setup of your local server","text":"<ul> <li> <p>Step 1: You have propably heard of Spigot, the biggest server software for  Minecraft. We are going to install Paper (an improved version of Spigot) on your computer.  Head over to Papers download page and click on the button you see in the image below (the numbers will not match up, ignore that). </p> </li> <li> <p>Step 2: Create a new folder for the server in a place you can easily access.  Making a new folder is important because the server will create a lot of files that would mess up your Desktop etc. Move the downloaded file in the newly created folder. If the file's name is something like \"paper-X.YY.Z-100\" rename it to <code>paper</code>. If the name contains a \".jar\" ending just change the part in front of the ending to <code>paper</code>. Example:  paper-X.YY.Z-100 -&gt; paper paper-X.YY.Z-100.jar -&gt; paper.jar</p> </li> <li> <p>Step 3: You need a start script to start your server. Open your text editor and create a file named <code>start.bat</code> (For Linux and Mac: Create a <code>start.sh</code> file instead).  Open it and copy this into it: <pre><code>java -Xms1G -Xmx1G -jar paper.jar --nogui\npause\n</code></pre> This script tells java to search for a file named <code>paper.jar</code>. The <code>1G</code> setting in both the <code>-Xms</code> and <code>-Xmx</code> options is how much RAM you want to give to the server  (<code>1G</code> = 1 GigaByte RAM, <code>2G</code> = 2 GigaByte RAM, <code>700M</code> for 700 MegaBytes, etc.). You should not need more then 1GB in most cases though.    Make sure to save it as a <code>.bat</code> file! If you save it as a <code>.txt</code> file it will not work. </p> </li> <li> <p>Step 4: Launch the server by double-clicking on the start file. A console window will appear and close after a while. Just wait until its gone. Now check the server's folder. You will find a bunch of new folders and files that have been generated. You need to accept the EULA (Minecrafts End-User-License-Agreement)to be able to run a Minecraft server. You will find a link in the eula.txt file. After you read it you need to set <code>eula=false</code> to <code>eula=true</code>.</p> </li> </ul> <p>Next step: Install BetonQuest.</p>"},{"location":"Learn-Beton/Getting-Started/Setting-up-the-editor/","title":"Setting up the editor","text":"<p>In theory, you can edit quests with any editor. However, using the feature-packed but lightweight  Visual Studio Code is highly recommended! We even made our own Visual Studio Code BetonQuest addon  that enables some neat productivity advantages over any other editor.</p>"},{"location":"Learn-Beton/Getting-Started/Setting-up-the-editor/#installation","title":"Installation","text":"<ul> <li> <p>Head over to Visual Studio Code's site   to install the latest version.</p> </li> <li> <p>Then install the BetonQuest extension from the   Visual Studio Marketplace.   Just click the big green \"Install\" button and allow the site to open Visual Studio Code.</p> </li> </ul> <p></p> <ul> <li>Just click \"Install\" again after Visual Studio Code has opened. </li> </ul> <p></p> <p>If this does not work for some reason go to the extensions view in VSCode (Ctrl+Shift+X) and search for <code>BetonQuest</code>. A full guide on extensions can be found here.</p>"},{"location":"Learn-Beton/Getting-Started/Setting-up-the-editor/#usage","title":"Usage","text":""},{"location":"Learn-Beton/Getting-Started/Setting-up-the-editor/#setup","title":"Setup","text":"<p>Open up any of your quests using File &gt; Open Folder... (if you haven't made any yet, select the default quest in plugin/BetonQuest/default). Then click on any file to open it. There are a few general things to keep in mind when editing files. VSCode does a really nice job at exposing these directly to the user. They are all listed in the bottom right corner  of the editor window:</p> <p>Caution</p> <p>Make sure to set these settings in the bottom right corner of VSCode:</p> <p><code>Spaces:2</code> Indent using Spaces. </p> <p><code>UTF-8</code> file encoding. </p> <p><code>LF</code> end of line characters. </p> <p><code>YAML</code> language module.</p> <p></p> <p>These ensure that the extension is activated. Additionally, your configuration works with all unique language characters (a german example: \u00e4, \u00fc, \u00f6) and the file can be read on any server running on Linux.</p>"},{"location":"Learn-Beton/Getting-Started/Setting-up-the-editor/#snippets","title":"Snippets","text":"<p>The main feature of our extension are so called \"code snippets\". These are basically pre-defined events, conditions etc. that can be filled with any of your custom options.</p> <p>Start typing the name of an event/condition/objective and press Ctrl + Space. VSCode will list possible completions. These include both snippets and yaml entries that are already defined in your file. Snippets will have the official  documentation as description.  VSCode will enter snippet mode once you press Enter while having a snippet selected. Navigating between options works by pressing Tab. If you want to go backwards you can invert the movement of the cursor by pressing Shift and Tab.</p> <p>An option will be fully highlighted if it needs to be replaced with material names, messages... They will not show a drop-down menu. If an option does, you need to choose between the offered options. Optional options are displayed as an empty field in the drop down. These optional options can also contain a colon (<code>:</code>). You have to specify something behind them depending on the context  if they do. An example might be provided after the colon (<code>:</code>). Just replace it with the value you want.</p> <p>Neat features: </p> <ul> <li>You will automatically jump to the next line if you press tab one last time after any option.</li> <li>The snippet automatically surrounds the event/condition... with <code>\"\"</code>.</li> <li>There are not only snippets for <code>events</code>, <code>objectives</code> and <code>conditions</code> but also for conversations!</li> <li>Pressing Alt + B creates a new conversationOption.</li> </ul> <p>Take a look at this short video or play around with it yourself until you understand how it works:</p> <p>Note: This video is slightly outdated and does not show some newer features!</p>   Sorry, your browser doesn't support embedded videos.   <p>Next step: YAML-for-questers</p>"},{"location":"Learn-Beton/Getting-Started/YAML-for-questers/","title":"\ud83d\udcd1 YAML for questers","text":""},{"location":"Learn-Beton/Getting-Started/YAML-for-questers/#yaml-syntax","title":"YAML Syntax","text":"<p>Before we can start you need to understand the fundamentals of YAML. You have no idea what that is? Well YAML is the format most plugins store their config data in.</p> <p>Its <code>key:value</code> based which means that you will always have to name the thing that you write down before you actually write it down. Let me show you an example:</p> <p>YAML Key:Value</p> <pre><code>```YAML\nkey: \"value\"\nname: \"your thing\"\n```\n</code></pre> <p>These keys and values can also be nested into each other by indenting them with a few spaces:</p> <p>Nested YAML</p> <pre><code>```YAML\nouterName:\n  innerName: \"innerValue\"\n  anotherInnerName: \"BetonQuest is great!\"\n```\n</code></pre> <p>YAML also cares a lot about spaces and tabs! The rules are pretty complicated. It's best not to use tabs in your YAML files at all. Use spaces instead. </p> <p>Next step: Learn BetonQuest</p>"},{"location":"User-Documentation/CHANGELOG/","title":"Placeholder Changelog","text":""},{"location":"User-Documentation/CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"User-Documentation/CHANGELOG/#11211-2023-12-25","title":"[1.12.11] - 2023-12-25","text":""},{"location":"User-Documentation/CHANGELOG/#added","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>the MythicMobs integration was updated to MythicMobs 5.3.5</li> <li>the MythicLib integration was updated to MythicLib 1.6-SNAPSHOT</li> <li>the objectives mmocorecastskill and mmoitemcastability were merged into the mmoskill objective</li> <li>the MMOCore-API integration was updated to MMOCore-API 1.12-SNAPSHOT</li> <li>the MMOItems-API integration was updated to MMOItems-API 6.9.4-SNAPSHOT</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#deprecated","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>conversation could have a deadlock and a player can get stuck in a conversation</li> <li>conversation could not be canceled due to a race condition</li> <li>JobsReborn ObjectivePaymentEvent couldn't be used</li> <li>ProtocolLib warning for Minecraft 1.20.2</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#11210-2023-02-18","title":"[1.12.10] - 2023-02-18","text":""},{"location":"User-Documentation/CHANGELOG/#added_1","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed_1","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_1","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_1","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>ProtocolLib's based <code>packet</code> interceptor was fixed for MC 1.19, now ProtocolLib 5.0.0 is required</li> <li>conversation IO chest did not show the correct NPC heads</li> <li><code>objective</code> event - static calls did not remove the objective for online players</li> <li>legacy <code>\u00a7x</code> HEX color format not working in some contexts</li> <li>eating of items when entering the chest conversation io actually consumed the item</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_1","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1129-2022-06-22","title":"[1.12.9] - 2022-06-22","text":""},{"location":"User-Documentation/CHANGELOG/#added_2","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed_2","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_2","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_2","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li><code>weather</code> event - storm did not work</li> <li>1.19 ProtocolLib warnings about deprecated packages</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_2","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1128-2022-03-07","title":"[1.12.8] - 2022-03-07","text":""},{"location":"User-Documentation/CHANGELOG/#added_3","title":"Added","text":"<ul> <li>new line support for <code>journal_lore</code> in <code>messages.yml</code></li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>PikaMug Quests updated to version 4.1.3</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#deprecated_3","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_3","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>reload with an invalid PlayerHider causes a NPE</li> <li>QuestItems could be eaten, this was caused by a changed mc behaviour</li> <li>command, sudo and opsudo events didn't work with conditions</li> <li>interact objective did not work with armorstands</li> <li>MMOItemsGiveEvent did not check if item actually exists</li> <li>notify IO <code>subtitle</code> and <code>title</code> with only a subtitle was not send</li> <li>npcHider not working for Citizens with ModelEngine trait</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_3","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1127-2021-12-11","title":"[1.12.7] - 2021-12-11","text":""},{"location":"User-Documentation/CHANGELOG/#added_4","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed_4","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_4","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_4","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>exception during reload, when npc_holograms are disabled</li> <li><code>entities</code> condition and <code>clear</code> event now support not living entities</li> <li>mmoitems item creation only worked with uppercase id's</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_4","title":"Security","text":"<ul> <li>updated log4j to 2.15.0 which fixes CVE-2021-44228</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#1126-2021-10-14","title":"[1.12.6] - 2021-10-14","text":""},{"location":"User-Documentation/CHANGELOG/#added_5","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li><code>action</code> objective cancels now the event, before other plugins check for it (better third-party support)</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#deprecated_5","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_5","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li>added missing config options to the default config</li> <li>version check for ProtocolLibIntegrator</li> <li>quest item empty name comparison</li> <li>customized built-in messages that use the advancementIO</li> <li>BlockSelector without a namespace but starting with <code>:</code> did not work and threw an exception</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_5","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1125-2021-08-11","title":"[1.12.5] - 2021-08-11","text":""},{"location":"User-Documentation/CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Version checks for ProtocolLib and Shopkeepers support</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_6","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_6","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_6","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li>MMOCoreClassCondition used the class display name instead of the class ID to compare classes.</li> <li>the take event called Paper's ItemStack.getI18NDisplayName() instead of Spigot's ItemStack.getItemMeta().getDisplayName</li> <li>fixed hooking in ProtocolLib</li> <li>max_npc_distance was set to 5.3 to prevent instant quiting of conversations</li> <li>conversation IO menu sometimes leave an armorstand spawned</li> <li>sometimes messages in a conversation are not send when packet interceptor is used</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_6","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1124-2021-07-05","title":"[1.12.4] - 2021-07-05","text":""},{"location":"User-Documentation/CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Vietnamese translation</li> <li>added invOrder setting to (mmoitem)take event</li> <li>the mmoitemtake event &amp; mmoitem condition now also check the backpack<ul> <li>this will not work until the item rework / until the backpack contains NBT data</li> </ul> </li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li><code>/q create package</code> command does now create an empty package</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#deprecated_7","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_7","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li><code>brew</code> objective triggers all the time and counts correctly</li> <li>only generate default package if BetonQuest folder is empty</li> <li>fix backpack passing references instead of clones</li> <li>fixed combat event packet that changed with MC 1.17</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_7","title":"Security","text":"<ul> <li>the take event is now threadsafe</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#1123-2021-05-05","title":"[1.12.3] - 2021-05-05","text":""},{"location":"User-Documentation/CHANGELOG/#added_8","title":"Added","text":"<ul> <li>FastAsyncWorldEdit compatibility</li> <li>craft objective variable <code>total</code></li> <li>curly braces in math.calc variables for using variables with math symbols</li> <li>player attribute to QuestCompassTargetChangeEvent</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_8","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_8","title":"Deprecated","text":"<ul> <li>math variable now allows rounding output with the ~ operator</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#removed_8","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li>parsing of math variable</li> <li>craft objective: multi-craft, drop-craft, hotbar/offhand-craft, shift-Q-craft and any illegal crafting is correctly detected,</li> <li>craft objective variables <code>left</code> and <code>amount</code> were swapped</li> <li>NPC hider for not spawned NPCs</li> <li>Conversation IO Chest load NPC skull async from Citizens instead of sync</li> <li>block selector didn't respect regex boundary</li> <li>block selector regex errors are now properly handled</li> <li><code>default_journal_slot: -1</code> now uses the first free slot instead of the last hotbar slot</li> <li>mmobkill objective notify argument not working correctly</li> <li><code>fish</code> objective didn't count the amount of fish caught in one go (if modified by e.g. mcMMO)</li> <li>fixed smelt objective: only taking out normally did count, shift-extract got canceled</li> <li>empty values in <code>variable</code> objective now don't break on player join</li> <li>PacketInterceptor sync wait lag</li> <li>notifications using the chatIO were catched by the conversation interceptor</li> <li>case insensitive <code>password</code> objective did not work if the password contained upper case letters</li> <li>global variables didn't work in quester names</li> <li>quest items couldn't interact with any blocks, which also prevented them from mining blocks</li> <li>the shear objective's sheep couldn't have underscores in their names</li> <li>backpack passing references instead of clones</li> <li>compass event now allows global variables</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_8","title":"Security","text":"<ul> <li>it was possible to put a QuestItem into a chest</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#1122-2021-03-14","title":"[1.12.2] - 2021-03-14","text":""},{"location":"User-Documentation/CHANGELOG/#added_9","title":"Added","text":""},{"location":"User-Documentation/CHANGELOG/#changed_9","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_9","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_9","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li><code>npcrange</code> objective is triggered at wrong time</li> <li>Citizens compatibility for not spawned NPCs</li> <li>NotifyIOs are case-sensitive</li> <li>all mmo objectives trigger for everyone</li> <li>command event includes 'conditions:...' into the command</li> <li>tags and points are now thread safe</li> <li>compatibility for packet interceptor on papermc</li> <li>fix books not parsing color codes</li> <li>action objective for any block ignored location</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_9","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1121-2021-02-05","title":"[1.12.1] - 2021-02-05","text":""},{"location":"User-Documentation/CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Ingame update notification if the updater found an update</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_10","title":"Changed","text":""},{"location":"User-Documentation/CHANGELOG/#deprecated_10","title":"Deprecated","text":""},{"location":"User-Documentation/CHANGELOG/#removed_10","title":"Removed","text":""},{"location":"User-Documentation/CHANGELOG/#fixes_6","title":"Fixes","text":"<ul> <li>The Autoupdater got a small fix, and the fail safety for broken downloads was improved</li> <li><code>npcrange</code> objective does not throw errors when the player is in a different world than the NPC</li> <li>The block objectives notify could not be disabled</li> <li>fixed ConcurrentModificationException in EntityHider</li> <li>fixed notify enabled by default for some objectives</li> <li>fixed some grammar mistakes in debug messages</li> <li>fixed npc teleport and walk operations in unloaded chunks</li> <li>fixed inaccurate location variable decimal rounding</li> <li>fixed NullPointerException for NPCs with conversation</li> <li>fixed resuming to path finding when conversation interrupt movement</li> <li>fixes Die objective teleporting player during the tick</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_10","title":"Security","text":""},{"location":"User-Documentation/CHANGELOG/#1120-2021-01-10","title":"[1.12.0] - 2021-01-10","text":""},{"location":"User-Documentation/CHANGELOG/#added_11","title":"Added","text":"<ul> <li>Tags and Objectives can now be removed with a static event for all players, even if they are not online<ul> <li>deletepoint event can now also be called to delete all points for all players</li> <li>journal del event can now also be called as static</li> </ul> </li> <li>Added integration for TeamRequiem plugins (MMOCore, MMOItems, MMOLib)<ul> <li>Conditions:<ul> <li>MMOClass condition (type &amp; class)</li> <li>MMOProfession condition</li> <li>MMOAttribute condition</li> <li>MMOItems item condition (item in inventory)</li> <li>MMOItems hand condition (item in main/offhand)</li> <li>MMOLib stats condition  (a ton of stats from Core and Items combined)</li> </ul> </li> <li>Objectives:<ul> <li>Level X Profession to X Level</li> <li>Craft / Upgrade X Item within Inventory</li> <li>Craft X item</li> <li>Apply Gem Stone to Item</li> <li>Upgrade Item via Consumable</li> <li>Cast Item ability</li> <li>Cast Class ability</li> <li>Mine MMOBlock</li> </ul> </li> <li>Events:<ul> <li>Add mmo class level or exp -\ufe0f Add mmo professional level or exp -\ufe0f\ufe0f Add Skill points -\ufe0f\ufe0f Add attribute points -\ufe0f\ufe0f Add attribute reallocation points -\ufe0f\ufe0f Add class points -\ufe0f\ufe0f Give Item \ufe0f -\ufe0f Take Item</li> </ul> </li> </ul> </li> <li>equal argument for condition 'empty'</li> <li>Condition 'wand' can now have an option '</li> <li>Implementing 1.15 support for Events and Conditions</li> <li>New Chat event, that write chat messages for a player</li> <li>Added 'pickup' objective</li> <li>Added stopnpc event, that will stop the movenpc event</li> <li>Added teleportnpc event, that will stop the movenpc event and teleport the npc to a given location</li> <li>Added option check_interval for holograms in custom.yml and added GlobalVariable support</li> <li>Added deletepoint event to delete player points</li> <li>Added mythicmobdistance condition that will check if a specific MythicMobs entity is near the player</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added level argument to 'experience' objective and condition</li> <li>Added prefix argument in password objective</li> <li>Added fail argument in password objective</li> <li>Added notify option to point event</li> <li>Added an interceptor that does not intercept: 'none'</li> <li>Added ConditionVariable. It returns true or false based on whether a player meets a condition.</li> <li>Improved bStats</li> <li>Added login objective</li> <li>Added period argument to folder event</li> <li>Added variable support to the Notify system</li> <li>Added variable support to the PickRandomEvent</li> <li>Added \"acceptNPCLeftClick: true / false\" config option</li> <li>Added optional \"minlevel\" and \"maxlevel\" arguments to mmobkill objective</li> <li>Added new options 'inside/outside' for npcrange objective, support for multiple npcs and improved performance</li> <li>Added new Event QuestCompassTargetChangeEvent that is triggered when a new CompassTarget is set. It is also possible to cancel it</li> <li>added multi language support for Notify system</li> <li>Added 'notifyall' event to broadcast a notification</li> <li>Added new notification IO 'sound'</li> <li>Added 'jump' objective</li> <li>Added left, amount and total properties to player kill objective</li> <li>Added 'neutralMobDeathAllPlayers' argument to the <code>mmobkill</code> objective</li> <li>Added custom model data support for items</li> <li>Added new config option 'npcInteractionLimit' default 500 that limits the click on an NPC to every x milliseconds</li> <li>Added PlayerHider to hide specific players for specified players</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>devbuilds always show notifications for new devbuilds, even when the user is not on a _DEV strategy</li> <li>Items for HolographicDisplays are now defines in items.yml</li> <li>Command 'bq rename' can now be used for globalpoints</li> <li>The old updater was replaced with a new one</li> <li>AchievementCondition is replaced with AdvancementCondition</li> <li>Renamed objective Potion to Brew</li> <li>Renamed 'monsters' condition to 'entities'</li> <li>Renamed 'xp' event to 'experience'</li> <li>new config option mysql.enabled<ul> <li>if you already have an installation, you can add this manually to get rid of the mysql warning during startup</li> </ul> </li> <li>events in conversation options are now executed before npc or player responses are printed</li> <li>message event now ignores chat interceptors during conversation</li> <li>tame objective now works with all tamable mobs, including possible future ones</li> <li>improved chestput waring for locations without a chest</li> <li>reworked location variable: %location.(xyz|x|y|z|yaw|pitch|world|ulfShort|ulfLong)(.NUMBER)%</li> <li>multiple conditions and objectives now use the block selector. The same applies for the setblock event.</li> <li>static events now allow comma separated event list</li> <li>changed the <code>npc_effects</code> behavior to be package wide instead of global if no NPC is defined in the custom.yml</li> <li>EventHandlers in general updated to ignore cancelled events</li> <li>improved performance for condition checks (Bug where it took seconds to check for conditions)</li> <li>improved performance for conversation checks (Bug where it took seconds to check for conversation options)</li> <li>The plugin will no longer be loaded before the worlds are loaded</li> <li>Citizens Holograms are now more robust on reload and reload faster</li> <li>Added player death/respawn behavior to Region Objective and improved performance</li> <li>changed smelting and fish objective from material to BlockSelector</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#deprecated_11","title":"Deprecated","text":"<ul> <li>Marked message event for removal in BQ 2.0</li> <li>Marked playsound event for removal in BQ 2.0</li> <li>Marked title event for removal in BQ 2.0</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#removed_11","title":"Removed","text":"<ul> <li>Removed Deprecated Exceptions</li> <li>Removed RacesAndClasses support</li> <li>Removed LegendQuest support</li> <li>Removed BoutifulAPI support</li> <li>Removed the CLAY NPC</li> <li>removed legacy material support</li> <li>removed BetonLangAPI support</li> <li>removed PlayerPoints support(this can still be used via Vault)</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#fixes_7","title":"Fixes","text":"<ul> <li>event priority for block objective</li> <li>linebreaks in strings</li> <li>notify:1 for block objective did not work</li> <li>asynchronous database access for objectives</li> <li>Renaming an NPC will not cause an NPE for a NPC Hologram</li> <li>Objective 'craft' now supports shift-clicking</li> <li>Fixed generation of default package</li> <li>fixed line breaks</li> <li>fixed events notify interval of 1</li> <li>fixed potion/brew objective notify</li> <li>fixed the bug and removed its workaround when chest converationIO has no available start points</li> <li>fixed journal line breaking</li> <li>fixed movement of movenpc event</li> <li>fixed npcmove event</li> <li>fixed a bug, where a player causes an exception when he spams right left clicks in menu conversationIO</li> <li>fixed outdated Brewery dependency</li> <li>fixed message duplication when using the packet interceptor</li> <li>fixed Journal interaction with Lectern</li> <li>fixed QuestItems ignoring durability</li> <li>fixed QuestItem interaction with Lectern, Campfire and Composter</li> <li>update journal after closing magic inventory</li> <li>fixed lever event not toggling the lever</li> <li>fixed ConcurrentModificationException in PlayerData</li> <li>fixed issue where the PacketInterceptor prints the message tag in the chat</li> <li>fixed database backups breaking with some languages</li> <li>fixed when PlaceholderAPI variables contains dots</li> <li>fixed quester name not support &amp; as color code</li> <li>fixed Region Objective listen to player teleport event</li> <li>packet Interceptor stops 1 second AFTER the end of the conversation to allow slow messages to still have its chat protection</li> <li>fixed notify couldn't use variables that contain <code>:</code></li> <li>improved stability for brew objective when other plugins affect brewing</li> <li>fixed region and npcregion condition</li> <li>fixed debugging dose not start on server startup</li> <li>fixed ghost holograms caused by reloading BQ</li> <li>fixed deadlock(Server crash) in Conversations with a large amount of npc and player options with a large amount of conditions</li> <li>fixed door event not working correctly</li> <li>fixed <code>1 give</code> command exceptions</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#security_11","title":"Security","text":"<ul> <li>fixed issue, where objectives that count things are out of sync with the database. This has also affected BungeeCord support</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#1110-2020-01-02","title":"[1.11.0] - 2020-01-02","text":""},{"location":"User-Documentation/CHANGELOG/#added_12","title":"Added","text":"<ul> <li>Support Minecraft 1.8 - 1.13.2+</li> <li>New Block Selector to select blocks by material and attributes. Can use wildcards as well.</li> <li>New 'mooncycle' condition - Determine what phase the moon is in</li> <li>Chest ConversationIO can now be configured to show NPC text per option.</li> <li>New 'extends' keyword in conversation to allow inheritance</li> <li>New 'conversation' condition that will return true if there is at least 1 conversation option available to an NPC</li> <li>New 'nujobs_canlevel' condition - True if player can level in Jobs Reborn</li> <li>New 'nujobs_hasjob' condition - True if player has job in Jobs Reborn</li> <li>New 'nujobs_jobfull' condition - True if a job is full in Jobs Reborn</li> <li>New 'nujobs_joblevel' condition - True if player has level in Jobs Reborn</li> <li>New 'nujobs_addexp' event - Add experience to player in Jobs Reborn</li> <li>New 'nujobs_addlevel' event - Add a level to player in Jobs Reborn</li> <li>New 'nujobs_dellevel' event - Remove a level from player in Jobs Reborn</li> <li>New 'nujobs_joinjob' event - Joins a player to a job in Jobs Reborn</li> <li>New 'nujobs_leavejob' event - Leaves a job in Jobs Reborn</li> <li>New 'nujobs_setlevel' event - Set a player's level in Jobs Reborn</li> <li>New 'nujobs_joinjob' objective - Triggers when player joins job in Jobs Reborn</li> <li>New 'nujobs_leavejob' objective - Triggers when a player leaves job in Jobs Reborn</li> <li>New 'nujobs_levelup' objective - Triggers when a player levels up in Jobs Reborn</li> <li>New 'nujobs_payment' objective - Triggers when a player receives money from Jobs Reborn</li> <li>New Notification System</li> <li>New 'notify' event - Create custom notifications on the ActionBar, BossBar, Title, Subtitle and Achievement</li> <li>New 'menu' conversation IO - Requires ProtocolLib. See: https://www.youtube.com/watch?v=Qtn7Dpdf4jw&amp;lc</li> <li>New 'packet' chat interceptor - Requires ProtocolLib.</li> <li>new '/q debug' command - Enable or disable the debug mode</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes","title":"Changes","text":"<ul> <li>Event 'effect' can have 'ambient', 'hidden' and 'noicon' parameters</li> <li>Event 'effect' has '--ambient' parameter deprecated with a non fatal warning.</li> <li>Priority for 'journal_main_page' entries not unique anymore, it only orders the entries. Same priority sort it alphabetic</li> <li>Objective 'interact' can have 'loc', 'range' parameters</li> <li>Objective 'region' can optionally have 'entry' and/or 'exit' to only trigger when entering or exiting named region</li> <li>The old 'Debug' class was replaced by a more useful and powerful 'LogUtils' class</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Resolve variables in journal pages.</li> <li>WATER and LAVA can be specified in Action Objective</li> <li>Journals without dates now don't leave blank lines</li> <li>Journal separator can be disabled or customized</li> <li>NPCs now spawn correct, if they have a npc_hologram</li> <li>fixed NPE when no journal entry exists</li> <li>The default package is now compatible with all versions</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#110-2019-09-16","title":"[1.10] - 2019-09-16","text":"<ul> <li>Development versions can be full of bugs. If you find any, please report them on GitHub Issues.</li> <li>This version is only compatible to Shopkeepers v2.2.0 and above</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_13","title":"Added","text":"<ul> <li>npc holograms above the head that follow the npc (requires HolographicDisplays)</li> <li>New 'facing' condition - check if player is facing a direction </li> <li>New 'looking' condition - check if player looks at a block</li> <li>New 'deleffect' event - delete potion effects of a player</li> <li>New '%citizen%' variable - display a npcs name or coordinates (requires Citizens)</li> <li>New 'npcrange' objective - player has to go towards a npc (requires Citizens)</li> <li>New 'npcdistance' condition - check if a player is close to a npc (requires Citizens)</li> <li>New 'npclocation' condition - check if a npc is at a location (requires Citizens)</li> <li>New 'npcregion' condition - check if a npc is inside a region (requires Citizens &amp; WorldGuard)</li> <li>New 'killmob' event - remove the mobs that you spawned with 'spawn' event</li> <li>New '/q version' command - get the version used</li> <li>New 'partialdate' condition - check if the date matches a pattern</li> <li>New 'dayofweek' condition - check if its weekend or monday</li> <li>New 'realtime' condition - check if its a specific time</li> <li>New 'xp' event - give a player xp.</li> <li>Global objecties (objectives that  are active for all players directly after start)</li> <li>Global tags and points (tags ad points that are not set for one specific player)</li> <li>New 'globaltag' event </li> <li>New 'globaltag' condition</li> <li>New 'globalpoint' event </li> <li>New 'globalpoint' condition</li> <li>New 'opsudo' event - Sudo commands with op permissions</li> <li>Brewery integration ('drunk', 'drunkquality' and 'hasbrew'conditions, 'givebrew' and 'takebrew' events) </li> <li>New 'title' event - display titles without the whole command hassle</li> <li>New 'playsound' event - plays a sound</li> <li>New 'fly' condition - check if the player is flying with Elytra</li> <li>New 'biome' condition - check the player's current biome</li> <li>New 'interact' objective - interact with an entity</li> <li>Conversations can individually override conversation IO type</li> <li>NPCs can be individually hidden from players if ProtocolLib is installed</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_1","title":"Changes","text":"<ul> <li>'compass' event can now directly set a players compass</li> <li>holograms from HolographicDisplays now can display items</li> <li>'movenpc' event now allows multiple locations to create a path</li> <li>'enchant' objective now allows multiple enchantments</li> <li>'particle' event can now create client side only particles</li> <li>'chest' converstionIO now dosn't display messages to chat for the old behaviour use 'combined'</li> <li>'money' event can now notify you about how much you recieved</li> <li>'mmobkill' objective now allows multiple mobs</li> <li>Translation system is integrated with BetonLangAPI</li> <li>NPC heads in \"chest\" conversation IO will display correct Citizens skin</li> <li>NPC particles (EffectLib integration) can be displayed to individual players</li> <li>Condition command allows checking static conditions</li> <li>'testforblock' condition can now check for specific data value</li> <li>'delay' objective and 'folder' event accept more time units</li> <li>'password' objective also accepts commands</li> <li>Commands can be tab-completed</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Fixed bug where players could take out items from the chest conversationIO</li> <li>Removed possibilities of dropping/transfering quest items and the journal</li> <li>Lots of smaller bugfixes</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#196-2017-11-27","title":"[1.9.6] - 2017-11-27","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Update version to 1.9.6</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#195-2017-11-27","title":"[1.9.5] - 2017-11-27","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Fixed global locations loading before the worlds</li> <li>Fixed loading order of Citizens/EffectLib integration</li> <li>Fixed restarting of persistent objectives not working correctly</li> <li>Fixed \"unbreakable\" tag not being read from items</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#194-2017-11-02","title":"[1.9.4] - 2017-11-02","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>Fixed broken integration loading</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#193-2017-11-01","title":"[1.9.3] - 2017-11-01","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>NPC and mob kills will be correctly registered when killed by indirect means</li> <li>Replaced error with a nice message when config updating fails to start</li> <li>Unbreakable items are no longer breakable in newer Spigot releases</li> <li>Moved compatibility hooks to the first server tick to hook into lazy plugins</li> <li>Colors of text in \"chest\" conversations are now correctly applied over text breaks</li> <li>Added a nice message when conversation option is missing \"text\"</li> <li>Fixed a rare crash when NPC was stopped and its target was outside of loaded chunks</li> <li>Fixed checking item amounts in the backpack</li> <li>Allowed negative data in items for compatibility with dark magics</li> <li>Removed Denizen script checking, since it didn't work sometimes</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#192-2017-07-09","title":"[1.9.2] - 2017-07-09","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>Conversations won't allow taking items from GUI windows</li> <li>When using wrong 'point' or 'item' variable there will be a nice error message</li> <li>NPCs can be safely despawned while in the middle of a conversation</li> <li>Error on '/q reload' when NPC particles are disabled is now gone</li> <li>Items for compass buttons are now correctly loaded</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_2","title":"Changes","text":"<ul> <li>These events are now correctly persistent: clear, explosion, lightning, setblock, spawn</li> <li>BetonQuest is using bStats instead of McStats</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#191-2017-04-18","title":"[1.9.1] - 2017-04-18","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li>Holograms are now correctly loaded</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#19-2017-04-03","title":"[1.9] - 2017-04-03","text":"<p>Notes: - This version breaks compatibility with plugins hooking into BetonQuest. I'm sorry for that. Ask devs to update these plugins. - The error reporting feature was improved. If you see a lot of error messages when reloading the plugin (not stack traces, just regular, human-readable messages), it's probably because there are real problems in your quests. - BetonQuest won't accept \".yml\" extensions at the end of conversation names in \"main.yml\". If your conversations aren't working (the plugin says they don't exist), check if you have these extensions IN THE \"MAIN.YML\" file and remove them.</p>"},{"location":"User-Documentation/CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>'action' objective now detects fire interaction</li> <li>'empty' condition now skips armor and off-hand slots</li> <li>Items can be used cross-package</li> <li>New sound names are now used by default</li> <li>Fixed doubled quest items when dropping them is blocked by another plugin</li> <li>Lore and name now appear on heads and written books with custom data</li> <li>Fix error when trying to add air (empty hand) with \"/q item\" command</li> <li>Main page now can exceed a single page in the journal</li> <li>The plugin will reconnect to the database if something goes wrong</li> <li>Fishing objective now only accepts stuff from water</li> <li>Properties in 'mobkill' objective (left and amount) has switched places</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_3","title":"Changes","text":"<ul> <li>Complete rewrite of item conditioning - read the docs to discover new features (previous syntax is still working without any behavior changes)</li> <li>Books in items.yml now automatically wrap pages, like the journal and main page</li> <li>Main page and entries in the journal can manually split pages with '|' character</li> <li>New lines in conversations can be made with \"\\n\"</li> <li>Interval in 'delay' objective is now configurable</li> <li>'craft' and 'potion' objectives now use items defined in items.yml file</li> <li>Potion items are now defined with 'type:' argument instead of data value</li> <li>You can now use spaces between \"first\" options in conversations</li> <li>Static events can now be fired with \"/q event - eventID\" command</li> <li>Locations can have vectors defined directly in instruction strings</li> <li>Locations can be variables which resolve to location format</li> <li>Point condition can now check exact point amount with 'equal' argument</li> <li>In 'chest' conversation IO items can be specified with durability values after a colon</li> <li>Mobs spawned with 'spawn' event can have armor, items in hands and custom drops</li> <li>Unbreakability of quest items can be disabled (if you want to use \"unbreakable\" tag instead)</li> <li>Ranges in locations are now a separate argument (\"10;20;30;world;4\" is now \"10;20;30;world 4\")</li> <li>\"main.yml\" is now the only required file in the package. Empty files can be deleted</li> <li>Custom settings (i.e. EffectLib particle effects) are moved from \"main.yml\" to \"custom.yml\"</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_14","title":"Added","text":"<ul> <li>Compatibility with Shopkeepers ('shopkeeper' event, 'shopamount' condition)</li> <li>Compatibility with PlaceholderAPI ('ph' variable and 'betonquest' placeholder)</li> <li>Compatibility with HolographicDisplays (holograms visible based on conditions)</li> <li>Compatibility with RacesAndClasses (race, class, exp, level, mana conditions/events/variables)</li> <li>Compatibility with LegendQuest (race, class, attribute, karma conditions/variables)</li> <li>Compatibility with WorldEdit ('paste' a schematic event)</li> <li>New condition 'riding' - check if the player is riding an entity</li> <li>New condition 'world' - check the world in which the player is</li> <li>New condition 'gamemode' - check player's game mode</li> <li>New condition 'achievement' - check if the player has an achievement</li> <li>New condition 'variable' - check if a variable matches a pattern</li> <li>New event 'lever' - switches a lever</li> <li>New event 'door' - opens/closes doors, trapdoors and gates</li> <li>New event 'if' - run one of two events, depending on condition</li> <li>New event 'movenpc' - move Citizens NPC to a location</li> <li>New event 'variable' - set a variable in \"variable\" objective</li> <li>New objective 'vehicle' - entering a vehicle entity</li> <li>New objective 'variable' - lets players define their own variables for you to use</li> <li>New objective 'kill' - kill players who meet specified conditions</li> <li>New objective 'breed' - breed animals (only 1.10.2+)</li> <li>New variable '%location%' - resolves to player's location</li> <li>Keyword \"unbreakable\" can be used in items to make them unbreakable</li> <li>When a conversation option is selected, a Bukkit event is called (for developers)</li> <li>Chat can be paused while in conversation, it will display when finished</li> <li>Objectives can be completed for players with \"/q objective player complete\"</li> <li>Option 'full_main_page' controls if the main page is a separate page in the journal</li> <li>Mobs spawned with 'spawn' can be \"marked\"; you can require marked mobs in 'mobkill' objective</li> <li>Firework support in items</li> <li>Relative package paths, where '_' means \"one package up\"</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#185-2016-05-14","title":"[1.8.5] - 2016-05-14","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>Objectives are now correctly deleted with \"objective delete\" event and do notreappear after \"/q reload\".</li> <li>Objectives are no longer duplicated in the database when using \"/q reload\".</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#184-2016-05-06","title":"[1.8.4] - 2016-05-06","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>Conversations are no longer started twice</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#183-2016-05-06","title":"[1.8.3] - 2016-05-06","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>Events are no longer run in async thread when completing \"password\" objective</li> <li>Replaced stacktrace with error message when objective is incorrect in \"objective\" event</li> <li>Made color codes work with \"one_entry_per_page\" setting enabled</li> <li>Fixed a bug where taken backpack items were not removed from the database</li> <li>Quest items can now be equipped</li> <li>\"die\" objective now correctly handles damage done to the player</li> <li>Fixed error when conversation is started without any possible options</li> <li>Fixed error when killing NPCs with equipment</li> <li>Fixed problems with relogging while in conversations with \"stop\" option enabled</li> <li>Fixed error when loading corrupted item from the database</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_4","title":"Changes","text":"<ul> <li>Updater is now based on GitHub Releases, no longer downloads major updates automatically, it is more configurable and can also download development versions with \"/q update --dev\"</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_15","title":"Added","text":"<ul> <li>Added console message about the cause of \"/q give\" errors (tells you what is wrong with item instruction string)</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#182-2016-02-18","title":"[1.8.2] - 2016-02-18","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>Fixed NPE when killing a mob without any \"mobkill\" objectives</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#181-2016-02-18","title":"[1.8.1] - 2016-02-18","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_17","title":"Fixed","text":"<ul> <li>Removing journal entries from the database now works correctly</li> <li>MobKill objective now correctly handles kills</li> <li>Nested package names are now correctly resolved</li> <li>The formatting at the end of every main page line is reset</li> <li>Fixed Apache dependency problem</li> <li>Material name is no longer displayed in \"chest\" GUI conversations</li> <li>Fixed \"notify\" option in give/take events</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#18-2016-02-13","title":"[1.8] - 2016-02-13","text":"<p>Notes: - As always in big updates, compatibility with plugins hooking into BetonQuest is broken. You need to check if everything is working.</p>"},{"location":"User-Documentation/CHANGELOG/#fixed_18","title":"Fixed","text":"<ul> <li>Die objective now reacts to death caused by other plugins</li> <li>Static events now are started correctly</li> <li>Static events now are canceled correctly</li> <li>Action objective now correctly checks locations</li> <li>Combat tag is removed after death</li> <li>Block, Craft and MythicMobs MobKill objectives now correctly save data</li> <li>Take event now correctly takes items from inventory, armor slots and backpack</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_16","title":"Added","text":"<ul> <li>New variable system in conversations (check out the documentation)</li> <li>More options for journal, including one entry per page and removing date</li> <li>Compatibility with mcMMO (level condition and experience event)</li> <li>Compatibility with EffectLib ('particle' event, NPC particles)</li> <li>Compatibility with PlayerPoints (points event and condition)</li> <li>Compatibility with Heroes (class and skill condition, experience event, Heroes kills in 'mobkill' objective)</li> <li>Compatibility with Magic ('wand' condition)</li> <li>Compatibility with Denizen (running task scripts with 'script' event)</li> <li>Compatibility with SkillAPI (class and level condition)</li> <li>Compatibility with Quests (checking for done quests, starting them, custom event reward, custom condition requirement)</li> <li>Optional prefix for conversations (contributed by Jack McKalling)</li> <li>Optional material for buttons in \"chest\" conversation IO</li> <li>Configurable main page in the journal</li> <li>New argument in objectives: \"persistent\" - makes them repeat after completing</li> <li>New condition 'check' - allows for specifying multiple instructions in one</li> <li>New condition 'objective' - checks if the player has an active objective</li> <li>New condition 'score' - check scores on scoreboards</li> <li>New condition 'chestitem' - checks if a chest contains items</li> <li>New event 'run' - allows for specifying multiple instructions in one</li> <li>New event 'givejournal' - gives journal to the player</li> <li>New event 'sudo' - forces the player to run a command</li> <li>New event 'compass' - point player's compass to a location</li> <li>New event 'cancel' - cancels a quest (as in main.yml)</li> <li>New event 'score' - modify scores on scoreboards</li> <li>New events 'chestgive', 'chesttake' and 'chestclear' - put and remove items in chests</li> <li>New objective 'logout' - the player needs to leave the server</li> <li>New objective 'password' - the player needs to type the password in the chat</li> <li>New objective 'fish' - catching fish</li> <li>New objective 'enchant' - enchanting an item</li> <li>New objective 'shear' - shearing a sheep</li> <li>New objective 'chestput' - putting items in a chest</li> <li>New objective 'potion' - brewing a potion</li> <li>New commands: /cancelquest and /compass - directly open backpack sub-pages</li> <li>New subcommand '/q delete' - delete all specific tags/points/objectives/entries</li> <li>New subcommand '/q rename' - rename all specific tags/points/objectives/entries</li> <li>New subcommand '/q give' - gives you an item from items.yml</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_5","title":"Changes","text":"<ul> <li>Administrative messages are now English-only in new installations</li> <li>Journal event can remove entries from the journal</li> <li>In conversations, %quester% variable changed to %npc%</li> <li>In inventory GUI there is NPC's text in every option, for convenience</li> <li>Conversations can point to NPC options in other conversations within the package</li> <li>You can use spaces between events, conditions and pointers in conversations</li> <li>All tags and points are internally associated with a package now</li> <li>Some conditions are now static and persistent (just like events)</li> <li>Point event can now multiply points</li> <li>Vault Money event can now multiply money</li> <li>Journal event can now use \"update\" argument for updating variables on the main page</li> <li>Packages can now be moved to another directories</li> <li>Quest cancelers are now defined in a more convenient way</li> <li>/q command renamed to /betonquest, /j to /journal; previous forms are now aliases</li> <li>Conditions and events in objective instructions (and conditions in event instructions) can now be defined with \"condition:\" and \"event:\" argument (without \"s\" at the end)</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#176-2015-10-17","title":"[1.7.6] - 2015-10-17","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_19","title":"Fixed","text":"<ul> <li>Conversation can no longer be started multiple times at once if it happens on the same tick</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_17","title":"Added","text":"<ul> <li>Dutch translation by Jack McKalling</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#175-2015-09-12","title":"[1.7.5] - 2015-09-12","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_20","title":"Fixed","text":"<ul> <li>Restored compatibility with MythicMobs 2.1.0</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#174-2015-08-29","title":"[1.7.4] - 2015-08-29","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_21","title":"Fixed","text":"<ul> <li>Fixed error when player was quitting with active \"stop\" conversation while he had not changed his language with /ql command</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_6","title":"Changes","text":"<ul> <li>Inventory GUI will close itself if there's nothing left to display</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#173-2015-08-20","title":"[1.7.3] - 2015-08-20","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_22","title":"Fixed","text":"<ul> <li>Combat tagging does not work if the attack has been canceled</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_7","title":"Changes","text":"<ul> <li>Options in conversation can also be defined using \"event:\", \"condition:\" and \"pointers:\" argument names (with and without 's' at the end). \"text:\" argument is unchanged.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#172-2015-07-27","title":"[1.7.2] - 2015-07-27","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_23","title":"Fixed","text":"<ul> <li>\"mobkill\" objective now displays correct amount of mobs left to kill</li> <li>\"delay\" objective can be set to 0 delay</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#171-2015-07-19","title":"[1.7.1] - 2015-07-19","text":""},{"location":"User-Documentation/CHANGELOG/#fixed_24","title":"Fixed","text":"<ul> <li>Quests are loaded after other plugins register their types</li> <li>Journal condition correctly resolves package names</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_8","title":"Changes","text":"<ul> <li>Updated French translation</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#17-2015-07-17","title":"[1.7] - 2015-07-17","text":"<p>Notes: - BetonQuest no longer supports servers without UUID handling - There were a lot of changes since previous version, check carefully if everything is working - Compatibility with plugins hooking INTO BetonQuest is broken, they need to update</p>"},{"location":"User-Documentation/CHANGELOG/#fixed_25","title":"Fixed","text":"<ul> <li>Objectives no longer mysteriously double events</li> <li>Greatly improved performance in almost every aspect</li> <li>Finally fixed issues with special characters on some servers</li> <li>Fixed database saving/loading issues</li> <li>Fixed player options in conversations being white on next lines when using tellraw</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_18","title":"Added","text":"<ul> <li>Quest canceling system</li> <li>New inventory GUI for conversations</li> <li>Added the \"random\" parameter in \"folder\" event - choose randomly X events to fire</li> <li>Action objective can be \"canceled\" - the click will not do anything</li> <li>Added \"static events\" mechanism for firing events at specified time of the day</li> <li>Optional message when the player is pulled back by stop option</li> <li>Optional message for take and give events</li> <li>Optional message when advancing in \"block\" and \"mobkill\" objectives</li> <li>Variable system for quick changing quest parameters (for example location of a quest)</li> <li>\"/q vector\" command for easy calculating location vector variables</li> <li>New \"empty\" condition - amount of empty inventory slots</li> <li>New \"party\" condition - manages the conditions in the party</li> <li>New \"monsters\" condition - true if there are monsters in the area</li> <li>New \"clear\" event - kills specified monsters in the area</li> <li>New \"region\" objective - reach WorldGuard region</li> <li>Blacklist of commands which cannot be used while in conversation</li> <li>Option to disable compatibility with other plugins</li> <li>Added remove_items_after_respawn option - for servers using keepInventory gamerule</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_9","title":"Changes","text":"<ul> <li>The plugin now uses package system: configuration has been moved into \"default\" package</li> <li>Objectives has returned to \"objectives.yml\" - it's improving performance</li> <li>The database is now updated in real time</li> <li>All quests can (but don't have to) be translated into multiple languages</li> <li>Players can change their language with /questlang command</li> <li>Conversations with stop option are resumed when the player logs out and in again</li> <li>Metrics are now toggled in PluginMetrics/config.yml</li> <li>All conditions, events, objectives, conversations etc. are loaded when the plugin starts/reloads</li> <li>Citizens NPC will stop when talked to</li> <li>Quest blocks cannot be placed, quest items will not break</li> <li>Conversations cannot be started while in combat</li> <li>Cannot fight while in conversation</li> <li>Tellraw conversations no longer spam the console</li> <li>Mobs can be spawned with a name (spawnmob event, \"name:\" argument)</li> <li>/q command is now more beautiful</li> <li>Removed unnecessary argument prefixes from conditions and events</li> <li>Removed \"tag:\" from objective instruction strings</li> <li>Conversations no longer need those empty lines everywhere ('')</li> <li>Dependencies updated: WorldGuard/WorldEdit 6.1, MythicMobs 2.0.4</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#162-2015-04-10","title":"[1.6.2] - 2015-04-10","text":"<ul> <li>Fixed errors on data loading when MySQL is being used.</li> <li>Changes messages system to use simple file as default. If you want to use advanced translation just rename \"advanced-messages.yml\" to \"messages.yml\".</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#161-2015-03-26","title":"[1.6.1] - 2015-03-26","text":"<ul> <li>Fixed errors on updating journals when using MySQL.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#16-2015-03-16","title":"[1.6] - 2015-03-16","text":"<p>Notes: - There is a bug/feature in 1.8 which adds '\u00a70' at the end of every line in books generated by plugins. This breaks the conditions/events based on books with more than one line of text. The detailed instruction on how to work it around is in \"Other important stuff\" chapter, in the part about items.</p>"},{"location":"User-Documentation/CHANGELOG/#fixed_26","title":"Fixed","text":"<ul> <li>Items given by event that don't fit in the inventory will now drop instead of being deleted This does not apply to quest items, they will be added to backpack</li> <li>Events fired from conversations won't throw async errors</li> <li>Conversation can be started after plugin's reload without relogging</li> <li>/q reload no longer lags the server</li> <li>Corrected description in /q command</li> <li>Added input validation for global locations - if event is incorrect it will display an error instead of breaking the whole functionality</li> <li>The plugin should run fine on machines not supporting some special characters</li> <li>Inverted item condition now behave correctly</li> <li>Time condition now checks time correctly</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#added_19","title":"Added","text":"<ul> <li>Added backpack for storing quest items, which cannot be dropped in any way</li> <li>Added database backups</li> <li>Added prefix for the database. New installations will use \"betonquest_\" prefix for tables, existing configuration will use empty prefix to maintain compatibility with other programs</li> <li>Players can chat while in conversations by prefixing their messages with '#' character</li> <li>New \"random\" condition - true with specified probability</li> <li>New \"sneak\" condition - true if player is sneaking</li> <li>New \"journal\" condition - true if player has journal entry</li> <li>New \"testforblock\" condition - true if block at given location matches given material</li> <li>New \"arrow\" objective - completed when arrow hits the specified target</li> <li>New \"experience\" objective - completed when player reaches certain level</li> <li>New \"npcinteract\" objective - completed when player right-clicks Citizens NPC</li> <li>New \"damage\" event - damages the player</li> <li>Skript support (event, effect and condition)</li> <li>WorldGuard support (region condition)</li> <li>Errors are logged to the \"error.log\" file in \"logs\" directory</li> <li>Debug option in config.yml for logging plugin's activity to \"debug.log\" file</li> <li>New commands for opening backpack: b, bb, backpack, bbackpack or betonbackpack</li> <li>Items are now aware of leather armor color, head owner and enchantments in books</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#changes_10","title":"Changes","text":"<ul> <li>Added and changed a lot of subcommands in /q command:<ul> <li>event and condition can be run for every online player</li> <li>tag, point, objective and (new) journal can edit every (even offline) player</li> <li>config (new) can set configuration files from command line</li> <li>backup (new) backups the whole configuration and database</li> </ul> </li> <li>Folder event now runs these events even after the player logs out: command, tag, objective, delete, point, setblock</li> <li>Changed /j command to open the backpack instead of just giving the journal</li> <li>Tellraw clicking on options in conversation now ignores old (used) options</li> <li>Using color codes in journal entries is now possible</li> <li>Give/take events and item condition can now check for multiple items with syntax 'give stick:2,stone:4,sword'</li> <li>Give/take events and item/hand conditions can now check for items only without enchantments/effects/name/lore etc.</li> <li>Inverting condition is now done by prefixing their name with \"!\" (in the place where you use them, like conversation, not in conditions.yml)</li> <li>Configuration updater is no longer based on plugin's version</li> <li>Backup files are now kept in \"backups\" directory, old ones are moved to it</li> <li>Changed internal structure of the code (may matter to developers - QuestEvent, Condition and Objective classes has been moved from \"core\" package to \"api\", update your imports)</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#154-2015-03-12","title":"[1.5.4] - 2015-03-12","text":"<ul> <li>This version is almost the same as 1.5.3. The only difference is that it can load database backups created by 1.6 version. When updating to 1.6, the database format will change, so it won't be possible to go back, unless by loading the backup using this version of the plugin.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#153-2014-12-26","title":"[1.5.3] - 2014-12-26","text":"<ul> <li>Small fix of /q purge command not working on offline players.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#152-2014-12-23","title":"[1.5.2] - 2014-12-23","text":"<ul> <li>Fixed errors that were spamming the console when a player with active Location objective was teleporting to other worlds.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#151-2014-12-22","title":"[1.5.1] - 2014-12-22","text":""},{"location":"User-Documentation/CHANGELOG/#changes_11","title":"Changes","text":"<ul> <li>Multiple tags in one event are now possible</li> <li>Change /q event command to run from console</li> <li>Add color codes to item's name and lore</li> <li>Fix \"stop\" option in conversations not working</li> <li>Fix NPE on unknown answer in conversations</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#15-2014-12-21","title":"[1.5] - 2014-12-21","text":""},{"location":"User-Documentation/CHANGELOG/#changes_12","title":"Changes","text":"<ul> <li>Added support for MythicMobs and Vault (see wiki for more info)</li> <li>AutoUpdater is now enabled by default! If you want you can change this and reload the plugin, nothing will be downloaded in that case</li> <li>Books saving format has changed. All books were automatically converted, but you need to check them if everything looks like it's supposed to.</li> <li>Command event accepts multiple commands separated by \"|\", eg. \"command say beton|say quest\"</li> <li>Event command now accepts optional  argument at the end; this will fire event for  player. eg. \"/q event wood_reward Steve\" <li>Journal title and lore can now use colors (&amp;4 etc.) and journal is colorful; options in config.yml</li> <li>Added aliases for /q command: bq, bquest, bquests, betonquest, betonquests, quest, quests</li> <li>Added aliases for /j command: bj, journal, bjournal, betonjournal</li> <li>Objectives are now defined directly in event instruction, not in objectives.yml (which was deleted, if you want to restore something check the backup)</li> <li>Replies in conversations are now optionally clickable (tellraw option in config.yml)</li> <li>Added permission for starting a conversation: betonquest.conversation</li> <li>Conversation starting/ending, updating journal, plugin's update and full inventory can now make sounds; you can find a list of possible values here: jd.bukkit.org/rb/apidocs/org/bukkit/Sound.html</li> <li>Conditions for events are now defined as 'event_conditions:' instead of simply 'conditions:'. This is to distinguish conditions for objectives and for events, as both of them can exist in one instruction</li> <li>Updater is now run when disabling the plugin (it does matter if your server restarts every night) Notes:</li> <li>All Objective events has been converted to new format. The objectives.yml file has been deleted, so if it contained any objectives that weren't covered by an event they may seem lost. However there is a backup file and you can easily extract everything from it. Please refer to the wiki to learn how objectives are now defined or just study converted ones (it's pretty straightforward).</li> <li>AutoUpdater is now enabled by default. Every future update will be working exactly like before, all changes will be automatically updated by a converter, there is always a backup and you are informed about all changes in this file. So it's pretty safe to say that keeping this plugin up to date won't give you any trouble. If you don't want to have latest fixes and features you can disable updating but this will make the developer sad.</li> <li>Because of changes in how books behave since 1.8 you may experience some strange bugs with saving books to items.yml. Generally you should open a book before saving it using /q item command. And don't start or end your books with \" character, as it's part of a workaround of this bug/feature.</li>"},{"location":"User-Documentation/CHANGELOG/#143-2014-12-15","title":"[1.4.3] - 2014-12-15","text":"<ul> <li>Removed debug messages from ActionObjective. You could have told me, any of you guys...</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#142-2014-12-09","title":"[1.4.2] - 2014-12-09","text":"<ul> <li>Really fixed an updater.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#141-2014-12-09","title":"[1.4.1] - 2014-12-09","text":"<ul> <li>Fixed few bugs in Action objective.</li> <li>Fixed updater, hopefully.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#14-2014-12-07","title":"[1.4] - 2014-12-07","text":""},{"location":"User-Documentation/CHANGELOG/#changes_13","title":"Changes","text":"<ul> <li>Conversations are now divided into multiple files in \"conversations\" directory</li> <li>Items are now saved to items.yml file and referenced by \"take\", \"give\", \"item\" and \"hand\" events/conditions</li> <li>Added /q item  command which saves currently held item to the config as specified itemID <li>Added location to Action objective, which checks the location of the block (unlike location condition which checks location of the player)</li> <li>Added /q event  command which fires specified event <li>Fixed multiple bugs with conversation starting and ending</li> <li>Block NPCs can now be used with Citizens enabled</li> <li>Added NPCKill objective for killing NPCs</li> <li>Added SetBlock event for setting a block at specified location</li> <li>Improved Material matching in configs</li> <li>Modified Action objective for greater flexibility:<ul> <li>It is now possible to detect clicking in air</li> <li>It is no longer possible to detect clicking on any block (as this accepts clicking on air)</li> <li>Can be used to detect book reading (with help of updated Hand condition)</li> </ul> </li> <li>Added AutoUpdater; it's disabled by default Notes:</li> <li>Conversion of configuration should have been done automatically, you don't have to worry about anything. If something went wrong you can revert changes from generated backup file, which contains all your previous configs.</li> <li>You can enable AutoUpdater by setting \"autoupdate\" to true in config.yml. It is completely safe because all next versions will generate backups and convert all files automatically. You will be notified on joining the server about new changelog file.</li> <li>Please refer to the wiki for changes in formatting instruction strings for various things: https://github.com/Co0sh/BetonQuest/wiki</li> <li>You probably should also change names of converted items to something else than \"item12\". But that works too of course.</li>"},{"location":"User-Documentation/CHANGELOG/#13-2014-11-30","title":"[1.3] - 2014-11-30","text":""},{"location":"User-Documentation/CHANGELOG/#changes_14","title":"Changes","text":"<ul> <li>UUID support (optional)</li> <li>NPCs made from a clay block, head and sign, for servers without Citizens2 plugin</li> <li>Global, long and persistent delay for events (as an objective)</li> <li>Folder event for multiple events, with optional short delay</li> <li>French translation (thanks to fastlockel)</li> <li>If you want to convert names to UUIDs run the plugin once and then change in the config \"uuid: false\" to true. Do not touch the \"convert: true\" option unless you want your database wiped! Conversion will happen on next plugin reload (eg. /q reload). This is not revertable!</li> <li>Remember to backup your config files before updating! It shouldn't destroy anything but you never know.</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#12-2014-11-23","title":"[1.2] - 2014-11-23","text":"<ul> <li>Global locations now automatically run only once, no need for blocking it with tags and conditions. They use however tags that follow the syntax \"global_\", where  is global location objective tag. <li>Added optional respawn location for cancelled death objective, just add \"respawn:100.5;200;300.5;world;90;0\" to instruction string.</li> <li>Added German translation, thanks to coalaa!</li> <li>Added optional movement blocking while in conversation, just add option \"stop: true\" or \"stop: false\" in every conversation.</li> <li>Changed priority of conversation chat event to lowest, should work even for muted players.</li> <li>Fixed data values in block objective.</li> <li>Added metrics, you can disable them by setting \"metrics: false\" in config.yml</li> <li>Added support for SQLite, plugin will use it when connecting to MySQL fails.</li> <li>Fixed death objective not working every time and not removing all effects.</li>"},{"location":"User-Documentation/CHANGELOG/#11-2014-11-08","title":"[1.1] - 2014-11-08","text":"<ul> <li>Fixed many bugs including but not limited to:<ul> <li>negated conjunction condition</li> <li>unnecessary debug messages</li> <li>not working global locations</li> </ul> </li> <li>Replaced config examples with default quest</li> <li>Leaving data values in item's definition will make plugin ignore data value in most cases</li> <li>Improved journal to stop text leaks</li> <li>Item names now replace _ with spaces</li> </ul>"},{"location":"User-Documentation/CHANGELOG/#10-2014-11-06","title":"[1.0] - 2014-11-06","text":"<ul> <li>Initial release</li> </ul>"},{"location":"User-Documentation/Commands-and-permissions/","title":"Commands and permissions","text":""},{"location":"User-Documentation/Commands-and-permissions/#commands","title":"Commands","text":"<ul> <li>/j - gives the journal</li> <li>/backpack - opens the backpack</li> <li>/q - lists all available admin commands</li> <li>/q reload - reloads the plugin</li> <li>/q objectives {playerName} [list/add/del/complete] [instruction] - shows player's currently active objectives</li> <li>/q tags {playerName} [list/add/del] [tag] - lists all player's tags</li> <li>/q globaltags {playerName} [list/add/del] [tag] - lists all global tags</li> <li>/q points {playerName} [list/add/del] [category] [amount] - lists all player's points in all categories</li> <li>/q globalpoints {playerName} [list/add/del] [category] [amount]</li> <li>/q journal {playerName} [list/add/del] [package.pointer] [date]</li> <li>/q event {playerName} {package.eventID} - fires an event for the player</li> <li>/q condition {playerName} {package.conditionID} - shows if the player meet specified condition or not</li> <li>/q item {package.itemID} - creates an item based on what you're holding in hand</li> <li>/q give {package.itemID} - gives you an item defined in the configuration</li> <li>/q config {set/add/read} {path} [value] - sets, adds or reads values from configuration</li> <li>/q purge {playerName} - deletes all player's data from the database</li> <li>/q rename {tag/point/globalpoint/objective/entry} {oldName} {newName} - renames all specified things in the database</li> <li>/q delete {tag/point/objective/entry} {name} - deletes all specified things in the database</li> <li>/q backup - creates a backup of configuration files and database</li> <li>/q update - updates the plugin to the newest version.</li> <li>/q create {package}: creates new package with given name and fills it with empty files</li> <li>/q vector {packname.variable} {newvariable}: calculates the vector from first location variable to you position and saves it as second variable</li> <li>/q version: displays the versions of BetonQuest, the server and all hooked plugins</li> <li>/q debug [true/false]: enable debug mode and write all down in a log file or disable the debug mode</li> <li>/questlang {lang} - changes the language for the player (and globally if used from console). <code>default</code> language will use the language defined in config.yml.</li> </ul>"},{"location":"User-Documentation/Commands-and-permissions/#aliases","title":"Aliases","text":"<ul> <li>/j: bj, journal, bjournal, betonjournal, betonquestjournal</li> <li>/backpack: b, bb, bbackpack, betonbackpack, betonquestbackpack</li> <li>/q: bq, bquest, bquests, betonquest, betonquests, quest, quests<ul> <li>objective: o, objectives</li> <li>tag: t, tags</li> <li>point: p, points</li> <li>event: e, events</li> <li>condition: c, conditions</li> <li>journal: j, journals</li> <li>item: i, items</li> <li>give: g</li> <li>rename: r</li> <li>delete: d, del</li> <li>create: package</li> </ul> </li> <li>/questlang: ql</li> </ul>"},{"location":"User-Documentation/Commands-and-permissions/#permissions","title":"Permissions","text":"<ul> <li>betonquest.admin - allows using admin commands (/q ...) and creating an NPC from blocks</li> <li>betonquest.journal - allows using /j command (default for players)</li> <li>betonquest.backpack - allows using /backpack command (default for players)</li> <li>betonquest.conversation - allows talking with NPCs (default for players)</li> <li>betonquest.language - allows changing the language (default for players)</li> </ul> <p>Warning</p> <p>Don't give betonquest.admin permission to people you don't fully trust. They can use /q config command to add a <code>command</code> event, and this way execute any command as the console. This might be dangerous.</p>"},{"location":"User-Documentation/Commands-and-permissions/#main-command-details","title":"Main command details","text":"<p>Reloading loads all data from configuration, but not everything is updated. Player's data isn't touched to avoid lags made by database saving. The database is also the same, you will have to reload/restart the whole server for the database to change.</p> <p>Tags subcommand allows you to easily list and modify tags. '<code>/q tags Beton</code>' would list tags for player Beton. '<code>/q tags Beton add test</code>' would add \"test\" tag for that player, and '<code>/q tags Beton del test</code>' would remove it.</p> <p>Points subcommand is similar - listing points is done the same way. Adding points to a category looks like that: '<code>/q points Beton add reputation 20</code>' (adding 20 points to \"reputation\" category). You can also subtract points with negative amounts. Removing the whole point category can be achieved by '<code>/q points Beton del reputation</code>'.</p> <p>Journal subcommand works in the same way as those two above. Adding and removing looks like <code>/q journal Beton add default.wood_started</code> (or <code>del</code>), and you can also specify the date of entry when adding it, by appending date written like this: <code>23.04.2014_16:52</code> at the end of the command. Note that there is <code>_</code> character instead of space!</p> <p>Objective subcommand allows you to list all active objectives (shown as their labels) of the player. It can also directly add or cancel objectives using instruction strings. You can also complete the objective for the player using <code>complete</code> argument - it will run all events and remove the objective.</p> <p>Running events for online players can be done with event argument: '<code>/q event Beton give_emeralds</code>' would run \"give_emeralds\" for player Beton (if he's online) from default package (not necessarily \"default\" but rather the default one specified in config.yml). If you want to run a static event, replace player's name with <code>-</code>.</p> <p>There is also condition argument for checking conditions, for example '<code>/q condition Beton has_food</code>'. Events and conditions need to be defined in their files, this command doesn't accept raw instructions. You can skip package name, the plugin will assume you're reffering to package specified in <code>default_package</code> option in config.yml file. If you want to check a static condition replace the player's name with <code>-</code>.</p> <p>If you need to create for example \"Nettlebane\" quest item, just hold it in your hand and type '<code>/q item nettlebane</code>'. It will copy the item you're holding into the items.yml file and save it there with the name you specified (in this case \"nettlebane\"). You can skip the package name here as well.</p> <p>The '<code>/q give package.item</code>' command will simply give you specified item.</p> <p>Config subcommand is used to modify or display values in configuration files. <code>set</code> option replaces the value with what you typed, <code>add</code> simply adds your string to the existing value. (Note on spaces: by default the plugin won't insert a space between existing and added value. You can however achieve that by prefixing the string with <code>_</code> character. For example: existing string is <code>objective location</code>, and you want to add <code>100;200;300;world;10</code>. Your command will look like <code>/q config add default.events.loc_obj _100;200;300;world;10</code>). <code>read</code> option allows you to display config value without modifying it.</p> <p>Path in this command is like an address of the value. Next branches are separated by dots. For example language setting in main configuration has path <code>config.language</code>, and a text in \"bye\" player option in default quest has path <code>default.conversations.innkeeper.player_options.bye.text</code></p> <p>You can purge specific player with '<code>/q purge Beton</code>' command, where Beton is the name of the player. To purge the entire database at once simply change the prefix in config.yml or delete database.db file.</p> <p>Delete command ('<code>/q delete</code>') allows you to delete from the database every tag, point, objective or journal entry with specified name.</p> <p>Rename command ('<code>/q rename</code>') allows you to rename every tag, point, globalpoint, objective or journal entry in the database. In case of an objective it will also rename the objective in objectives.yml, so it continues to work correctly.</p> <p>If you want to backup your configuration and database make sure that your server is empty (this process requires all data to be saved to database -&gt; all players offline) and run '<code>/q backup</code>' command. You will get a zip file containing all your data, ready to be unzipped for restoring the plugin.</p> <p>Update command ('<code>/q update</code>') will try to download the newest version of the plugin and save it to the update folder. This folder is then handled by Spigot to update the plugin. If you accidentally use this command but do not wish to update the plugin, you should remove <code>BetonQuest.jar</code> file from the <code>plugins/update</code> folder before restarting/reloading the server.</p> <p>Using '<code>/q create beton</code>' command you will create new package named '<code>beton</code>'. It will contain the default quest.</p> <p>The <code>/q vector</code> command allows you to create vector variables from the specified in first argument location variable to your position. The result will be saved to the \"vectors.{second argument}\" variable.</p> <p>The debug command ('<code>/q debug</code>') allow you to enable or disable the debug mode. If the debug mode is enabled, the last 1000 log entries are written down to the latest.log file as history and write everything down until the debug mode os disabled. The file <code>/plugins/BetonQuest/logs/latest.log</code> is renamed to the current date and time on server start, if the debug mode is not longer active. The debug mode is useful, if you want to report an issue but it is not clear why the issue occurs.</p>"},{"location":"User-Documentation/Compatibility/","title":"Compatibility","text":"<p>In total 28 plugins have dedicated support for BetonQuest.</p> <p>BetonQuest hooks into other plugins by itself to provide more events, conditions and objectives or other features.  23 plugins are supported right now:   Brewery, Citizens, Denizen, EffectLib, Heroes, HolographicDisplays, JobsReborn, Magic, mcMMO, MMOLib, MMOCore, MMOItems, MythicMobs, PlaceholderAPI, ProtocolLib, Quests, Shopkeepers, SkillAPI, Skript, Vault, WorldEdit, FastAsyncWorldEdit and WorldGuard.</p> <p>Some plugins also hook into BetonQuest and provide support by themselves: nuNPCDestinations, RPGMenu, CalebCompass</p> <p>There are also plugins that hook into BetonQuest that require a clientside mod: BetonQuestGUI, NGVexJournal</p>"},{"location":"User-Documentation/Compatibility/#brewery","title":"Brewery","text":""},{"location":"User-Documentation/Compatibility/#conditions","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#drunk-drunk","title":"Drunk: <code>drunk</code>","text":"<p>This condition is true if the player is drunken. Only argument is the minimal drunkness (0-100).</p> <pre><code>drunk 50\n</code></pre>"},{"location":"User-Documentation/Compatibility/#drunk-quality-drunkquality","title":"Drunk Quality: <code>drunkquality</code>","text":"<p>This condition is true if the player has the given drunk quality. Only argument is the minimal drunk quality (1-10).</p> <pre><code>drunkquality 3\n</code></pre>"},{"location":"User-Documentation/Compatibility/#has-brew-hasbrew","title":"Has Brew: <code>hasbrew</code>","text":"<p>This condition is true if the player has the given grew with the specified amount in his inventory.</p> <pre><code>hasbrew MY_BREW 2\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#give-brew-givebrew","title":"Give Brew: <code>givebrew</code>","text":"<p>Gives the player the specified drink. The first number is the amount, and the second number is the quality of the drink.</p> <pre><code>givebrew 1 10 MY_BREW\n</code></pre>"},{"location":"User-Documentation/Compatibility/#take-brew-takebrew","title":"Take Brew: <code>takebrew</code>","text":"<p>Removes the specified drink from the players inventory. An amount needs to be specified.</p> <pre><code>takebrew MY_OTHER_BREW 2\n</code></pre>"},{"location":"User-Documentation/Compatibility/#npcs-using-citizens","title":"NPC's using Citizens","text":"<p>If you have this plugin you can use it's NPCs for conversations. I highly recommend you installing it, it's NPCs are way more immersive. Having Citizens also allows you to use NPCKill objective and to have moving NPC's.</p> <p>A Citizen NPC will only react to right clicks by default. This can be changed by  setting <code>acceptNPCLeftClick</code> in the config.yml to <code>true</code>.</p> <p>Notice</p> <p>You need to specify the ID of the NPC instead of it's name in the main.yml when using Citizens!</p>"},{"location":"User-Documentation/Compatibility/#conditions_1","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#npc-distance-npcdistance","title":"NPC distance: <code>npcdistance</code>","text":"<p>This condition will return true if the player is closer to the NPC with the given ID than the given distance.  The NPCs ID is the first argument, the distance is the second. If the npc is despawned the condition will return false.</p> <p>Example</p> <pre><code>npcdistance 16 22\n</code></pre>"},{"location":"User-Documentation/Compatibility/#npc-location-npclocation","title":"NPC location: <code>npclocation</code>","text":"<p>persistent, static</p> <p>This condition will return true if a npc is close to a location. First argument is the id of the NPC, second the location and third the maximum distance to the location that the npc is allowed to have.</p> <p>Example</p> <pre><code>npclocation 16 4.0;14.0;-20.0;world 22\n</code></pre>"},{"location":"User-Documentation/Compatibility/#npc-region-npcregion","title":"NPC region: <code>npcregion</code>","text":"<p>persistent, static</p> <p>Notice</p> <p>This condition also requires WorldGuard to work.</p> <p>This condition will return true if a npc is inside a region. First argument is the id of the npc second is the name of the region.</p> <p>Example</p> <pre><code>npcregion 16 spawn\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_1","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#move-npc-movenpc","title":"Move NPC: <code>movenpc</code>","text":"<p>This event will make the NPC move to a specified location. It will not return on its own, so you have to set a single path point with /npc path command - it will then return to that point every time. If you make it move too far away, it will teleport or break, so beware. You can change maximum pathfinding range in Citizens configuration files. The first argument in this event is ID of the NPC to move. Second one is a location in a standard format (like in <code>teleport</code> event). You can also specify multiple locations separated by colons to let the npc follow a path of locations. You can also specify additional arguments: <code>block</code> will block the NPC so you won't be able to start a conversation with him while he is moving, <code>wait:</code> is a number of tick the NPC will wait at its destination before firing events, <code>done:</code> is a list of events fired after reaching the destination, <code>fail:</code> is a list of events fired if this event fails. Move event can fail if the NPC is already moving for another player.</p> <p>Example</p> <pre><code>movenpc 121 100;200;300;world,105;200;280;world block wait:20 done:msg_were_here,give_reward fail:msg_cant_go,give_reward\n</code></pre>"},{"location":"User-Documentation/Compatibility/#stop-moving-npc-stopnpc","title":"Stop moving NPC: <code>stopnpc</code>","text":"<p>This will stop all current move tasks for the npc with the given ID.</p> <p>Example</p> <pre><code>stopnpc 16\n</code></pre>"},{"location":"User-Documentation/Compatibility/#teleport-npc-teleportnpc","title":"Teleport NPC: <code>teleportnpc</code>","text":"<p>This event will teleport the NPC with the given ID to the given location.</p> <p>Example</p> <pre><code>teleportnpc 53 100;200;300;world\n</code></pre>"},{"location":"User-Documentation/Compatibility/#objectives","title":"Objectives","text":""},{"location":"User-Documentation/Compatibility/#npc-interact-npcinteract","title":"NPC Interact: <code>npcinteract</code>","text":"<p>The player has to right-click on the NPC with specified ID. It can also optionally cancel the action, so the conversation won't start. The first argument is number (ID of the NPC), and the second is optional <code>cancel</code>.</p> <p>Example</p> <pre><code>npcinteract 3 cancel conditions:sneak events:steal\n</code></pre>"},{"location":"User-Documentation/Compatibility/#npc-kill-npckill","title":"NPC Kill: <code>npckill</code>","text":"<p>NPC Kill objective requires the player to kill an NPC with the given ID. You can also define how many times an NPC has to be killed. Right after objective's name there must be na ID of the NPC. You can also add an amount by <code>amount:</code>.</p> <p>Example</p> <pre><code>npckill 16 amount:3 events:reward\n</code></pre>"},{"location":"User-Documentation/Compatibility/#npc-range-npcrange","title":"NPC Range: <code>npcrange</code>","text":"<p>The player has to enter/leave a circle with the given radius around the NPC to complete this objective. It is also possible to define multiple NPCs separated with <code>,</code>. The objective will be completed as soon as you meet the requirement of just one npc. First argument is the ID of the NPC, second one is the type: Either <code>enter</code>, <code>leave</code>, <code>inside</code> or <code>outside</code> and the third one is the range. The types <code>enter</code>, <code>leave</code> force the player to actually enter the radius after you were outside of it and vice versa. This means that <code>enter</code> is not completed when the player gets the objective and is already in the range, while <code>inside</code> is instantly completed.</p> <p>Example</p> <pre><code>npcrange 3,5 enter 20 events:master_inRange\n</code></pre>"},{"location":"User-Documentation/Compatibility/#denizen","title":"Denizen","text":""},{"location":"User-Documentation/Compatibility/#events_2","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#script-script","title":"Script: <code>script</code>","text":"<p>With this event you can fire Denizen task scripts. Don't confuse it with <code>skript</code> event, these are different. The first and only argument is the name of the script.</p> <p>Example</p> <pre><code>script beton\n</code></pre>"},{"location":"User-Documentation/Compatibility/#effectlib","title":"EffectLib","text":"<p>If you install this plugin on your server you will be able to set a particle effect on NPCs with conversations and use <code>particle</code> event.</p> <p>EffectLib is not a normal plugin, it's a developer tool - there are no official docs. However, the Magic plugin has a wiki for EffectLib. It does contain a few magic specific settings though so please don't be confused if some stuff does not work. There is also a magic editor with autocompletion for EffectLib.</p> <p>You can control the behaviour of particles around the NPCs in custom.yml file, in <code>npc_effects</code> section. Each effect is defined as a separate subsection and consists of EffectLib options (described on the EffectLib page) and several BetonQuest settings. <code>npcs</code> is a list of all NPCs on which this effect can be displayed. If no <code>npcs</code> are specified it will use the package NPCs from main.yml. <code>conditions</code> is a list of conditions the player has to meet in order to see the effect. BetonQuest will find the first effect which can be displayed and show it to the player. <code>interval</code> controls how often the effect is displayed (in ticks). The effect will be fired from the exact location of the NPC, upwards.</p> <pre><code>npc_effects:\ncheck_interval: 50\ndisabled: false\nfarmer:\nclass: VortexEffect\niterations: 20\nparticle: crit_magic\nhelixes: 3\ncircles: 1\ngrow: 0.1\nradius: 0.5\ninterval: 30\nnpcs:\n- 1\nconditions:\n- '!con_tag_started'\n- '!con_tag_finished'\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_3","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#particle-particle","title":"Particle: <code>particle</code>","text":"<p>This event will load an effect defined in <code>effects</code> section in custom.yml file and display it on player's location. The only argument is the name of the effect. You can optionally add <code>loc:</code> argument followed by a location written like <code>100;200;300;world;180;-90</code> to put it on that location. If you add <code>private</code> argument the effect will only be displayed to the player for which you ran the event.</p> <p>Example</p> <p>In custom.yml <pre><code>effects:\nbeton:\nclass: HelixEffect\niterations: 100\nparticle: smoke\nhelixes: 5\ncircles: 20\ngrow: 3\nradius: 30\n</code></pre></p> <p>In events.yml <pre><code>particle beton loc:100;200;300;world;180;-90 private\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#heroes","title":"Heroes","text":"<p>When you install Heroes, all kills done via this plugin's skills will be counted in MobKill objectives.</p>"},{"location":"User-Documentation/Compatibility/#conditions_2","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#heroes-class-heroesclass","title":"Heroes Class: <code>heroesclass</code>","text":"<p>This condition checks the classes of the player. The first argument must be <code>primary</code>, <code>secondary</code> or <code>mastered</code>. Second is the name of a class or <code>any</code>. You can optionally specify <code>level:</code> argument followed by the required level of the player.</p> <p>Example</p> <pre><code>heroesclass mastered warrior\n</code></pre>"},{"location":"User-Documentation/Compatibility/#skill-heroesskill","title":"Skill: <code>heroesskill</code>","text":"<p>This condition checks if the player can use specified skill. The first argument is the name of the skill.</p> <p>Example</p> <pre><code>heroesskill charge\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_4","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#heroes-experience-heroesexp","title":"Heroes experience: <code>heroesexp</code>","text":"<p>This event simply gives the player specified amount of Heroes experience. The first argument is either <code>primary</code> or <code>secondary</code> and it means player's class. Second one is the amount of experience to add.</p> <p>Example</p> <pre><code>heroesexp primary 1000\n</code></pre>"},{"location":"User-Documentation/Compatibility/#holographicdisplays","title":"HolographicDisplays","text":""},{"location":"User-Documentation/Compatibility/#hidden-holograms","title":"Hidden Holograms","text":"<p>Installing this plugin will enable you to create hidden holograms, which will be shown to players only if they meet specified conditions. Note that you need to have ProtocolLib installed in order to hide holograms from certain players.</p> <p>In order to create a hologram, you have to add <code>holograms</code> section in your custom.yml file. Add a node named as your hologram to this section and define <code>lines</code>, <code>conditions</code> and <code>location</code> subnodes. The fist one should be a list of texts - these will be the lines of a hologram. Color codes are supported. Second is a list of conditions separated by commas. Third is a location in a standard format, like in <code>teleport</code> event. An example of such hologram definition:</p> <pre><code>holograms:\nbeton:\nlines:\n- '&amp;bThis is Beton.'\n- 'item:custom_item'\n- '&amp;eBeton is strong.'\nlocation: 100;200;300;world\nconditions: has_some_quest, !finished_some_quest\n# How often to check conditions (optional)\ncheck_interval: 20\n</code></pre> <p>A line can also represent a floating item. To do so enter the line as 'item:<code>custom_item</code>'. It will be replaced with the <code>custom_item</code> defined defined in items.yml. If the Item is defined for example as map, a floating map will be seen between two lines of text.</p> <p>The holograms are updated every 10 seconds. If you want to make it faster, add <code>hologram_update_interval</code> option in config.yml file and set it to a number of ticks you want to pass between updates (one second is 20 ticks). Don't set it to 0 or negative numbers, it will result in an error.</p>"},{"location":"User-Documentation/Compatibility/#npc-holograms","title":"NPC Holograms","text":"<p>If Citizens is also installed then you can have holograms configured relative to an npc. Add the following to custom.yml.</p> <pre><code>npc_holograms:\n# How often to check conditions\ncheck_interval: 100\n\n# Holograms follow npcs when they move (higher cpu usage when true)\nfollow: false\n\n# Disable npc_holograms\ndisabled: false\n\n# Hologram Settings\ndefault:\n# Lines in hologram\nlines:\n- \"Some text!\"\n# Vector offset to NPC position to place hologram\nvector: 0;3;0\n\n# Conditions to display hologram\nconditions: has_some_quest, !finished_some_quest\n\n# NPC's to apply these settings to. If blank, applies by default\nnpcs:\n- 0\n- 22\n</code></pre> <p>Item lines are also supported here.</p>"},{"location":"User-Documentation/Compatibility/#jobsreborn","title":"JobsReborn","text":"<p>Requires adding the following to config.yml: <pre><code>hook:\njobs: 'true'\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#conditions_3","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#can-level-up-nujobs_canlevel-jobname","title":"Can Level up: <code>nujobs_canlevel {jobname}</code>","text":"<p>Returns true if the player can level up</p>"},{"location":"User-Documentation/Compatibility/#has-job-nujobs_hasjob-jobname","title":"Has Job: <code>nujobs_hasjob {jobname}</code>","text":"<p>Returns true if the player has this job</p> <p>Example</p> <pre><code>nujobs_hasjob Woodcutter\n</code></pre>"},{"location":"User-Documentation/Compatibility/#job-full-nujobs_jobfull-jobname","title":"Job Full: <code>nujobs_jobfull {jobname}</code>","text":"<p>Returns true if the job is at the maximum slots</p>"},{"location":"User-Documentation/Compatibility/#job-level-nujobs_joblevel-jobname-min-max","title":"Job Level: <code>nujobs_joblevel {jobname} {min} {max}</code>","text":"<p>Returns true if the player has this job, and at a level equal to or between the min/max</p> <p>Example</p> <pre><code>nujobs_joblevel Woodcutter 5 10\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_5","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#add-jobs-experience-nujobs_addexp-jobname-exp","title":"Add Jobs Experience: <code>nujobs_addexp {jobname} {exp}</code>","text":"<p>Gives the player experience</p>"},{"location":"User-Documentation/Compatibility/#increase-jobs-level-nujobs_addlevel-jobname-amount","title":"Increase Jobs Level: <code>nujobs_addlevel {jobname} {amount}</code>","text":"<p>Increases the player level by amount.</p>"},{"location":"User-Documentation/Compatibility/#decrease-jobs-level-nujobs_dellevel-jobname-amount","title":"Decrease Jobs Level: <code>nujobs_dellevel {jobname} {amount}</code>","text":"<p>Decreases the players level by amount.</p>"},{"location":"User-Documentation/Compatibility/#join-jobs-job-event-nujobs_joinjob-jobname","title":"Join Jobs Job Event: <code>nujobs_joinjob {jobname}</code>","text":"<p>Joins the player to job.</p>"},{"location":"User-Documentation/Compatibility/#leave-jobs-job-event-nujobs_leavejob-jobname","title":"Leave Jobs Job Event: <code>nujobs_leavejob {jobname}</code>","text":"<p>Removes the player from job.</p>"},{"location":"User-Documentation/Compatibility/#set-jobs-level-nujobs_setlevel-jobname-level","title":"Set Jobs Level: <code>nujobs_setlevel {jobname} {level}</code>","text":"<p>Set the player to level.</p>"},{"location":"User-Documentation/Compatibility/#objectives_1","title":"Objectives","text":""},{"location":"User-Documentation/Compatibility/#join-jobs-job-objective-nujobs_joinjob-jobname","title":"Join Jobs Job Objective: <code>nujobs_joinjob {jobname}</code>","text":"<p>Triggers when player joins job.</p>"},{"location":"User-Documentation/Compatibility/#leave-jobs-job-objective-nujobs_leavejob-jobname","title":"Leave Jobs Job Objective: <code>nujobs_leavejob {jobname}</code>","text":"<p>Triggers when player leaves job.</p> <p>Notice</p> <p>This is not triggered by '/jobs leaveall'</p>"},{"location":"User-Documentation/Compatibility/#jobs-job-levelup-nujobs_levelup-jobname","title":"Jobs Job Levelup: <code>nujobs_levelup {jobname}</code>","text":"<p>Triggers when player levels up.</p>"},{"location":"User-Documentation/Compatibility/#jobs-job-payment-nujobs_payment-amount","title":"Jobs Job Payment: <code>nujobs_payment {amount}</code>","text":"<p>Triggers when player makes {amount} of money from jobs.</p>"},{"location":"User-Documentation/Compatibility/#magic","title":"Magic","text":""},{"location":"User-Documentation/Compatibility/#conditions_4","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#wand-wand","title":"Wand: <code>wand</code>","text":"<p>This condition can check wands. The first argument is either <code>hand</code>, <code>inventory</code> or <code>lost</code>. If you choose <code>lost</code>, the condition will check if the player has lost a wand. If you choose <code>hand</code>, the condition will check if you're holding a wand in your hand. <code>inventory</code> will check your whole inventory instead of just the hand. In case of <code>hand</code> and <code>inventory</code> arguments you can also add optional <code>name:</code> argument followed by the name of the wand (as defined in wands.yml in Magic plugin) to check if it's the specific type of the wand. In the case of <code>inventory</code> you can specify an amount with <code>amount</code> and this will only return true if a player has that amount. You can also use optional <code>spells:</code> argument, followed by a list of spells separated with a comma. Each spell in this list must have a minimal level defined after a colon.</p> <p>Example</p> <pre><code>wand hand name:master spells:flare:3,missile:2\n</code></pre>"},{"location":"User-Documentation/Compatibility/#mcmmo","title":"McMMO","text":""},{"location":"User-Documentation/Compatibility/#conditions_5","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#mcmmo-level-mcmmolevel","title":"McMMO Level: <code>mcmmolevel</code>","text":"<p>This conditions checks if the player has high enough level in the specified skill. The first argument is the name of the skill, second one is the minimum level the player needs to have to pass this condition.</p> <p>Example</p> <pre><code>mcmmolevel woodcutting 50\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_6","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#add-mcmmo-experience-mcmmoexp","title":"Add MCMMO Experience: <code>mcmmoexp</code>","text":"<p>This event adds experience points in a specified skill. The first argument is the name of the skill, second one is the amount of experience to add.</p> <p>Example</p> <pre><code>mcmmoexp swords 1500\n</code></pre>"},{"location":"User-Documentation/Compatibility/#teamrequiem-mmocore-mmoitem-mmolib","title":"TeamRequiem (MMOCore, MMOItem, MMOLib)","text":""},{"location":"User-Documentation/Compatibility/#conditions_6","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#mmocore-class-mmoclass","title":"MMOCore class: <code>mmoclass</code>","text":"<p>Checks if a player has the given MMOCore class. You can check for any class that is not the default class by writing <code>*</code> instead of a class name. If a level has been specified the player needs to be on that level or higher to meet the condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass * 5\nmmoclass WARRIOR\nmmoclass MAGE 5\nmmoclass MAGE 5 equal\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmocore-attribute-mmoattribute","title":"MMOCore attribute: <code>mmoattribute</code>","text":"<p>Checks if a player has the specified attribute on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoclass mmoattribute strength 2 mmoclass mmoattribute strength 2 equal\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmocore-profession-mmoprofession","title":"MMOCore profession: <code>mmoprofession</code>","text":"<p>Checks if a player has the specified profession on the given level or higher. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmoprofession mining 2 mmoprofession mining 2 equal\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmoitems-item-mmoitem","title":"MMOItems item: <code>mmoitem</code>","text":"<p>Checks if a player has the specified amount of MMOItems or more in his inventory. If no amount has been defined the default amount is one. <pre><code>mmoitem ARMOR SKELETON_CROWN\nmmoitem GEMS SPEED_GEM 3\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmoitems-hand-mmohand","title":"MMOItems hand: <code>mmohand</code>","text":"<p>Checks if a player holds the specified MMOItem in his hand. Checks the main hand if not specified otherwise using the <code>offhand</code> argument. If no amount has been defined the default amount is one. <pre><code>mmohand ARMOR SKELETON_CROWN\nmmohand GEMS SPEED_GEM 3 offhand\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmolib-stat-mmostat","title":"MMOLib stat: <code>mmostat</code>","text":"<p>Checks these stats that combine all sorts of stats from MMOCore and MMOItems. The player needs to be on the specified level or higher in order to meet this condition. You can disable this behaviour by adding the <code>equal</code> argument.  <pre><code>mmostat DAMAGE_REDUCTION 3\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#objectives_2","title":"Objectives","text":""},{"location":"User-Documentation/Compatibility/#break-special-blocks-mmocorebreakblock","title":"Break Special Blocks: <code>mmocorebreakblock</code>","text":"<p>This objective requires the player to break  special blocks from MMOCore. All three different block types and an amount can be defined. You can also send notifications to the player by appending the <code>notify</code> keyword. <pre><code>mmocorebreakblock 5 block:1      #A custom block's block ID\nmmocorebreakblock 64 block:STONE  #vanilla material\nmmocorebreakblock 1 block:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVy #... this is a heads texture data\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mmocore-profession-levelup-mmoprofessionlevelup","title":"MMOCore Profession levelup: <code>mmoprofessionlevelup</code>","text":"<p>This objective requires the player to level the given profession to the specified level. <pre><code>mmoprofessionlevelup MINING 10\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#craft-item-mmoitemcraft","title":"Craft item: <code>mmoitemcraft</code>","text":"<p>This objective requires the player to craft the item with the given type and id. It supports any MMOItem that was crafted using vanilla crafting methods, MMOItems \"recipe-amounts\" crafting and MMOItems station crafting. An amount can also be set if it shall differ from the default (which is one) by adding the <code>amount:</code> argument. The amount is based on how many items have actually been crafted, not how often a specific recipe has been used! Therefore, a recipe that makes four items at once will let the objective progress by four steps.  </p> <pre><code>mmoitemcraft SWORD STEEL_SWORD\nmmoitemcraft HEALTH_POTION_RECIPE amount:5\n</code></pre>"},{"location":"User-Documentation/Compatibility/#upgrade-item-mmoitemupgrade","title":"Upgrade Item: <code>mmoitemupgrade</code>","text":"<p>This objective tracks if a player upgrades the given item with an upgrade consumable. <pre><code>mmoitemupgrade SWORD FALCON_BLADE\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#apply-gemstone-mmoitemapplygem","title":"Apply gemstone: <code>mmoitemapplygem</code>","text":"<p>This objective is completed when the player applies the gemstone with the given gemstoneID to an item with the given itemType and itemID. <pre><code>mmoitemapplygem SWORD CUTLASS GEM_OF_ACCURACY\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#activate-mythiclib-skill-mmoskill","title":"Activate MythicLib skill: <code>mmoskill</code>","text":"<p>This objective requires the player to activate a MythicLib skill (e.g. with MMOItems or MMOCore). </p> Parameter Syntax Default Value Explanation skill SKILL_ID The ID of the skill. trigger name:level All trigger types. The types of triggers that can be used to activate the skill. If not specified, all triggers are allowed. Example<pre><code>triggerSkill: \"mmoskill LIFE_ENDER event:updateStatistics\"\ncastSkillWithMMOCore: \"mmoskill DEEP_WOUND trigger:CAST event:completeTutorial\"\nitemSkill: \"mmoskill DEEP_WOUND trigger:RIGHT_CLICK,LEFT_CLICK event:giveReward\"\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_7","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#give-mmocore-class-experience-mmoclassexperience","title":"Give MMOCore class experience: <code>mmoclassexperience</code>","text":"<p>Adds experience to the players class. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoclassexperience 150\nmmoclassexperience 1 level\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-mmocore-profession-experience-mmoprofessionexperience","title":"Give MMOCore profession experience: <code>mmoprofessionexperience</code>","text":"<p>Adds experience in the specified player profession. The amount can be a variable or a number. The <code>level</code> argument is optional and would convert the amount to levels instead of XP points. <pre><code>mmoprofessionexperience 100\nmmoprofessionexperience 1 level\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-class-points-mmocoreclasspoints","title":"Give class points: <code>mmocoreclasspoints</code>","text":"<p>Gives the player class points. The amount can be a variable or a number. <pre><code>mmocoreclasspoints 1\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-skill-points-mmocoreskillpoints","title":"Give skill points: <code>mmocoreskillpoints</code>","text":"<p>Gives the player skill points. The amount can be a variable or a number. <pre><code>mmocoreskillpoints 10\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-attribute-points-mmocoreattributepoints","title":"Give attribute points: <code>mmocoreattributepoints</code>","text":"<p>Gives the player attribute points. The amount can be a variable or a number. <pre><code>mmocoreattributepoints 2\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-attribute-reallocation-points-mmocoreattributereallocationpoints","title":"Give attribute reallocation points: <code>mmocoreattributereallocationpoints</code>","text":"<p>Gives the player attribute reallocation points. The amount can be a variable or a number. <pre><code>mmocoreattributereallocationpoints 1\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#give-mmoitem-mmoitemgive","title":"Give MMOItem: <code>mmoitemgive</code>","text":"<p>Gives the player predefined item. Default amount is one and can be set manually to a higher amount or a variable. The item can be adjusted to the players level by adding the <code>scale</code> option. If you want all items to be stacked together  the <code>singleStack</code> option can be set. If the player doesn't have required space in the inventory, the items will be dropped on the ground. You can also specify the <code>notify</code> keyword to display a message to the player about what items have been received. <pre><code>mmoitemgive CONSUMABLE MANA_POTION\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#take-mmoitem-mmoitemtake","title":"Take MMOItem: <code>mmoitemtake</code>","text":"<p>Removes the specified item from the players inventory. Optional arguments are an amount and <code>notify</code> to send a notification to the player.</p> <p>Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined. The backpack will not work before 2.0's item rework since the current item system does not safe custom NBT data.</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p> <p>Amount can be a variable. <pre><code>mmoitemtake SWORD STEEL_SWORD\nmmoitemtake SWORD STEEL_SWORD notify\nmmoitemtake CONSUMABLE HEALTH_POTION amount:5\nmmoitemtake CONSUMABLE BAKED_APPLES amount:2 invOrder:Backpack,Inventory\nmmoitemtake ARMOR KINGS_CHESTPLATE invOrder:Armor,Backpack\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#mythicmobs","title":"MythicMobs","text":"<p>Having MythicMobs allows you to use MythicMobs MobKill objective and MythicMobs SpawnMob event.</p>"},{"location":"User-Documentation/Compatibility/#objectives_3","title":"Objectives","text":""},{"location":"User-Documentation/Compatibility/#mobkill-mmobkill","title":"MobKill: <code>mmobkill</code>","text":"<p>You need to kill the specified amount of MythicMobs to complete this objective. The first argument must be the mob's internal name (the one defined in your MythicMobs configuration). You can optionally add the <code>amount:</code> argument to specify how many of these mobs need to be killed. It's also possible to add the optional arguments <code>minLevel</code> and <code>maxLevel</code> to further customize what mobs need to be killed. You can also add an optional <code>neutralDeathRadiusAllPlayers</code> argument to complete the objective for each nearby player  within the defined radius when the mob is killed by any non-player source. You can add a \"notify\" keyword if you want to send a notification to players whenever the objective progresses.</p> <p>Example</p> <pre><code>mmobkill SkeletalKnight amount:2 events:reward\nmmobkill SnekBoss amount:2 minlevel:4 maxlevel:6 events:reward\n</code></pre>"},{"location":"User-Documentation/Compatibility/#conditions_7","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#mythicmob-distance-mythicmobdistance","title":"MythicMob distance: <code>mythicmobdistance</code>","text":"<p>Check whether the player is near a specific MythicMobs entity. The first argument is the internal name of the mob (the one defined in MythicMobs' configuration). The second argument is the distance to check, measured in block lengths in a circular radius.</p> <p>Example</p> <pre><code>mythicmobdistance SkeletalKnight 7\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_8","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#spawnmob-mspawnmob","title":"SpawnMob: <code>mspawnmob</code>","text":"<p>Spawn specified amount of MythicMobs at given location. The first argument is a location defined like <code>100;200;300;world</code>. Second is MythicMobs internal name (the one defined in MythicMobs' configuration) followed by a colon and a level. Third one is amount and it's required!</p> <p>Example</p> <pre><code>mspawnmob 100;200;300;world SkeletalKnight:1 5\n</code></pre>"},{"location":"User-Documentation/Compatibility/#placeholderapi","title":"PlaceholderAPI","text":"<p>If you have this plugin, BetonQuest will add a <code>betonquest</code> placeholder to it and you will be able to use <code>ph</code> variable in your conversations.</p>"},{"location":"User-Documentation/Compatibility/#placeholder-betonquest","title":"Placeholder: <code>betonquest</code>","text":"<p>You can use all BetonQuest variables in any other plugin that supports PlaceholderAPI. You can even use BetonQuests conditions using the condition variable!   This works using the <code>%betonquest_package:variable%</code> placeholder. The <code>package:</code> part is the name of a package. If you don't specify this, the plugin will assume you're using that variable in <code>default</code> package. The <code>variable</code> part is just a BetonQuest variable without percentage characters, like <code>point.beton.amount</code>.</p> <p>Testing your placeholder is easy using this command:   <code>/papi parse &lt;PlayerName&gt; %betonquest_&lt;PackageName&gt;:&lt;VariableType&gt;.&lt;Property&gt;%</code> <pre><code>%betonquest_someGreatQuest:objective.killZombies.left%\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#variable-ph","title":"Variable: <code>ph</code>","text":"<p>You can also use placeholders from other plugins in BetonQuest. Simply insert a variable starting with <code>ph</code>, the second argument should be the placeholder without percentage characters.</p> <p>Example</p> <pre><code>%ph.player_item_in_hand%\n</code></pre>"},{"location":"User-Documentation/Compatibility/#protocollib","title":"ProtocolLib","text":""},{"location":"User-Documentation/Compatibility/#hiding-npcs","title":"Hiding NPC's","text":"<p>Having ProtocolLib installed will let you hide Citizens NPCs if specified conditions are met. You can do that by adding a <code>hide_npcs</code> section to the custom.yml file in your package.  It allows you to assign conditions to specific NPC IDs like so:</p> <pre><code>hide_npcs:\n41: killedAlready,questStarted\n127: '!questStarted'\n</code></pre> <p>The interval the conditions are checked in can be configured in the config.yml.</p>"},{"location":"User-Documentation/Compatibility/#force-visibility-update","title":"Force Visibility update","text":"<p>You can run the <code>updatevisibility</code> event to manually update the visibility. This is useful for performance optimizations on large servers if used together with the npc hider interval set to high values.</p>"},{"location":"User-Documentation/Compatibility/#conversation-io-menu","title":"Conversation IO: <code>menu</code>","text":"<p>ProtocolLib also enables a conversation IO that makes use of a chat menu system.</p>   Sorry, your browser doesn't support embedded videos.   <p>Customize how it looks by adding the following lines to custom.yml:</p> <pre><code>menu_conv_io:\nline_length: 50\nrefresh_delay: 180\n\nnpc_wrap: '&amp;l &amp;r'\nnpc_text: '&amp;l &amp;r&amp;f{npc_text}'\nnpc_text_reset: '&amp;f'\noption_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r'\noption_text: '&amp;l &amp;l &amp;l &amp;l &amp;r&amp;8[ &amp;b{option_text}&amp;8 ]'\noption_text_reset: '&amp;b'\noption_selected: '&amp;l &amp;r &amp;r&amp;7\u00bb&amp;r &amp;8[ &amp;f&amp;n{option_text}&amp;8 ]'\noption_selected_reset: '&amp;f'\noption_selected_wrap: '&amp;r&amp;l &amp;l &amp;l &amp;l &amp;r&amp;f&amp;n'\n\ncontrol_select: jump,left_click\ncontrol_cancel: sneak\ncontrol_move: scroll,move\n\nnpc_name_type: chat\nnpc_name_align: center\nnpc_name_format: '&amp;e{npc_name}&amp;r'\n</code></pre> <p>Where:</p> <ul> <li><code>line_length</code> - Maximum size of a line till its wrapped</li> <li><code>refresh_delay</code> - Specify how many ticks to auto update display. Default 180</li> <li><code>npc_wrap</code> - What text to prefix each new line in the NPC text that wraps</li> <li><code>npc_text</code> - How to write the NPC text. Replaces {1} with the npcs text</li> <li><code>npc_text_reset</code> - When a color reset is found, what to replace it with</li> <li><code>option_wrap</code> - What text to prefix each new line in an option that wraps</li> <li><code>option_text</code> - How to write an option. Replaces {1} with the option text</li> <li><code>option_text_reset</code> - When a color reset is found, what to replace it with</li> <li><code>option_selected</code> - How to write a selected option. Replaces {1} with the option text</li> <li><code>option_selected_reset</code> - When a color reset is found, what to replace it with</li> <li><code>option_selected_wrap</code> - What text to prefix each new line in a selected option that wraps</li> <li><code>control_select</code> - Space separated actions to select. Can be any of 'jump', 'left_click', 'sneak'</li> <li><code>control_cancel</code> - Space separated actions to select. Can be any of 'jump', 'left_click', 'sneak'</li> <li><code>control_move</code> - Space separated actions to move selection. Can be any of 'move', 'scroll'</li> <li><code>npc_name_type</code> - Type of NPC name display. Can be one of: 'none', 'chat'</li> <li><code>npc_name_align</code> - For npc name type of 'chat', how to align name. One of: 'left', 'right', 'center'</li> <li><code>npc_name_format</code> - How to format the npc name</li> </ul> <p>Variables:</p> <ul> <li><code>{npc_text}</code> - The text the NPC says</li> <li><code>{option_text}</code> - The option text</li> <li><code>{npc_name}</code> - The name of the NPC</li> </ul>"},{"location":"User-Documentation/Compatibility/#chat-interceptor-packet","title":"Chat Interceptor: <code>packet</code>","text":"<p>Intercept pretty much anything sent to the player by intercepting packets sent to them. This can be enabled by default by setting the <code>default_interceptor</code> to <code>packet</code> in config.yml or per conversation by setting <code>interceptor</code> to <code>packet</code> in the top level of the conversation.</p>"},{"location":"User-Documentation/Compatibility/#quests","title":"Quests","text":"<p>Quests is another questing plugin, which offers very simple creation of quests. If you don't want to spend a lot of time to write advanced quests in BetonQuest but you need a specific thing from this plugin you can use Custom Event Reward or Custom Condition Requirement. Alternatively, if you have a lot of quests written in Quests, but want to integrate them with the conversation system, you can use <code>quest</code> event and <code>quest</code> condition.</p>"},{"location":"User-Documentation/Compatibility/#condition-requirement-quests","title":"Condition Requirement (Quests)","text":"<p>When adding requirements to a quest, choose \"Custom requirement\" and then select \"BetonQuest condition\". Now specify condition's name and it's package (like <code>package.conditionName</code>). Quests will check BetonQuest condition when starting the quest.</p>"},{"location":"User-Documentation/Compatibility/#event-reward-quests","title":"Event Reward (Quests)","text":"<p>When adding rewards to a quest or a stage, choose \"Custom reward\" and then select \"BetonQuest event\". Now specify event's name and it's package (like <code>package.eventName</code>). Quests will fire BetonQuest event when this reward will run.</p>"},{"location":"User-Documentation/Compatibility/#conditions_8","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#quest-condition-quest","title":"Quest condition: <code>quest</code>","text":"<p>This condition is met when the player has completed the specified quest. The first and only argument is the name of the quest. It it contains any spaces replace them with <code>_</code>.</p> <p>Example</p> <pre><code>quest stone_miner\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_9","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#quest-quest","title":"Quest: <code>quest</code>","text":"<p>This event will start the quest for the player. The first argument must be the name of the quest, as defined in <code>name</code> option in the quest. If the name contains any spaces replace them with <code>_</code>. You can optionally add <code>check-requirements</code> argument if you want the event to respect this quest's requirements (otherwise the quest will be forced to be started).</p> <p>Example</p> <pre><code>quest stone_miner check-requirements\n</code></pre>"},{"location":"User-Documentation/Compatibility/#shopkeepers","title":"Shopkeepers","text":""},{"location":"User-Documentation/Compatibility/#conditions_9","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#shop-amount-shopamount","title":"Shop amount: <code>shopamount</code>","text":"<p>This condition checks if the player owns specified (or greater) amount of shops. It doesn't matter what type these shops are. The only argument is a number - minimum amount of shops.</p> <p>Example</p> <pre><code>shopamount 2\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_10","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#open-shop-window-shopkeeper","title":"Open shop window: <code>shopkeeper</code>","text":"<p>This event opens a trading window of a Villager. The only argument is the uniqueID of the shop. You can find it in Shopkeepers/saves.yml file, under <code>uniqueID</code> option.</p> <p>Example</p> <pre><code>shopkeeper b687538e-14ce-4b77-ae9f-e83b12f0b929\n</code></pre>"},{"location":"User-Documentation/Compatibility/#skillapi","title":"SkillAPI","text":"<p>This adds support for Sentropics SkillAPI fork. They still update SkillAPI.  </p>"},{"location":"User-Documentation/Compatibility/#conditions_10","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#skillapi-class-skillapiclass","title":"SkillAPI Class: <code>skillapiclass</code>","text":"<p>This condition checks if the player has specified class or a child class of the specified one. The first argument is simply the name of a class. You can add <code>exact</code> argument if you want to check for that exact class, without checking child classes.</p> <p>Example</p> <pre><code>skillapiclass warrior\n</code></pre>"},{"location":"User-Documentation/Compatibility/#skillapi-level-skillapilevel","title":"SkillAPI Level: <code>skillapilevel</code>","text":"<p>This condition checks if the player has specified or greater level is the specified class. The first argument is class name, the second one is the required level.</p> <p>Example</p> <pre><code>skillapilevel warrior 3\n</code></pre>"},{"location":"User-Documentation/Compatibility/#skript","title":"Skript","text":"<p>BetonQuest can also hook into Skript. Firstly, to avoid any confusion, I will refere to everything here by name of the plugin (Skript event is something else than BetonQuest event). Having Skript on your server will enable using BetonQuest events and conditions in scripts, and also trigger them by BetonQuest event.</p> <p>You can use cross-package paths using <code>-</code> between the packages. Example: <code>player meets condition \"default-Forest-Jack.Completed\"</code></p>"},{"location":"User-Documentation/Compatibility/#skript-event-triggered-by-betonquest-skript-event","title":"Skript event triggered by BetonQuest <code>skript</code> event","text":"<p>This entry will describe two things: Skript event and BetonQuest event.</p> <ol> <li>Skript event - <code>on [betonquest] event \"id\"</code> - this is the line you use in your scripts to trigger the code. <code>betonquest</code> part is optional, and <code>id</code> is just some string, which must be equal to the one you specified in BetonQuest event.</li> <li>BetonQuest event - <code>skript</code> - this event will trigger the above Skript event in your scripts. The instruction string accepts only one argument, id of the event. It have to be the same as the one defined in Skript event for it to be triggered.</li> </ol> <p>Example</p> <p>In your script <pre><code>on betonquest event \"concrete\":\n</code></pre></p> <p>In events.yml <pre><code>fire_concrete_script: skript concrete\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#skript-condition","title":"Skript condition","text":"<p>You can check BetonQuest conditions in your scripts by using the syntax <code>player meets [betonquest] condition \"id\"</code>. <code>betonquest</code> is optional, and <code>id</code> is the name of the condition, as defined in conditions.yml.</p> <p>Example</p> <p>In your script <pre><code>player meets condition \"has_ore\"\n</code></pre></p> <p>In conditions.yml <pre><code>has_ore: item iron_ore:5\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#skript-event","title":"Skript event","text":"<p>You can also fire BetonQuest events with scripts. The syntax for Skript effect is <code>fire [betonquest] event \"id\" for player</code>. Everything else works just like in condition above.</p> <p>Example</p> <p>In your script <pre><code>fire event \"give_emeralds\" for player\n</code></pre></p> <p>In events.yml <pre><code>give_emeralds: give emerald:5\n</code></pre></p>"},{"location":"User-Documentation/Compatibility/#vault","title":"Vault","text":"<p>By installing Vault you enable Permission event and Money condition/event.</p>"},{"location":"User-Documentation/Compatibility/#conditions_11","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#vault-money-condition-money","title":"Vault Money Condition: <code>money</code>","text":"<p>Checks if the player has specified amount of money. You can specify only one argument, amount integer. It cannot be negative!</p> <p>Example</p> <pre><code>money 500\n</code></pre>"},{"location":"User-Documentation/Compatibility/#events_11","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#vault-money-event-money","title":"Vault Money Event: <code>money</code>","text":"<p>Deposits, withdraws or multiplies money on player's account. There is only one argument, amount of money to modify. It can be positive, negative or start with an asterisk for multiplication.</p> <p>Example</p> <pre><code>money -100\n</code></pre>"},{"location":"User-Documentation/Compatibility/#permission-permission","title":"Permission: <code>permission</code>","text":"<p>Adds or removes a permission or a group. First argument is <code>add</code> or <code>remove</code>. It's self-explanatory. Second is <code>perm</code> or <code>group</code>. It also shouldn't be hard to figure out. Next thing is actual string you want to add/remove. At the end you can also specify world in which you want these permissions. If the world name is ommited then permission/group will be global.</p> <p>Example</p> <pre><code>permission remove group bandit world_nether\n</code></pre>"},{"location":"User-Documentation/Compatibility/#variables","title":"Variables","text":""},{"location":"User-Documentation/Compatibility/#vault-money-variable-money","title":"Vault Money Variable: <code>money</code>","text":"<p>There is only one argument in this variable, <code>amount</code> for showing money amount or <code>left:</code> followed by a number for showing the difference between it and amount of money.</p> <p>Example</p> <pre><code>%money.left:500%\n</code></pre>"},{"location":"User-Documentation/Compatibility/#worldedit-or-fastasyncworldedit","title":"WorldEdit or FastAsyncWorldEdit","text":""},{"location":"User-Documentation/Compatibility/#events_12","title":"Events","text":""},{"location":"User-Documentation/Compatibility/#paste-schematic-paste","title":"Paste schematic: <code>paste</code>","text":"<p>This event will paste a schematic at the given location. The first argument is a location and the second one is the name of schematic file. The file must be located in <code>WorldEdit/schematics</code> or <code>FastAsyncWorldEdit/schematics</code> and have a name like <code>some_building.schematic</code>. An optional <code>noair</code> can be added to paste ignoring air blocks. If you have only a <code>.schem</code> schematic, simply append <code>.schem</code> to the schematic name.</p> <p>Example</p> <pre><code>paste 100;200;300;world some_building noair\n</code></pre>"},{"location":"User-Documentation/Compatibility/#worldguard","title":"WorldGuard","text":""},{"location":"User-Documentation/Compatibility/#conditions_12","title":"Conditions","text":""},{"location":"User-Documentation/Compatibility/#inside-region-region","title":"Inside Region: <code>region</code>","text":"<p>This condition is met when the player is inside the specified region. The only argument is the name of the region.</p> <p>Example</p> <pre><code>region beton\n</code></pre>"},{"location":"User-Documentation/Compatibility/#objectives_4","title":"Objectives","text":""},{"location":"User-Documentation/Compatibility/#enter-region-region","title":"Enter Region: <code>region</code>","text":"<p>To complete this objective you need to enter WorldGuard region with specified name. A required argument is the name of the region and you may also pass an optional <code>entry</code> and/or <code>exit</code> to only trigger when entering or exiting a region instead of anytime inside a region.</p> <p>Example</p> <pre><code>region beton events:kill\n</code></pre>"},{"location":"User-Documentation/Conditions-List/","title":"Conditions List","text":""},{"location":"User-Documentation/Conditions-List/#advancement-advancement","title":"Advancement: <code>advancement</code>","text":"<p>This condition checks if the player has specified advancement. The only argument is the full name of the advancement. This includes the namespace, the tab and the name of the advancement as configured on your server.  List of all vanilla advancements.</p> <p>Example</p> <pre><code>advancement minecraft:adventure/kill_a_mob\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#conjunction-and","title":"Conjunction: <code>and</code>","text":"<p>Conjunction of specified conditions. This means that every condition has to be met in order for conjunction to be true. Used only in complex alternatives, because conditions generally work as conjunction. Instruction string is exactly the same as in <code>alternative</code>.</p> <p>Example</p> <pre><code>and has_helmet,has_chestplate,has_leggings,has_boots\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#armor-armor","title":"Armor: <code>armor</code>","text":"<p>The armor condition requires the player to wear an armor that has been specified in the items.yml file.</p> <p>Example</p> <pre><code>armor helmet_of_concrete\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#biome-biome","title":"Biome: <code>biome</code>","text":"<p>This condition will check if the player is in specified biome. The only argument is the biome type.</p> <p>Example</p> <pre><code>biome savanna_rock\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#check-conditions-check","title":"Check conditions: <code>check</code>","text":"<p>This condition allow for specifying multiple instruction strings in one, longer string. Each instruction must be started with <code>^</code> character and no other dividers should be used. The condition will be met if all inner conditions are met. It's not the same as <code>and</code> condition, because you can specify an instruction string, not a condition name.</p> <p>Example</p> <pre><code>check ^tag beton ^item emerald:5 ^location 100;200;300;survival_nether;5 ^experience 20\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#chest-item-chestitem","title":"Chest Item: <code>chestitem</code>","text":"<p>persistent, static</p> <p>This condition works in the same way as <code>item</code> condition, but it checks the specified chest instead of a player. The first argument is a location of the chest and the second one is the list of items defined in the same way as in <code>item</code> condition. If there is no chest at specified location the condition won't be met.</p> <p>Example</p> <pre><code>chestitem 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#conversation-conversation","title":"Conversation: <code>conversation</code>","text":"<p>This condition will check if a conversation has an available starting option. If no starting option has a condition that returns true then this will return false.</p> <p>Example</p> <pre><code>conversation innkeeper\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#day-of-week-dayofweek","title":"Day of week: <code>dayofweek</code>","text":"<p>It must be a specific day of the week that this condition returns true. You can specify either the english name of the day or the number of the day (1 being monday, 7 sunday,..).</p> <p>Example</p> <pre><code>dayofweek sunday\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#potion-effect-effect","title":"Potion Effect: <code>effect</code>","text":"<p>To meet this condition the player must have an active potion effect. There is only one argument and it takes values from this page: potion types.</p> <p>Example</p> <pre><code>effect SPEED\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#empty-inventory-slots-empty","title":"Empty inventory slots: <code>empty</code>","text":"<p>To meet this condition the players inventory must have the specified amount of empty slots or more. If you want to check for a specific amount (for example for a full inventory with 0 empty slots) you can append the <code>equal</code> argument.</p> <p>Example</p> <pre><code>empty 5\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#entities-in-area-entities","title":"Entities in area: <code>entities</code>","text":"<p>persistent, static</p> <p>This condition will return true only if there is a specified amount (or more) of specified entities in the specified area.  There are three required arguments - entity type, location and range. Entities are defined as a list separated by commas. Each entity type (taken from here) can have an additional amount suffix, for example <code>ZOMBIE:5,SKELETON:2</code> means 5 or more zombies and 2 or more skeletons. The location is defined as usual. The number after the location is the range around the location in which will be checked for these entities. You can also specify additional <code>name:</code> argument, with the name of the required entity. Replace all spaces with <code>_</code> here. You can use <code>marked:</code> argument to check only for entities marked in <code>spawn</code> event.</p> <p>Example</p> <pre><code>entities ZOMBIE:2 100;200;300;world 10 name:Deamon\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#experience-experience","title":"Experience: <code>experience</code>","text":"<p>This condition is met when the player has the specified amount of experience points. You can check for whole levels by adding the <code>level</code> argument.</p> <p>Example</p> <pre><code>experience 30 level\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#facing-direction-facing","title":"Facing direction: <code>facing</code>","text":"<p>Checks if the player is looking in the given direction. Valid directions are <code>UP</code>, <code>DOWN</code>, <code>NORTH</code>, <code>EAST</code>, <code>WEST</code> and <code>SOUTH</code>. Up and down start at a pitch of 60\u00b0.</p> <p>Example</p> <pre><code>facing EAST\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#fly-fly","title":"Fly: <code>fly</code>","text":"<p>This will check if the player is currently flying (Elytra type of flight).</p> <p>Example</p> <pre><code>fly\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#game-mode-gamemode","title":"Game mode: <code>gamemode</code>","text":"<p>This condition checks if the player is in a specified game mode. The first argument is the game mode, i.e. survival, creative, adventure.</p> <p>Example</p> <pre><code>gamemode survival\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#global-point-globalpoint","title":"Global point: <code>globalpoint</code>","text":"<p>persistent, static</p> <p>The same as point condition but it checks the amount for a global point category which has the same value for all players.</p> <p>Example</p> <pre><code>globalpoint global_knownusers 100\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#global-tag-globaltag","title":"Global tag: <code>globaltag</code>","text":"<p>persistent, static</p> <p>This requires a specific global tag to be set and works the same as normal tag condition.</p> <p>Example</p> <pre><code>globaltag global_areNPCsAgressive\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#item-in-hand-hand","title":"Item in Hand: <code>hand</code>","text":"<p>This condition is met only when the player holds the specified quest item in their hand. The offhand will be checked instead of the main hand if the <code>offhand</code> keyword is added. Amount cannot be set here, though it may be checked with the <code>item</code> condition.</p> <p>Example</p> <pre><code>hand SpecialSword\nhand QuestShield offhand\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#health-health","title":"Health: <code>health</code>","text":"<p>Requires the player to have equal or more health than specified amount. The only argument is a number (double). Players can have 0 to 20 health by default (there are some plugins and commands which change the maximum) (0 means dead, don't use that since it will only be met when the player sees the red respawn screen).</p> <p>Example</p> <pre><code>health 5.6\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#height-height","title":"Height: <code>height</code>","text":"<p>This condition requires the player to be below specific Y height. The required argument is a number or a location (for example 100;200;300;world). In case of location it will take the height from it and use it as regular height.</p> <p>Example</p> <pre><code>height 16\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#item-in-inventory-item","title":"Item in Inventory: <code>item</code>","text":"<p>This condition requires the player to have all specified items in his inventory or backpack. You specify items in a list separated by commas (without spaces between!) Each item consists of its name and amount, separated by a colon. Amount is optional, so if you specify just item's name the plugin will assume there should be only one item.</p> <p>Example</p> <pre><code>item emerald:5,gold:10\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#journal-entry-journal","title":"Journal entry: <code>journal</code>","text":"<p>This condition will return true if the player has specified entry in his journal (internal name of the entry, like in journal.yml). The only argument is name of the entry.</p> <p>Example</p> <pre><code>journal wood_started\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#location-location","title":"Location: <code>location</code>","text":"<p>It returns true only when the player is closer to specified location than the specified distance. Just two mandatory attributes - location and radius around it (can be a variable).</p> <p>Example</p> <pre><code>location 100;200;300;survival_nether 5\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#looking-at-a-block-looking","title":"Looking at a block: <code>looking</code>","text":"<p>Checks if the player is looking at a block with the given location or material. You must specify either <code>loc:</code> optional (the location of the block) or <code>type:</code> optional as a <code>block selector</code>. You can also specify both.</p> <p>Example</p> <pre><code>looking loc:12.0;14.0;-15.0;world type:STONE\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#moon-cycle-mooncycle","title":"Moon Cycle: <code>mooncycle</code>","text":"<p>This condition checks the players moon cycle (1 is full moon, 8 is Waxing Gibbous) and returns if the player is under that moon. A list of phases can be found here.</p> <p>Example</p> <pre><code>mooncycle 1\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#objective-objective","title":"Objective: <code>objective</code>","text":"<p>This conditions is very simple: it's true only when the player has an active objective. The only argument is the name of the objective, as defined in objectives.yml.</p> <p>Example</p> <pre><code>objective wood\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#alternative-or","title":"Alternative: <code>or</code>","text":"<p>Alternative of specified conditions. This means that only one of conditions has to be met in order for alternative to be true. You just define one mandatory argument, condition names separated by commas. <code>!</code> prefix works as always.</p> <p>Example</p> <pre><code>or night,rain,!has_armor\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#partial-date-partialdate","title":"Partial date: <code>partialdate</code>","text":"<p>The current date must match the given pattern. You can specify the day of the month, the month or the year it must be that this condition returns true or combine them. You can also specify multiple days/months/years by just separating them by <code>,</code> or a interval by using <code>-</code>. If you have trouble understanding how this works have a look at the example.</p> <p>The example is true between the 1<sup>st</sup> and the 5<sup>th</sup> or on the 20<sup>th</sup> of each month, but only in the year 2017.</p> <p>Example</p> <pre><code>partialdate day:1-5,20 year:2017\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#party-party","title":"Party: <code>party</code>","text":"<p>To see details about parties read \"Party\" chapter in Reference section. This condition takes three optional arguments: <code>every:</code>, <code>any:</code> and <code>count:</code>. \"Every\" is a list of conditions that must be met by every player in the party. Any is a list of conditions that must be met by at least one player in a party (it doesn't have to be the same player, one can meet first condition, another one can meet the rest and it will work). Count is just a number, minimal amount of players in the party. You don't have to specify all those arguments, you can use only one if you want.</p> <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 every:some_item any:some_location,some_other_item count:5\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#permission-permission","title":"Permission: <code>permission</code>","text":"<p>The player must have a specified permission for this condition to be met. The instruction string must contain permission node as the required argument.</p> <p>Example</p> <pre><code>permission essentials.tpa\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#point-point","title":"Point: <code>point</code>","text":"<p>Requires the player to have amount of points equal to the specified category or more. There are two required arguments, first is the category (string), second is the amount (integer). You can also add optional argument <code>equal</code> to accept only players with exactly equal amount of points.</p> <p>Example</p> <pre><code>point beton 20\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#riding-riding","title":"Riding: <code>riding</code>","text":"<p>This condition checks if the player rides the specified entity. <code>any</code> is also a valid input and matches any entity.</p> <pre><code>riding horse\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#random-random","title":"Random: <code>random</code>","text":"<p>persistent, static</p> <p>This condition is met randomly. There is one argument: two positive numbers like <code>5-12</code>. They mean something like that: \"It will be true 5 times out of 12\".</p> <p>Example</p> <pre><code>random 12-100\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#armor-rating-rating","title":"Armor Rating: <code>rating</code>","text":"<p>This one requires the player to wear armor which gives him specified amount of protection (armor icons). The first and only argument should be an integer. One armor point is equal to half armor icon in-game (10 means half of the bar filled).</p> <p>Example</p> <pre><code>rating 10\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#real-time-realtime","title":"Real time: <code>realtime</code>","text":"<p>There must a specific (real) time for this condition to return true. You need to specify two times (formatted like <code>hh:mm</code>) separated by dash. If the first is before the second the time must be between these two, if its after the second the time must be later than the first and earlier than the second to return true.</p> <p>Example</p> <pre><code>realtime 8:00-12:30\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#scoreboard-score","title":"Scoreboard: <code>score</code>","text":"<p>With this condition you can check if the score in a specified objective on a scoreboard is greater or equal to specified amount. The first argument is the name of the objective, second one is amount (an integer).</p> <p>Example</p> <pre><code>score kills 20\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#sneaking-sneak","title":"Sneaking: <code>sneak</code>","text":"<p>Sneak condition is only true when the player is sneaking. This would probably be useful for creating traps, I'm not sure. There are no arguments for this one.</p> <p>Example</p> <pre><code>sneak\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#tag-tag","title":"Tag: <code>tag</code>","text":"<p>This one requires the player to have a specified tag. Together with <code>!</code> negation it is one of the most powerful tools when creating conversations. The instruction string must contain tag name.</p> <p>Example</p> <pre><code>tag quest_completed\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#test-for-block-testforblock","title":"Test for block: <code>testforblock</code>","text":"<p>persistent, static</p> <p>This condition is met if the block at specified location matches the given material. First argument is a location, and the second one is a <code>block selector</code>.</p> <p>Example</p> <pre><code>testforblock 100;200;300;world STONE\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#time-time","title":"Time: <code>time</code>","text":"<p>There must be specific (Minecraft) time on the player's world for this condition to return true. You need to specify two hour numbers separated by dash. These number are normal 24-hour format hours. The first must be smaller than the second. If you want to achieve time period between 23 and 2 you need to negate the condition.</p> <p>Example</p> <pre><code>time 2-23\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>This condition checks if a variable value matches given pattern. The first argument is a variable (with <code>%</code> characters). Second one is the pattern (for example, if you want to check if it's \"word\", the patter would simply be <code>word</code>, but if you want to check if it's a number (positive or negative) you would use <code>-?\\d+</code> pattern - <code>-?</code> means a dash or no dash, <code>\\d</code> means any digit and <code>+</code> allows that digit to be repeated one or more times).</p> <p>Example</p> <pre><code>variable %objective.var.price% -?\\d+\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#weather-weather","title":"Weather: <code>weather</code>","text":"<p>There must be a specific weather for this condition to return true. There are three possible options: sun, rain and storm. Note that <code>/toggledownfall</code> does not change the weather, it just does what the name suggests: toggles downfall. The rain toggled off will still be considered as rain! Use <code>/weather clear</code> instead.</p> <p>Example</p> <pre><code>weather sun\n</code></pre>"},{"location":"User-Documentation/Conditions-List/#world-world","title":"World: <code>world</code>","text":"<p>This conditions checks if the player is in a specified world. The first argument is the name of a world.</p> <p>Example</p> <pre><code>world world\n</code></pre>"},{"location":"User-Documentation/Configuration/","title":"Configuration","text":"<p>The configuration of BetonQuest is mainly done in the <code>config.yml</code> file. All of its options are described on this page. There is also additional information about backups, updates and database transfers. If you fail to understand options just keep their default values. You can always change them when you have gained a more complete understanding of this plugin. </p>"},{"location":"User-Documentation/Configuration/#config-options","title":"Config Options","text":"<p>Warning</p> <p>Do not touch <code>version:</code> option! It may corrupt your files!</p>"},{"location":"User-Documentation/Configuration/#mysql-database","title":"MySQL Database","text":""},{"location":"User-Documentation/Configuration/#setup","title":"Setup","text":"<p>In order to use a MySQL Database for saving all the data you need to fill out the mysql config section. <pre><code>mysql:\nenabled: true   #Set this to true.\nhost: ''        #This is the IP of your MySQL server. If it runs on the same machine as your server use localhost or 127.0.0.1 \nport: ''        #This is the port your MySQL server runs on.\nuser: ''        #The name of the database user that is used to connect to the database server.\npass: ''        #The password of that user.\nbase: ''        #The database that BetonQuest will write to. You need to create it in your database server.\nprefix: betonquest_  #The table prefix of BetonQuest's data in the database.\n</code></pre></p>"},{"location":"User-Documentation/Configuration/#migrating-a-database-from-sqlite-to-mysql-and-back","title":"Migrating a database from SQLite to MySQL and back","text":"<p>Follow these few simple steps to migrate your database easily:</p> <ol> <li>Create a backup with /q backup command.</li> <li>Extract database backup from it.</li> <li>Turn the server off.</li> <li>Place the database-backup.yml file inside the plugin's directory.</li> <li>Edit which database type you want to use by setting the <code>enabled</code> option in the <code>mysql</code> section to true or false.</li> <li>Start the server.</li> <li>Check for errors.</li> <li>If there are no errors, enjoy your migrated database.</li> <li>If there are any errors, post them to the developer or try to fix them if you know how.</li> </ol>"},{"location":"User-Documentation/Configuration/#default-language","title":"Default Language","text":"<p><code>language:</code> is the default translation of the plugin for every new player. Currently, there are 9 languages available:  English (en), Polish (pl), German (de), French (fr), Spanish (es), Chinese (cn), Dutch (nl), Italian (it) and Hungarian (hu).</p>"},{"location":"User-Documentation/Configuration/#updating","title":"Updating","text":"<p>The <code>update</code> section controls the Auto-Updater. It has the following settings:</p> <ul> <li><code>enabled</code> (default <code>true</code>). Enables or disables the Updater. If set to false, it is not possible to update with the updater and no version checks are executed.</li> <li><code>strategy</code> (default <code>MINOR</code>). The update strategy is the most important feature of the Auto-Updater. An explanation is available here.</li> <li><code>automatic</code> (default <code>true</code>). If true the updater will download new Versions automatically. Otherwise, the updater     will only download new versions when the update command is executed.</li> </ul>"},{"location":"User-Documentation/Configuration/#journal-slots","title":"Journal slots","text":"<p><code>default_journal_slot</code> is the inventory slot in which the journal will appear after using the <code>/journal</code> command. BetonQuest will try to move items out of the way if the slot is occupied. If the inventory is full the journal will not be added. You can disable this behaviour by setting the option to <code>-1</code>. BetonQuest will then just use any free slot.</p>"},{"location":"User-Documentation/Configuration/#citizens-identifier","title":"Citizens identifier","text":"<p><code>citizens_npcs_by_name</code> sets whether NPCs from Citizens 2 should be identified in main.yml by their name instead of their id. This is a dangerous setting as two different NPC's at the opposite edges of your world that share the same name by accident will trigger the same quest.</p>"},{"location":"User-Documentation/Configuration/#citizens-left-click","title":"Citizens left click","text":"<p><code>acceptNPCLeftClick</code> activates that a conversation with an NPC can also be started by left clicking the NPC and not only by right clicking the NPC.</p>"},{"location":"User-Documentation/Configuration/#citizens-interact-limit","title":"Citizens interact limit","text":"<p><code>npcInteractionLimit</code> prevents NPC / BetonQuest conversation click spamming. The time's unit is milliseconds. Default value: <code>500</code></p>"},{"location":"User-Documentation/Configuration/#conversation-end-distance","title":"Conversation End Distance","text":"<p><code>max_npc_distance</code> is the distance you need to walk away from the NPC for the conversation to end (in the case of using chat-based conversation interface).</p>"},{"location":"User-Documentation/Configuration/#default-conversation-style","title":"Default conversation style","text":"<p><code>default_conversation_IO</code> is a comma-separated list of conversation interfaces with the first valid one used. Read this page for more information about conversation interfaces.</p>"},{"location":"User-Documentation/Configuration/#default-chat-interceptor","title":"Default Chat interceptor","text":"<p><code>default_interceptor</code> is a comma-separated list of chat interceptors with the first valid one used. Read this page for more information about chat interceptors.</p>"},{"location":"User-Documentation/Configuration/#conversation-chat-display-options","title":"Conversation Chat Display options","text":"<p><code>display_chat_after_conversation</code> this will prevent all chat messages from displaying during a conversation and it will show them once it's finished.</p>"},{"location":"User-Documentation/Configuration/#combat-delay","title":"Combat Delay","text":"<p><code>combat_delay</code> is a delay (in seconds) the player must wait before starting a conversation after combat.</p>"},{"location":"User-Documentation/Configuration/#conversation-pullback-message","title":"Conversation pullback message","text":"<p><code>notify_pullback</code> will display a message every time the player is pulled back by the <code>stop</code> option in conversations (in the case of chat-based conversations). It notifies players that they are in a conversation, and the pullback is not a bug.</p>"},{"location":"User-Documentation/Configuration/#default-package-name","title":"Default Package name","text":"<p><code>default_package</code> is a name of the package that should be used when a package is not specified in /q command. This is for your convenience.</p>"},{"location":"User-Documentation/Configuration/#adjusting-the-backpack-to-the-keepinventory-gamerule","title":"Adjusting the backpack to the KeepInventory gamerule","text":"<p><code>remove_items_after_respawn</code> option should be turned on if \"keepInventory\" gamerule is not being used.  It prevents other plugins from duplicating quest items after death.</p> <p>When a player dies, their quest items are removed from drops and stored in the backpack, but some plugins may try to restore all items to the player (for example WorldGuard custom flag keep-inventory). That is why BetonQuest removes the quest items that are in a player's inventory after they respawn again, to be sure they were not readded.  The \"keepInventory\" gamerule, however, works differently - the items are never dropped, so they cannot be added to backpack.  Removing them from the inventory would destroy them forever. Sadly, Bukkit does not allow for gamerule checking, so it is up to you to decide.</p> <p>Once again, if you have \"keepInventory\" gamerule true, this setting has to be false and vice versa.</p>"},{"location":"User-Documentation/Configuration/#quest-items-break-behaviour","title":"Quest Items break behaviour","text":"<p><code>quest_items_unbreakable</code> controls whether quest items can be broken by using them. This was used in the past when the <code>unbreakable</code> tag couldn't be added to items. Turn it off and make your quest items unbreakable by vanilla means.</p>"},{"location":"User-Documentation/Configuration/#player-hider-interval","title":"Player Hider interval","text":"<p><code>player_hider_check_interval</code> the interval in which the PlayerHider checks the conditions and updates the player's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value. </p>"},{"location":"User-Documentation/Configuration/#npc-hider-interval","title":"NPC Hider interval","text":"<p><code>npc_hider_check_interval</code> is the interval in which the NPCHider checks the conditions and updates the NPC's visibility. Cannot be disabled currently. If you want this to be semi-disabled set a very high value.</p>"},{"location":"User-Documentation/Configuration/#sounds","title":"Sounds","text":"<p>This section defines what sounds will be played on these occasions:</p> <ul> <li><code>start</code> and <code>end</code> refer to start and end points of conversations.</li> <li><code>journal</code> is played upon updating the journal.</li> <li><code>update</code> is played when there is a changelog file, used to draw your attention.</li> <li><code>full</code> is played when the player executes <code>/journal</code> but his inventory is full.</li> </ul> <p>A list of all possible sounds for the latest Minecraft version can be found here.</p>"},{"location":"User-Documentation/Configuration/#conversation-command-banlist","title":"Conversation Command Banlist","text":"<p><code>cmd_blacklist</code> is a list of commands that cannot be used during a conversation. Remember that you can only type single words (command names) here!</p>"},{"location":"User-Documentation/Configuration/#compatibility-hooks","title":"Compatibility Hooks","text":"<p><code>hook</code> controls compatibility with other plugins. You can turn off each hook here.</p>"},{"location":"User-Documentation/Configuration/#journal","title":"Journal","text":"<p><code>journal</code> controls various settings of the journal:</p> <ul> <li><code>chars_per_page</code> is the number of characters before a page break. If it is set too high, the text on a journal page can overflow and become invisible.    This was replaced by <code>chars_per_line</code> and <code>lines_per_page</code> and is only required if you don't like the new behaviour.</li> <li><code>chars_per_line</code> is the number of characters before a line break.    If it is set too high, the text on a journal page can overflow and become invisible.    If this is not set, BQ will fall back on the old page wrapping behaviour configured through <code>chars_per_page</code>.</li> <li><code>lines_per_page</code> is the number of lines before a new page. If it is set too high, the text on a journal page can overflow and become invisible.     This is only required if <code>chars_per_line</code> is set.</li> <li><code>one_entry_per_page</code> makes each entry take a single page. Note that it will not expand to other pages even if it overflows, so keep your entries short.</li> <li><code>reversed_order</code> controls the chronological order of entries in the journal. By default, the entries are ordered from newest to oldest.    It is reversible, but this will force players to click through many pages to get to the most recent entry.</li> <li><code>hide_date</code> hides the date of each entry. Set it to true if you don't want this functionality.</li> <li><code>full_main_page</code> makes the main page always take a full page. If a lot of information is being displayed, it is advised to make this true.    If you use the main page only for small notifications, set it to false, so the entries can follow immediately.</li> <li><code>show_separator</code> shows a separator between journal entries (default: true). Customize the separator in <code>messages.yml</code> with the key <code>journal_separator</code>.</li> </ul>"},{"location":"User-Documentation/Configuration/#journal-colors","title":"Journal Colors","text":"<p><code>journal_colors</code> controls the colors used in the journal. It takes color codes without the <code>&amp;</code> character.</p> <ul> <li><code>date.day</code> is the day number</li> <li><code>date.hour</code> is the hour number</li> <li><code>line</code> is the delimiter between entries</li> <li><code>text</code> is the text of the entry</li> </ul>"},{"location":"User-Documentation/Configuration/#conversation-colors","title":"Conversation Colors","text":"<p><code>conversation_colors</code> controls the colors of the conversation. It takes color names.  If you want to add a font style (bold, italic etc.) do so after placing a comma.</p> <ul> <li><code>npc</code> is the name of the NPC</li> <li><code>player</code> is the name of the player</li> <li><code>text</code> is the NPC's text</li> <li><code>answer</code> is the text of player's answer (after choosing it)</li> <li><code>number</code> is the option number</li> <li><code>option</code> is the text of an option</li> </ul>"},{"location":"User-Documentation/Configuration/#conversation-settings-chestio","title":"Conversation Settings: ChestIO","text":"<ul> <li><code>conversation_IO_config</code> manages settings for individual conoversation IO's:<ul> <li><code>chest</code> manages settings for the chest conversation IO<ul> <li><code>show_number</code> will show the player number option if true (default: true)</li> <li><code>show_npc_text</code> will show the npc text in every player option if true (default: true)</li> </ul> </li> </ul> </li> </ul>"},{"location":"User-Documentation/Configuration/#misc-settings","title":"Misc settings","text":"<ul> <li><code>date_format</code> is the Java date format used in journal dates.    It needs to have a space between the day and hour.</li> <li><code>debug</code> is responsible for logging the plugin's activity to debug.log file in logs directory. Turning this on can slow your server down.    However, if you experience any errors, turn this on and let the plugin gather the data and send logs to the developer.    Note that the first run of the plugin will be logged anyway, just as a precaution.</li> </ul>"},{"location":"User-Documentation/Conversations/","title":"\ud83d\udcac \u200aConversations","text":""},{"location":"User-Documentation/Conversations/#general-information","title":"General Information","text":"<p>Each conversation must define name of the NPC  (some conversations can be not bound to any NPC, so it\u2019s important to specify it even though an NPC will have a name) and his initial options. <pre><code>quester: Name\nfirst: option1, option2\nstop: 'true'\nfinal_events: event1, event2\ninterceptor: simple\nNPC_options:\noption1:\ntext: Some text in default language\nevents: event3, event4\nconditions: condition1, !condition2\npointers: reply1, reply2\noption2:\ntext: '&amp;3This ends the conversation'\nplayer_options:\nreply1:\ntext:\nen: Text in English\npl: Tekst po polsku\nevent: event5\ncondition: '!condition3'\npointer: option2\nreply2:\ntext: 'Text containing '' character'\n</code></pre></p> <p>Note</p> <p>Configuration files use YAML syntax. Google it if you don't know anything about it. Main rule is that you must use two spaces instead of tabs when going deeper into the hierarchy tree. If you want to write <code>'</code> character, you must double it and surround the whole text with another <code>'</code> characters. When writing <code>true</code> or <code>false</code> it also needs to be surrounded with <code>'</code>. If you want to start the line with <code>&amp;</code> character, the whole line needs to be surrounded with <code>'</code>. You can check if the file is correct using this tool.</p> <ul> <li><code>quester</code> is name of NPC. It should be the same as name of NPC this conversation is assigned to for greater immersion, but it's your call.</li> <li><code>first</code> are pointers to options the NPC will use at the beginning of the conversation. He will choose the first one that meets all conditions. You define these options in <code>npc_options</code> branch.</li> <li><code>final_events</code> are events that will fire on conversation end, no matter how it ends (so you can create e.g. guards attacking the player if he tries to run). You can leave this option out if you don't need any final events.</li> <li><code>stop</code> determines if player can move away from an NPC while in this conversation (false) or if he's stopped every time he tries to (true). If enabled, it will also suspend the conversation when the player quits, and resume it after he joins back in. This way he will have to finish his conversation no matter what. It needs to be in <code>''</code>! You can modify the distance at which the conversation is ended / player is moved back with <code>max_npc_distance</code> option in the config.yml.</li> <li><code>interceptor</code> optionally set a chat interceptor for this conversation. Multiple interceptors can be provided in a comma-separated list with the first valid one used.</li> <li><code>NPC_options</code> is a branch with texts said by the NPC.</li> <li><code>player_options</code> is a branch with options the player can choose.</li> <li><code>text</code> defines what will display on screen. If you don't want to set any events/conditions/pointers to the option, just skip them. Only <code>text</code> is always required.</li> <li><code>conditions</code> are names of conditions which must be met for this option to display, separated by commas.</li> <li><code>events</code> is a list of events that will fire when an option is chosen (either by NPC or a player), defined similarly to conditions.</li> <li><code>pointer</code> is list of pointers to the opposite branch (from NPC branch it will point to options player can choose from when answering, and from player branch it will point to different NPC reactions).</li> </ul> <p>When an NPC wants to say something he will check conditions for the first option (in this case <code>option1</code>). If they are met, he will choose it. Otherwise, he will skip to next option (note: conversation ends when there are no options left to choose). After choosing an option NPC will execute any events defined in it, say it, and then the player will see options defined in <code>player_options</code> branch to which <code>pointers</code> setting points, in this case <code>reply1</code> and <code>reply2</code>. If the conditions for the player option are not met, the option is simply not displayed, similar to texts from NPC. Player will choose option he wants, and it will point back to other NPC text, which points to next player options and so on.</p> <p>If there are no possible options for player or NPC (either from not meeting any conditions or being not defined) the conversations ends. If the conversation ends unexpectedly, check the console - it could be an error in the configuration.</p> <p>This can and will be a little confusing, so you should name your options, conditions and events in a way which you will understand in the future. Don't worry though, if you make some mistake in configuration, the plugin will tell you this in console when testing a conversation. Also, study the default conversation included with the plugin to fully understand how powerful this system can be.</p>"},{"location":"User-Documentation/Conversations/#cross-conversation-pointers","title":"Cross-conversation pointers","text":"<p>If you want to create a conversation with multiple NPCs at once or split a huge conversation into smaller, more focused files, you can point to NPC options in other conversations. Just type the pointer as <code>conversation.npc_option</code>.</p> <p>Keep in mind that you can only cross-point to NPC options. It means that you can use those pointers only in <code>first</code> starting options and in all player options. Using them in NPC options will throw errors.</p> <p>Warning</p> <p>This does not work across packages yet.</p>"},{"location":"User-Documentation/Conversations/#conversation-variables","title":"Conversation variables","text":"<p>You can use variables in the conversations. They will be resolved and displayed to the player when he starts a conversation. A variable generally looks like that: <code>%type.optional.arguments%</code>. Type is a mandatory argument, it defines what kind of variable it is. Optional arguments depend on the type of the variable, i.e. <code>%npc%</code> does not have any additional arguments, but <code>%player%</code> can also have <code>display</code> (it will look like that: <code>%player.display%</code>). You can find a list of all available variable types in the \"Variables List\" chapter.</p> <p>Note</p> <p>If you use a variable incorrectly (for example trying to get a property of an objective which isn't active for the player, or using %npc% in <code>message</code> event), the variable will be replaced with empty string (\"\").</p>"},{"location":"User-Documentation/Conversations/#translations","title":"Translations","text":"<p>As you can see in default conversation, there are additional messages in other languages. That's because you can translate your conversations into multiple languages. The players will be albe to choose their preferred one with /questlang command. You can translate every NPC/player option and quester's name. You do this like this:</p> <pre><code>quester:\nen: Innkeeper\npl: Karczmarz\nde: Gastwirt\n</code></pre> <p>As said before, the same rule applies to all options and quester's name. The player can choose only from languages present in messages.yml, and if there will be no translation to this language in the conversation, the plugin will fall back to the default language, as defined in config.yml. If that one is not defined, there will be an error.</p> <p>You can also translate journal entries, quest cancelers and <code>message</code> events, more about that later.</p>"},{"location":"User-Documentation/Conversations/#conversation-displaying","title":"Conversation displaying","text":"<p>BetonQuest provides different conversation styles, so called \"conversationIO's\". They all look different but the biggest difference is the way the user interacts with them.</p> menusimpletellrawslowtellrawchest <p>A modern conversation style that works with some of Minecraft's native controls. All options can be found in the compatibility section. This is a video of it in action:   Sorry, your browser doesn't support embedded videos. </p> <p>A chat output. The user has to write a number into their chat to select an option.</p> <p>Also a chat output. The user can click on the options instead of typing them.</p> <p>The same as <code>tellraw</code> but the NPC's text is printed line by line, delayed by 0.5 seconds.</p> <p>A chest GUI with clickable buttons where the NPC's text and options will be shown as item lore.</p> <p>You can change the option's item to something else than ender pearls by adding a prefix to that option's text. The prefix is a name of the material (like in items.yml) inside curly braces, with an optional damage value after a colon. Example of such option text: <code>{diamond_sword}I want to start a quest!</code>.</p> <p>You can control the colors of conversation elements in the config.yml file, in <code>conversation_colors</code> section. Here you must use names of the colors.</p> <p>BetonQuest uses the <code>menu</code> conversationIO by default. If ProtocolLib is not installed, the <code>chest</code> IO will be used. You can however change the utilized conversationIO by setting the <code>default_conversation_IO</code> option in the config.yml file.</p> <p>In case you want to use a different type of conversation display for just one specific conversation you can add a <code>conversationIO: &lt;type&gt;</code> setting to the conversation file at the top of the YAML hierarchy (which is the same level as <code>quester</code> or <code>first</code> options).</p>"},{"location":"User-Documentation/Conversations/#chat-interceptors","title":"Chat Interceptors","text":"<p>While engaged in a conversation, it can be distracting when messages from other players or system messages interfere with the dialogue. A chat interceptor provides a method of intercepting those messages and then sending them after the conversation has ended.</p> <p>You can specify the default chat interceptor by setting <code>default_interceptor</code> inside the <code>config.yml</code>. Additionally, you can overwrite the default for each conversation by setting the <code>interceptor</code> key inside your conversation file.</p> <p>The default configuration of BetonQuest sets the <code>default_interceptor</code> option to <code>packet,simple</code>. This means that it first tries to use the <code>packet</code> interceptor. If that fails it falls back to using the <code>simple</code> interceptor.</p> <p>BetonQuest adds following interceptors: <code>simple</code>, <code>packet</code> and <code>none</code>:</p> <p>The <code>simple</code> interceptor works with every Spigot server but only supports very basic functionality and may not work with plugins like Herochat.</p> <p>The <code>packet</code> interceptor requires the ProtocolLib plugin to be installed. It will work well in any kind of situation.</p> <p>The <code>none</code> interceptor is an interceptor that won't intercept messages. That sounds useless until you have a conversation that you want to be excluded from interception. In this case you can just set <code>interceptor: none</code> inside your conversation file.</p>"},{"location":"User-Documentation/Conversations/#advanced-extends","title":"Advanced: Extends","text":"<p>Conversation also supports the concept of inheritance. Any option can include the key <code>extends</code> with a comma delimited list of other options of the same time. The first option that does not have any false conditions will have it's text, pointers and events merged with the extending option. The extended option may itself extend other options. Infinite loops are detected.</p> <p><pre><code>NPC_options:\n\n## Normal Conversation Start\nstart:\ntext: 'What can I do for you'\nextends: tonight, today\n\n## Useless addition as example\ntonight:\n# Always false\ncondition: random 0-1\ntext: ' tonight?'\nextends: main_menu\n\ntoday:\ntext: ' today?'\nextends: main_menu\n\n## Main main_menu\nmain_menu:\npointers: i_have_questions, bye\n</code></pre> In the above example, the option start is extended by both tonight and today, both of whom are extended by main_menu. As tonight has a false condition the today option will win. The start option will have the pointers in main_menu added to it just as if they were defined directly in it and the text will be joined together from today. If you structure your conversation correctly you can make use of this to minimize duplication.</p>"},{"location":"User-Documentation/Events-List/","title":"Events List","text":""},{"location":"User-Documentation/Events-List/#cancel-quest-cancel","title":"Cancel quest: <code>cancel</code>","text":"<p>This event works in the same way as a quest canceler in the backpack. Running it is equal to the player clicking on the bone. The only argument is a name of a quest canceler, as defined in main.yml</p> <p>Example</p> <pre><code>cancel wood\n</code></pre>"},{"location":"User-Documentation/Events-List/#chat-player-message-chat","title":"Chat player message <code>chat</code>","text":"<p>This event will send the given message as the player. Therefore, it will look like as if the player did send the message.  The instruction string is the command, without leading slash. You can only use <code>%player%</code> as a variable in this event. Additional messages can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>If a plugin does not work with the sudo / command event you need to use this event.</p> <p>Example</p> <pre><code>sendMSG: \"chat Hello!\"\nsendMultipleMSGs: \"chat Hi %player%|ban %player%|pardon %player%\"\nsendPluginCommand: \"chat /someCommand x y z\"\n</code></pre>"},{"location":"User-Documentation/Events-List/#chest-clear-chestclear","title":"Chest Clear: <code>chestclear</code>","text":"<p>persistent, static</p> <p>This event removes all items from a chest at specified location. The only argument is a location.</p> <p>Example</p> <pre><code>chestclear 100;200;300;world\n</code></pre>"},{"location":"User-Documentation/Events-List/#chest-give-chestgive","title":"Chest Give: <code>chestgive</code>","text":"<p>persistent, static</p> <p>This works the same as <code>give</code> event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in <code>give</code> event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location.</p> <p>Example</p> <pre><code>chestgive 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"User-Documentation/Events-List/#chest-take-chesttake","title":"Chest Take: <code>chesttake</code>","text":"<p>persistent, static</p> <p>This event works the same as <code>take</code> event, but it takes items from a chest at specified location. The instruction string is defined in the same way as in <code>chestgive</code> event.</p> <p>Example</p> <pre><code>chesttake 100;200;300;world emerald:5,sword\n</code></pre>"},{"location":"User-Documentation/Events-List/#clear-entities-clear","title":"Clear entities: <code>clear</code>","text":"<p>This event removes all specified mobs from the specified area. The first required argument is a list of mobs (taken from here) separated by commas. Next is location. After that there is the radius around the location (a positive number or a variable). You can also optionally specify <code>name:</code> argument, followed by name which removed mobs must have. You can use <code>marked:</code> argument to remove only mobs marked in <code>spawn</code> event.</p> <p>Example</p> <pre><code>clear ZOMBIE,CREEPER 100;200;300;world 10 name:Monster\n</code></pre>"},{"location":"User-Documentation/Events-List/#compass-compass","title":"Compass: <code>compass</code>","text":"<p>When you run this event, you can add or remove a compass destination for the player. You may also directly set the players's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is <code>add</code>,<code>del</code> or <code>set</code>, and second one is the name of the target, as defined in main.yml. Note that if you set a target the player will not automatically have it added to their choices.</p> <p>The destination must be defined in the main.yml file in <code>compass</code> section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items.yml) to be displayed in the backpack. Example of a compass target:</p> <pre><code>compass:\nbeton:\nname:\nen: Target\npl: Cel\nlocation: 100;200;300;world\nitem: scroll\n</code></pre> <p>Example</p> <pre><code>compass add beton\n</code></pre>"},{"location":"User-Documentation/Events-List/#command-command","title":"Command: <code>command</code>","text":"<p>persistent, static</p> <p>Runs specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than <code>%player%</code> won't resolve if the event is fired from delayed <code>folder</code> and the player is offline now. You can define additional commands by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the command use <code>\\|</code>.</p> <p>Example</p> <pre><code>command kill %player%|ban %player%\n</code></pre>"},{"location":"User-Documentation/Events-List/#conversation-conversation","title":"Conversation: <code>conversation</code>","text":"<p>Starts a conversation at location of the player. The only argument is ID of the conversation. This bypasses the conversation permission!</p> <p>Example</p> <pre><code>conversation village_smith\n</code></pre>"},{"location":"User-Documentation/Events-List/#damage-player-damage","title":"Damage player: <code>damage</code>","text":"<p>Damages the player by specified amount of damage. The only argument is a number (can have floating point).</p> <p>Example</p> <pre><code>damage 20\n</code></pre>"},{"location":"User-Documentation/Events-List/#delete-point-deletepoint","title":"Delete Point: <code>deletepoint</code>","text":"<p>persistent, static</p> <p>Delete the player points in a specified category.</p> <p>Example</p> <pre><code>deletepoint npc_attitude\n</code></pre>"},{"location":"User-Documentation/Events-List/#door-door","title":"Door: <code>door</code>","text":"<p>persistent, static</p> <p>This event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in <code>lever</code> event above.</p> <p>Example</p> <pre><code>door 100;200;300;world off\n</code></pre>"},{"location":"User-Documentation/Events-List/#remove-potion-effect-deleffect","title":"Remove Potion Effect: <code>deleffect</code>","text":"<p>Removes the specified potion effects from the player. Use <code>any</code> instead of a list of types to remove all potion effects from the player.</p> <p>Example</p> <pre><code>deleffect ABSORPTION,BLINDNESS\n</code></pre>"},{"location":"User-Documentation/Events-List/#potion-effect-effect","title":"Potion Effect: <code>effect</code>","text":"<p>Adds a specified potion effect to player. First argument is potion type. You can find all available types here. Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter <code>ambient</code> to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter <code>hidden</code>. To hide the icon for the effect add <code>noicon</code>.</p> <p>Example</p> <pre><code>effect BLINDNESS 30 1 ambient icon\n</code></pre>"},{"location":"User-Documentation/Events-List/#explosion-explosion","title":"Explosion: <code>explosion</code>","text":"<p>static</p> <p>Creates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast\u2019s fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4<sup>th</sup> attribute) there is location.</p> <p>Example</p> <pre><code>explosion 0 1 4 100;64;-100;survival\n</code></pre>"},{"location":"User-Documentation/Events-List/#folder-folder","title":"Folder: <code>folder</code>","text":"<p>persistent, static</p> <p>It's something like a container for multiple events. You can use it to clarify your code. It also features optional delay and period measured in seconds (you can use ticks or minutes if you add <code>ticks</code> or <code>minutes</code> argument). It is persistent for events marked as persistent, which means that the events will be fired even after the player logs out. Beware though, all conditions are false when the player is offline (even inverted ones), so those events should not be blocked by any conditions! The only required argument is a list of events separated by commas.</p> <p>There are also three optional arguments: <code>delay:</code>, <code>period:</code> and <code>random:</code>. Delay and Period is a number of seconds. Delay is the time before execution and period is the time between each event. It's optional and leaving it blank is the same as <code>delay:0</code> or <code>period:0</code>. Random is the amount of events, that will be randomly chosen to fire. It's optional and leaving it blank or omit it will fire all events.</p> <p>Example</p> <pre><code>folder event1,event2,event3 delay:5 period:5 random:1\n</code></pre>"},{"location":"User-Documentation/Events-List/#give-items-give","title":"Give Items: <code>give</code>","text":"<p>Gives the player predefined items. They are specified exactly as in <code>item</code> condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify <code>notify</code> keyword to display a simple message to the player about receiving items.</p> <p>Example</p> <pre><code>give emerald:5,emerald_block:9\n</code></pre>"},{"location":"User-Documentation/Events-List/#give-journal-givejournal","title":"Give journal: <code>givejournal</code>","text":"<p>This event simply gives the player his journal. It acts the same way as /j command would.</p> <p>Example</p> <pre><code>givejournal\n</code></pre>"},{"location":"User-Documentation/Events-List/#global-point-globalpoint","title":"Global point: <code>globalpoint</code>","text":"<p>persistent, static</p> <p>This works the same way as the normal point event but instead to manipulating the points for a category of a specific player it manipulates points in a global category. These global categories are player independent, so you could for example add a point to such a global category every time a player does a quest and give some special rewards for the 100<sup>th</sup> player who does the quest.</p> <p>Example</p> <pre><code>globalpoint global_knownusers 1\n</code></pre>"},{"location":"User-Documentation/Events-List/#global-tag-globaltag","title":"Global tag: <code>globaltag</code>","text":"<p>persistent, static</p> <p>Works the same way as a normal tag event, but instead of setting a tag for one player it sets it globaly for all players.</p> <p>Example</p> <pre><code>globaltag add global_areNPCsAgressive\n</code></pre>"},{"location":"User-Documentation/Events-List/#if-else-if","title":"If else: <code>if</code>","text":"<p>This event will check a condition, and based on the outcome it will run the first or second event. The instruction string is <code>if condition event1 else event2</code>, where <code>condition</code> is a condition ID and <code>event1</code> and <code>event2</code> are event IDs. <code>else</code> keyword is mandatory between events for no practical reason.</p> <p>Example</p> <pre><code>if sun rain else sun\n</code></pre>"},{"location":"User-Documentation/Events-List/#journal-journal","title":"Journal: <code>journal</code>","text":"<p>static</p> <p>Adds or deletes an entry to/from a player's journal. Journal entries have to be defined in <code>journal.yml</code>. The first argument is the action to perform, the second one is the name of the entry if required. Changing journal entries will also reload the journal.</p> <p>Possible actions are: - <code>add</code>: Adds a page to the journal. - <code>delete</code>: Deletes a page from the journal. - <code>update</code>: Refreshes the journal. This is especially useful when you need to update the main page.</p> <p>Example</p> <pre><code>journal add quest_started\njournal delete quest_available\njournal update\n</code></pre>"},{"location":"User-Documentation/Events-List/#kill-kill","title":"Kill: <code>kill</code>","text":"<p>Kills the player. Nothing else.</p>"},{"location":"User-Documentation/Events-List/#kill-mobs-killmob","title":"Kill Mobs: <code>killmob</code>","text":"<p>persistent, static</p> <p>Kills all mobs of given type at the location. First argument is the type of the mob. Next argument is the location. Third argument is the radius around the location, in which the mobs must be to get killed. You can also specify <code>name:</code> argument, followed by the name of the mob which should get killed. All <code>_</code> characters will be replaced with spaces. If you want to kill only mobs that have been marked using the spawn mob event use <code>marked:</code> argument followed by the keyword.</p> <p>Only mobs that are in loaded chunks can be killed by using this event.</p> <p>Example</p> <pre><code>killmob ZOMBIE 100;200;300;world 40 name:Bolec\n</code></pre>"},{"location":"User-Documentation/Events-List/#language-event-language","title":"Language Event: <code>language</code>","text":"<p>This event changes player's language to the specified one. There is only one argument, the language name.</p> <p>Example</p> <pre><code>language en\n</code></pre>"},{"location":"User-Documentation/Events-List/#lever-lever","title":"Lever: <code>lever</code>","text":"<p>persistent, static</p> <p>This event can switch a lever. The first argument is a location and the second one is state: <code>on</code>, <code>off</code> or <code>toggle</code>.</p> <p>Example</p> <pre><code>lever 100;200;300;world toggle\n</code></pre>"},{"location":"User-Documentation/Events-List/#lightning-lightning","title":"Lightning: <code>lightning</code>","text":"<p>static</p> <p>Strikes a lightning at given location. The only argument is the location.</p> <p>Example</p> <pre><code>lightning 100;64;-100;survival\n</code></pre>"},{"location":"User-Documentation/Events-List/#message-message","title":"Message: <code>message</code>","text":"<p>static</p> <p>This event is deprecated. Please use notify instead.</p> <p>This event simply displays a message to the player. The instruction string is the message. All <code>&amp;</code> color codes are respected. You can add additional translations by starting them with <code>{lang}</code> argument, just like in the example. The player will see his language or the default one if it's not defined. You can use conversation variables with this event. Just make sure not to use <code>%npc%</code>.</p> <p>Example</p> <pre><code>message {en} &amp;4You are banned, %player%! {pl} &amp;4Jestes zbanowany, %player%! {de}&amp;4Ich wei\u00df nicht.\n</code></pre>"},{"location":"User-Documentation/Events-List/#notification-notify","title":"Notification: <code>notify</code>","text":"<p>Displays a notification using the NotifyIO system.</p> <p>Warning</p> <p>All colons (<code>:</code>) in the message part of the notification need to be escaped, including those inside variables. One backslash (<code>\\</code>) is required when using no quoting at all (<code>...</code>) or single quotes (<code>'...'</code>). Two backslashes are required (<code>\\\\</code>) when using double quotes (<code>\"...\"</code>).</p> <p>Examples: <code>eventName: notify Peter:Heya %player%!</code> <code>eventName: notify Peter\\:Heya %player%!</code> <code>eventName: 'notify Peter:Heya %player%!'</code> <code>eventName: 'notify Peter\\:Heya %player%!'</code> <code>eventName: \"notify Peter:Heya %player%!\"</code> <code>eventName: \"notify Peter\\\\:Heya %player%!\"</code> <code>otherEvent: notify You own %math.calc:5% fish!</code> <code>otherEvent: You own %math.calc\\:5% fish!</code></p> Option Description message The message that will be displayed. Supports variables and translations. Required, must be first category Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. Optional io Any NotifyIO. Overrides the \"category\" settings. Optional NotifyIO Any setting from the defined notifyIO. Can be used multiple times. Overrides the \"category\" settings. Optional <p>The fallback NotifyIO is <code>chat</code> if no argument other than <code>message</code> is specified.   <code>message</code> is the only argument of this event that is not <code>key:value</code> based. You can freely add any text with spaces there.</p> <p>It also allows you to provide multiple translations using a special syntax:  <pre><code>example: \"notify {en} ABC {de} DEF\"\n</code></pre> The value in <code>{}</code> is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see <code>ABC</code> and german ones would see <code>DEF</code>.</p> Examples: <p>Check out the documentation about Notify Categories and  Notify IO options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend. <pre><code>#The simplest of all notify events. Just a chat message:\ncustomEvent: \"notify Hello %player%!\"  #It's the same as this one since 'chat' is the default IO.\ntheSame: \"notify Hello %player%! io:chat\"\n\n#This one displays a title and a subtile:\nmyTitle: \"notify This is a title.\\nThis is a subtitle. io:title\"\n\n#Plays a sound:\nmySound: \"notify io:sound sound:x.y.z\"\n\n#This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option:\nmyBar: \"notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use\"\n\n#Some events with categories.\nmyEvent1: \"notify This is a custom message! category:info\"\nmyEvent2: \"notify This is a custom message! category:firstChoice,secondChoice\"\n\n#You can also override category settings:\nmyEvent3: \"notify Another message! category:info io:advancement frame:challenge\"\n\n#Use multiple languages:\nmultilanguage: \"notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!\"\n</code></pre></p>"},{"location":"User-Documentation/Events-List/#broadcast-notifyall","title":"Broadcast: <code>notifyall</code>","text":"<p>This events works just like the notify event but shows the notification for all online players.</p>"},{"location":"User-Documentation/Events-List/#objective-objective","title":"Objective: <code>objective</code>","text":"<p>persistent, static</p> <p>Manages the objectives. Syntax is <code>objective &lt;action&gt; name</code>, where <code>&lt;action&gt;</code> can be start/add (one of the two), delete/remove or complete/finish. Name is the name of the objective, as defined in objectives.yml.</p> <p>Using this in static contexts only works when removing objectives!</p> <p>Example</p> <pre><code>objective start wood\n</code></pre>"},{"location":"User-Documentation/Events-List/#opsudo-opsudo","title":"OPsudo: <code>opsudo</code>","text":"<p>This event is similar to the <code>sudo</code> event, the only difference is that it will fire a command as the player with temporary OP permissions.  Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>Looking for run as normal player?</p> <p>Example</p> <pre><code>opsudo spawn\n</code></pre>"},{"location":"User-Documentation/Events-List/#party-event-party","title":"Party event: <code>party</code>","text":"<p>Runs the specified list of events (third argument) for every player in a party. More info about parties in \"Party\" chapter in Reference section.</p> <p>Example</p> <pre><code>party 10 has_tag1,!has_tag2 give_reward\n</code></pre>"},{"location":"User-Documentation/Events-List/#pick-random-pickrandom","title":"Pick random: <code>pickrandom</code>","text":"<p>persistent, static</p> <p>Another container for events. It picks one (or multiple) of the given events and runs it. You must specify how likely it is that each event is picked by adding the percentage before the event's id.  The event won't break if your total percentages are above 100%. </p> <p>It picks one event from the list by default, but you can add an optional <code>amount:</code> if you want more to be picked. Note that only as many events as specified can be picked and <code>amount:0</code> will do nothing.</p> <p>There must be two <code>%%</code> before the event's name if variables are used, one is from the variable and the other one from the event's syntax.</p> <p>Example</p> <pre><code>pickrandom 20.5%event1,0.5%event2,79%event3 amount:2\npickrandom %point.factionXP.amount%%event1,0.5%event2,79%event3,1%event4 amount:3\n</code></pre>"},{"location":"User-Documentation/Events-List/#play-sound-playsound","title":"Play sound: <code>playsound</code>","text":"<p>This event is deprecated. Please use notify instead.</p> <p>This event will play a specified sound for the player. The only required argument is the sound name in lower case letters (can take custom values if you're using a resource pack). There are also a few optional arguments.  <code>category:</code> is the sound category (if not specified it will use <code>MASTER</code>), <code>volume:</code> is a decimal responsible for the sound's volume, <code>pitch:</code> specifies the pitch and <code>location:</code> makes the sound play at specified location.</p> <p>Example</p> <pre><code>playsound: playsound minecraft:entity.ender_dragon.hurt category:MASTER volume:0.8 pitch:0.8 location:-60;69;-336;World`\n</code></pre>"},{"location":"User-Documentation/Events-List/#point-point","title":"Point: <code>point</code>","text":"<p>persistent</p> <p>Gives the player a specified amount of points in a specified category. Amount can be negative if you want to subtract points. You can also use an asterisk to do multiplication (or division, if you use a fraction). First argument after the event name must be a category, and the second one - amount of points to give/take/multiply. This event also supports an optional <code>notify</code> argument that will display information about the change using the notification system.</p> <p>Example</p> <pre><code>point npc_attitude 10\n</code></pre> <p>Example</p> <pre><code>point village_reputation *0.75\n</code></pre>"},{"location":"User-Documentation/Events-List/#run-events-run","title":"Run events: <code>run</code>","text":"<p>persistent, static</p> <p>This event allows you to specify multiple instructions in one, long instruction. Each instruction must be started  with the <code>^</code> character (it divides all the instructions). It's not the same as the <code>folder</code> event, because you have to specify the actual instruction, not an event name. It is also fired on the same tick, not on the next one like in <code>folder</code>. Don't use conditions here, it behaves strangely. We will fix this in 2.0.</p> <p>Example</p> <pre><code>run ^tag add beton ^give emerald:5 ^entry add beton ^kill\n</code></pre>"},{"location":"User-Documentation/Events-List/#scoreboard-score","title":"Scoreboard: <code>score</code>","text":"<p>This event works in the same way as <code>point</code> event, the only difference is that is uses scoreboards instead of points. You can add, subtract, multiply and divide scores in objectives on the scoreboard. The first argument is the name of the objective, second one is a number. It can be positive for additon, negative for subtraction or prefixed with an asterisk for multiplication. Multiplying by fractions is the same as dividing.</p> <p>Example</p> <pre><code>score kills 1\n</code></pre>"},{"location":"User-Documentation/Events-List/#set-block-setblock","title":"Set Block: <code>setblock</code>","text":"<p>persistent, static</p> <p>Changes the block at the given position. The first argument is a Block Selector, the second a location. Very powerful if used to trigger redstone contraptions.</p> <p>Example</p> <pre><code>setblock REDSTONE_BLOCK 100;200;300;world\n</code></pre>"},{"location":"User-Documentation/Events-List/#spawn-mob-spawn","title":"Spawn Mob: <code>spawn</code>","text":"<p>persistent, static</p> <p>Spawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob. The last, third argument is integer for amount of mobs to be spawned. You can also specify <code>name:</code> argument, followed by the name of the mob. All <code>_</code> characters will be replaced with spaces. You can also mark the spawned mob with a keyword using <code>marked:</code> argument. It won't show anywhere, and you can check for only marked mobs in <code>mobkill</code> objective.</p> <p>You can specify armor which the mob will wear and items it will hold with <code>h:</code> (helmet), <code>c:</code> (chestplate), <code>l:</code> (leggings), <code>b:</code> (boots), <code>m:</code> (main hand) and <code>o:</code> (off hand) optional arguments. These take a single item without amount, as defined in items.yml. You can also add a list of drops with <code>drops:</code> argument, followed by a list of items with amounts after colons, separated by commas.</p> <p>Example</p> <pre><code>spawn 100;200;300;world SKELETON 5 marked:targets\n</code></pre> <p>Example</p> <pre><code>spawn 100;200;300;world ZOMBIE name:Bolec 1 h:blue_hat c:red_vest drops:emerald:10,bread:2\n</code></pre>"},{"location":"User-Documentation/Events-List/#sudo-sudo","title":"Sudo: <code>sudo</code>","text":"<p>This event is similar to <code>command</code> event, the only difference is that it will fire a command as the player. Additional commands can be defined by separating them with <code>|</code> character. If you want to use a <code>|</code> character in the message use <code>\\|</code>.</p> <p>Looking for run as admin? </p> <p>Example</p> <pre><code>sudo spawn\n</code></pre>"},{"location":"User-Documentation/Events-List/#tag-tag","title":"Tag: <code>tag</code>","text":"<p>persistent, static</p> <p>This event adds (or removes) a tag to the player. The first argument after event's name must be <code>add</code> or <code>del</code>. Next goes the tag name. It can't contain spaces (though <code>_</code> is fine). Additional tags can be added, separated by commas (without spaces).</p> <p>Example</p> <pre><code>tag add quest_started,new_entry\n</code></pre>"},{"location":"User-Documentation/Events-List/#take-items-take","title":"Take Items: <code>take</code>","text":"<p>Removes items from the player\u2019s inventory, armor slots or backpack. The items itself must be defined in the items.yml, optionally with an amount after a colon. Which inventory types are checked is defined by the <code>invOrder:</code> option. You can use <code>Backpack</code>, <code>Inventory</code>, <code>Offhand</code> and <code>Armor</code> there. One after another will be checked if multiple types are defined.</p> <p>Note: If the items aren't quest items don't use <code>take</code>event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on the NPC\u2019s reaction!</p> <p>You can also specify <code>notify</code> keyword to display a simple message to the player about loosing items.</p> <p>Example</p> <pre><code>take emerald:120,sword\ntake nugget:6 notify\ntake wand notify invOrder:Backpack\ntake money:50 invOrder:Backpack,Inventory\ntake armor invOrder:Armor,Offhand,Inventory,Backpack\n</code></pre>"},{"location":"User-Documentation/Events-List/#time-time","title":"Time: <code>time</code>","text":"<p>Sets or adds time. The only argument is time to be set (integer) or time to be added (integer prefixed with +), in 24 hours format. Subtracting time is done by adding more time (if you think of this, it actually makes sense). Minutes can be achieved with floating point.</p> <p>Example</p> <pre><code>time +6\n</code></pre>"},{"location":"User-Documentation/Events-List/#title-title","title":"Title: <code>title</code>","text":"<p>This event is deprecated. Please use notify instead.</p> <p>This event displays a title or a subtitle. The first argument is the type (<code>title</code> or <code>subtitle</code>), second argument are title's duration times (in ticks) separated by semicolons - fade in, stay and fade out: <code>20;100;20</code>. If you set it to three zeros (<code>0;0;0</code>) the plugin will use default Minecraft values. After these two required arguments there is a title message, formatted like in the <code>message</code> event, which supports multiple languages, color codes and variables. Keep in mind that the subtitle will only appear if the title is visible - that's how Minecraft works.</p> <p>Example</p> <pre><code>title subtitle 0;0;0 {en} Lobby joined! {pl} Do\u0142\u0105czono do lobby!\n</code></pre>"},{"location":"User-Documentation/Events-List/#teleport-teleport","title":"Teleport: <code>teleport</code>","text":"<p>Teleports the player to a specified location, with or without head rotation. It will also end the conversation, if the player has one active.The first and only argument must be location. It's a good idea to use yaw and pitch here.</p> <p>Example</p> <pre><code>teleport 123;32;-789;world_the_nether;180;45\n</code></pre>"},{"location":"User-Documentation/Events-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>This event has only one purpose: Change values that are stored in <code>variable</code> objective variables. The first argument is the ID of the <code>variable</code> objective. The second argument is the name of the variable to set. The third argument is the value to set. Both the name and value can use <code>%...%</code> variables. To delete a variable you can use <code>\"\"</code>. Refer to the <code>variable</code> objective documentation for more information about storing variables.</p> <p>Example</p> <pre><code>variable some_var_obj name %player%\nvariable other_var_obj desc \"\"\n</code></pre>"},{"location":"User-Documentation/Events-List/#weather-weather","title":"Weather: <code>weather</code>","text":"<p>Sets weather. The argument is <code>sun</code>, <code>rain</code> or <code>storm</code>.</p> <p>Example</p> <pre><code>weather rain\n</code></pre>"},{"location":"User-Documentation/Events-List/#give-experience-experience","title":"Give experience: <code>experience</code>","text":"<p>Gives the specified amount of experience points to the player. You can give whole levels by adding the <code>level</code> argument.</p> <p>Example</p> <pre><code>experience 4 level\n</code></pre>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/","title":"\ud83c\udff7\ufe0f \u200a\u200aIO's & Categories","text":""},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#notify-ios","title":"Notify IO's","text":"<p>A NotifyIO is a method of displaying a notification to the player. Here's a demo video showing an example configuration of all NotifyIO's.</p>   Sorry, your browser doesn't support embedded videos.   <p>Most NotifyIO's have unique settings that somehow change how a notification is displayed.   Additionally, they all allow each setting of the SoundIO to be used! This is the case because every NotifyIO has an internal SoundIO.  Therefore, you can play a sound whenever a notification is shown.</p> <p>The actual message is either defined in the event that triggers the NotifyIO or in the messages.yml for all built-in notifications. </p> <p>Check the notification event documentation  on how to use the notify event!</p>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#chat","title":"Chat","text":"<p>Writes the notification in the players chat.</p> Preview <p></p> Option Description SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#advancement","title":"Advancement","text":"<p>Shows the notification using an achievement popup. Unfortunately Minecraft does play the default advancement sound here.  It's not possible to stop this sound from playing - if you want to get rid of it you would have to override / remove that sound from your server's ressource pack. You can still add your own additional sound as usual though. It will then be played together with the default advancement sound.</p> Preview <p></p> Option Description frame What Achievement frame to use. Can be: <code>challenge</code>, <code>goal</code>, <code>task</code> icon What icon to show. Must be the vanilla name of an item. Example: minecraft:map SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#actionbar","title":"Actionbar","text":"<p>Shows the notification using the actionbar.</p> Preview <p></p> Option Description SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#bossbar","title":"Bossbar","text":"<p>Shows the notification using a bossbar at the top of the players screen.</p> Preview <p> </p> Option Description barFlags What flags to add to the bossbar. <code>PLAY_BOSS_MUSIC</code> seems to be broken in either Spigot or the game itself. barColor What color to draw the bar. progress What progress to show the bar. A floating point number between 0.0 (empty) and 1.0 (full) style What bar style to use. stay How many ticks to keep the bar on screen. Defaults to 70 countdown If set, will step the progress of the bar by countdown steps. For example, if set to 10, then 10 times during the time it is on the screen the progress will drop by 1/10 SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#title","title":"Title","text":"<p>Shows the notification using a title. A subtitle can be played simultaneously by adding <code>\\n</code> to the notification text. Anything after these characters will be shown in the subtitle.</p> Preview <p></p> Option Description fadeIn Ticks to fade the title in. Default 10 stay Ticks to keep title on screen. Default 70 fadeOut Ticks to fade the title out. Default 20 SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#subtitle","title":"SubTitle","text":"<p>Shows the notification using a subtitle.</p> Preview <p></p> Option Description fadeIn Ticks to fade the title in. Default 10 stay Ticks to keep title on screen. Default 70 fadeOut Ticks to fade the title out. Default 20 SoundIO Any option from the SoundIO."},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#sound","title":"Soundsoundplayeroffset:","text":"<p>This IO just plays a sound. You can use it's options in any other IO. You should read the wiki page of the playsound command as Minecraft's sound system is kinda strange. Just one example: Sound never moves in Minecraft. It's totally static. Keep that in mind when creating sounds close to a player. They can move around the sound and make it louder or quieter by walking towards / away from it.</p> Option Description sound Sound to play. If blank, no sound. Either vanilla Minecraft sounds (get them using /playsound autocompletion) or the name of a sound from a resource pack. soundcategory The category in which the sound will be played. soundvolume Minecraft's special sound volume. Default: 1 soundpitch Pitch of the sound. Default: 1 Min: 0 Max: 2 soundlocation Default: The player's location. A location using the BetonQuest ULF. Can include variables. soundplayeroffset This option is special. See below. <p>This option can be a number or a vector.</p> <p>Number:</p> <p>The location the sound will be played at is moved away from the player towards the <code>soundlocation</code> using the value of <code>soundplayeroffset</code>. The sound will be at the actual location if the player is closer to the soundlocation then the <code>soundplayeroffset</code> would allow.</p> Visual Explanation <p> </p> <p>This shows how the sound will be played at the <code>soundlocation</code> if the <code>soundplayeroffset</code> is bigger then the current distance between the player and the <code>soundlocation</code> </p> <p>Example usage:</p> <p>You could make a \"sound compass\" that will play a sound in the direction of a point of interest.</p> <p>Vector:    A vector has to be in the format<code>(x;y;z)</code>. This system will use the players relative coordinate system. This means that the vectors x axis is right / left from the players head, the y axis is up or down from where ever the players face is and the z axis is before / behind the players face. It will move along the players  head.</p> Visual Explanation <p>In contrast to their global counterparts, relative x,y,z axes do not change their orientation relative to the player. Example: The positive x-axis will always point left from the perspective of the player.  </p> <p>This makes it possible to go crazy with sounds. Just one example: A halloween special where the player hears a  whispering into his left ear - no matter where he is or how he turns his head... \ud83c\udf83</p> <p>Here is a small example:</p> Video Example <p>blue line = direction the player is looking in   \ud83d\udfe2 = soundlocation argument   \ud83d\udd34  = the actual location the sound is played at   soundplayeroffset = (0,0,5)</p> <p>  Sorry, your browser doesn't support embedded videos.   The sound is always played 5 block away from the soundlocation. The direction is however based on where the player is looking.</p>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#suppress","title":"Suppress","text":"<p>Does not output any sound or text \ud83d\udd15. Can be used to remove built-in notifications.</p>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#categories","title":"Categories","text":"<p>Notify Categories are pre-defined NotifyIO settings. They can be applied to any notify event and are used by BetonQuests built-in notifications. All categories must be defined in the custom.yml file in a section called <code>notifications</code>.</p> <p>Warning</p> <p>A note about the custom.yml: This is a strange file. BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one custom.yml with all your settings. We will improve this in BQ 2.0.</p>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#custom-categories","title":"Custom Categories","text":"<p>Custom categories are user defined presets for any notify event. They shorten your events and enable you to change how a notification of a certain category looks in one central place. They do not allow you to set a message though as  the message is an argument of the notify event! </p> <p>This is how a custom category looks: <pre><code>notifications:\nmoney:            # Category name\nio: advancement  # Set's the used NotifyIO\nicon: gold_ingot # A setting of the bossbarIO\n</code></pre></p> <p>The only thing you must be careful with is the name of your custom categories. You could end up using a reserved name - these stem from BetonQuest's build-in notification categories. Changing these is a different feature. A full list of all reserved names can be found below.</p>"},{"location":"User-Documentation/Notification-IO%27s-%26-Categories/#built-in-categories","title":"Built-in Categories","text":"<p>The table below contains all build-in notification categories.</p> <p>You may notice that the \"Categories\" column lists two categories. These work exactly like the one in the <code>notify</code> event. The first existent category (from left to right) will be used. This allows you to change all build-in notifications with just two entries in your custom.yml: <pre><code>notifications:\ninfo:\nio: actionbar\nerror:\nio: actionbar\n</code></pre> You can override the settings from the info/error category for any specific notification by adding it to the  <code>notifications</code> section. Example: <pre><code>notifications:\ninfo:\nio: actionbar\nerror:\nio: actionbar\nnew_journal_entry:  # The info categories settings are overridden for the new_journal_entry notification\nio: subtitle\n</code></pre></p> Notifications Categories Notifications Categories Command Blocked command_blocked, error Animals to Breed animals_to_breed, info No Permission no_permission, error Blocks to Break blocks_to_break, info New Changelog changelog, info Blocks to Place blocks_to_place, info Inventory Full inventory_full, error Mobs to click mobs_to_click, info Language Changed language_changed, info Fish to catch fish_to_catch, info Mobs to Kill mobs_to_kill, info Players to kill players_to_kill, info Money Given money_given, info Potions to brew potions_to_brew, info Money Taken money_taken, info Points given point_given, info Quest Cancelled quest_cancelled, info Points taken point_taken, info Items Given items_given, info Points multiplied point_multiplied, info New Journal Entry new_journal_entry, info Sheep to shear sheep_to_shear, info Conversation blocked busy, error"},{"location":"User-Documentation/Notification-Settings/","title":"\ud83d\udd0a \u200a\u200aSettings","text":"<p>BetonQuest features a powerful notify system that allows you to display any information to your players. You can freely choose between many NotifyIO's like simple chat output, (sub)titles, advancements or sounds. They all come with unique options that allow you to customize them. Just take a look at this example configuration:</p>   Sorry, your browser doesn't support embedded videos."},{"location":"User-Documentation/Notification-Settings/#sending-custom-notifications","title":"Sending custom notifications","text":"<p>A truly custom notification can be sent using the <code>notify</code> event at any time. Check out the events documentation to learn how.</p>"},{"location":"User-Documentation/Notification-Settings/#changing-betonquests-built-in-notifications","title":"Changing BetonQuest's built-in notifications","text":""},{"location":"User-Documentation/Notification-Settings/#general-notifications","title":"General notifications","text":"<p>These can be anything from BetonQuest notifying a player that their language has been changed to sending a notice about a new changelog to an admin.</p> <p>For example:   When BetonQuest fails to add a quest item to a player's inventory it will send <code>&amp;e*&amp;bYour inventory is full!&amp;e*</code>.   This message is defined in messages.yml along with other default plugin messages. You can redefine them to your liking.</p> <p>The Notify System can do much more than just changing messages though:</p> <p>All notifications will be displayed using the ChatIO and without a sound by default. You need to use notification categories to change this behaviour. These categories are pretty much just pre-defined NotifyIO settings.   Each notification in messages.yml has a special category with a reserved name assigned to it.</p> <p>For example: If you would like to have the \"language_changed\" notification displayed as an actionbar message you would:</p> <ul> <li>Add a file named custom.yml to your package.</li> <li>Add this to the file: </li> </ul> <pre><code>notifications:        #General header for all notification settings\nlanguage_changed:   #Name of the category, same as in messages.yml\nio: actionbar     #Setting the Notify IO to \"actionbar\"\n</code></pre> <p>Warning</p> <p>A note about the custom.yml: This is a strange file. BetonQuest searches through all packages and just uses the first one it finds. Therefore, you should probably create just one custom.yml with all your settings. We will improve this in BQ 2.0.</p> <p>You can add any other Notify IO setting to the category like so: <pre><code>notifications:       language_changed:   io: actionbar     sound: entity.blaze.hurt  #Plays a sound while showing the notification\n\nchangelog: #This is another category. They all need to be inside the 'notifications:' section.\nsound: entity.experience_orb.pickup      </code></pre> A full list of all reserved names can be found on the IO's &amp; Categories page.</p> <p>This feature can be used to disable build-in notifications:   Just set <code>io:</code> to <code>supress</code> for any notification that you want to remove.</p>"},{"location":"User-Documentation/Notification-Settings/#objective-notifications","title":"Objective notifications","text":"<p>Some objectives have a <code>notify</code> argument that can be added to their instruction. If you do so, the objective will send a notification to the player if they progress in the objective. You can also add an intervall (<code>notify:5</code>) - in this case the player will get a notification every 5 steps towards the completion of the objective.</p> <p>The messages.yml values of these notifications look a bit strange: <pre><code>blocks_to_break: '&amp;2{1} blocks left to break'\n</code></pre> <code>{1}</code> is just an internal variable (similar to the color codes) that will be replaced with a number based on the player's progression.</p> <p>You can customize how these notifications are displayed using exactly the same method as for other built-in notifications.</p>"},{"location":"User-Documentation/Objectives-List/","title":"Objectives List","text":""},{"location":"User-Documentation/Objectives-List/#action-action","title":"Action: <code>action</code>","text":"<p>This objective completes when the player clicks on the given block type. The first argument is the type of the click, it can be right, left or any. Next is a Block Selector or <code>any</code> if you want to count all clicks, even into the air. You can also specify the <code>loc:</code> argument, followed by the standard location format and the <code>range:</code> followed by a number (or variable). The specified location is the center of a sphere, the range it's radius. Therefore, these arguments define where the clicked block needs to be, as opposed to \"where you must be\" in location condition. If you add the argument <code>cancel</code>, the click will be canceled (chest will not open, button will not be pressed etc.). This objective works great with the location condition and the item in hand condition to further limit the counted clicks. One could make a magic wand using this.</p> <p>The objective contains one property, <code>location</code>. It's a string formatted like <code>X: 100, Y: 200, Z:300</code>. It does not show the radius.</p> <p>Example</p> <pre><code>action right DOOR conditions:holding_key loc:100;200;300;world range:5\naction any any conditions:holding_magicWand events:fireSpell #Custom click listener for a wand\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#arrow-shooting-arrow","title":"Arrow Shooting: <code>arrow</code>","text":"<p>To complete this objective the player needs to shoot the arrow into the target. There are two arguments, location of the target and precision number (radius around location where the arrow must land, should be small). Note that the position of an arrow after hit is on the wall of a full block, which means that shooting not full blocks (like heads) won't give accurate results. Experiment with this objective a bit to make sure you've set the numbers correctly.</p> <p>Example</p> <pre><code>arrow 100.5;200.5;300.5;world 1.1 events:reward conditions:correct_player_position\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#block-block","title":"Block: <code>block</code>","text":"<p>To complete this objective the player must break or place the specified amount of blocks. The first argument is a Block Selector. Next is amount. It can be more than 0 for placing and less than 0 for destroying. You can also use the <code>notify</code> keyword to display messages to the player each time he updates amount of blocks, optionally with the notification interval after colon.</p> <p>This objective has two properties, <code>amount</code> and <code>left</code>. Amount is current amount of blocks in the objective, left is amount needed to complete the objective. Note that it may sometimes be negative!</p> <p>Example</p> <pre><code>block LOG -16 events:reward notify:5\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#breed-animals-breed","title":"Breed animals: <code>breed</code>","text":"<p>This objective is completed by breeding animals of specified type. The first argument is the animal type and the second argument is the amount (positive integer). You can add the <code>notify</code> argument to display a message with the remaining amount each time the animal is bred, optionally with the notification interval after a colon. While you can specify any entity, the objective will be completable only for breedabgle ones.</p> <p>Example</p> <pre><code>breed cow 10 notify:2 events:reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#put-items-in-a-chest-chestput","title":"Put items in a chest: <code>chestput</code>","text":"<p>This objective requires the player to put specified items in a specified chest. First argument is a location of the chest, second argument is a list of items (from items.yml file), separated with a comma. You can also add amount of items after a colon. The items will be removed upon completing the objective unless you add <code>items-stay</code> optional argument.</p> <p>Example</p> <pre><code>chestput 100;200;300;world emerald:5,sword events:tag,message\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#eatdrink-consume","title":"Eat/drink: <code>consume</code>","text":"<p>This objective is completed by eating specified food or drinking specified potion. The only required argument is the ID of an item from items.yml.</p> <p>Example</p> <pre><code>consume tawny_owl events:faster_endurance_regen\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#crafting-craft","title":"Crafting: <code>craft</code>","text":"<p>To complete this objective the player must craft specified item. First argument is ID of the item, as in items.yml. Next is amount (integer).</p> <p>The crafting objective has three properties: <code>left</code> is the amount of items left to craft, <code>amount</code> is the current amount of already crafted items and <code>total</code> is the initially required amount of items to be crafted.</p> <p>Example</p> <pre><code>craft saddle 5 events:reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#enchant-item-enchant","title":"Enchant item: <code>enchant</code>","text":"<p>This objectie is completed when the player enchants specified item with specified enchantment. The first argument is an item name, as defined it items.yml. Second one is the enchantment and a level, separated with a colon. If you need to check for multiple enchantments you can add a list of them, separated by colons.</p> <p>Example</p> <pre><code>enchant sword damage_all:1,knockback:1 events:reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#experience-experience","title":"Experience: <code>experience</code>","text":"<p>This objective can by completed by reaching specified amount of experience points. You can check for whole levels by adding the <code>level</code> argument. The conditions are checked when the player levels up, so if they are not met the first time, the player will have to meet them and levelup again.</p> <p>Example</p> <pre><code>experience 25 level events:reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#delay-delay","title":"Delay: <code>delay</code>","text":"<p>This objective is just a long, persistent delay for firing events. It will run only after certain amount of time (measured in minutes) and only when player is online and meets all conditions. If a player is offline at that time it will just wait for them to log in. You should use it for example to delete tags so the player can complete quests multiple times. First argument is time, by default in minutes. You can also use <code>ticks</code> or <code>seconds</code> argument to use different units, but keep in mind that it's not very precise - it will complete roughly after the time ends. To control that precision you can specify an optional <code>interval:</code> argument, which specifies how many ticks should pass between checks. One second is 20 ticks. Less makes the objective more precise, at the expense of performance. The rest is just like in other objectives.</p> <p>Delay has two properties, <code>left</code> and <code>date</code>. The first one will show how much time needs to pass before the delay is completed (i.e. <code>23 days, 5 hours and 45 minutes</code>), the second one will show a date of completing the objective formatted using <code>date_format</code> setting in config.yml (it will look like the one above every journal entry).</p> <p>Example</p> <pre><code>delay 1000 ticks interval:5 events:event1,event2\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#death-die","title":"Death: <code>die</code>","text":"<p>Death objective completes when the player dies meeting all conditions. You can optionally cancel death with <code>cancel</code> argument. It will heal player and optionally teleport him to respawn location. There can be two arguments: <code>cancel</code>, which is optional, and <code>respawn:</code>, which is also optional and only used if there is the <code>cancel</code> argument set. You can add them right after type of objective.</p> <p>Example</p> <pre><code>die cancel respawn:100;200;300;world;90;0 events:teleport\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#fishing-fish","title":"Fishing: <code>fish</code>","text":"<p>Requires the player to catch something with the fishing rod. It doesn't have to be a fish, it can also be a treasure or junk. The first argument is a Block Selector of the item to catch. Second argument must be the amount of fish to catch. You can also add the <code>notify</code> argument if you want to display progress, optionally with the notification interval after a colon.</p> <p>The fish objective has three properties: <code>left</code> is the amount of fish still left to be caught, <code>amount</code> is the amount of already caught fish and <code>total</code> is the initially required amount of fish needed to be caught.</p> <p>Example</p> <pre><code>fish SALMON 5 notify events:tag_fish_caught\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#interact-with-entity-interact","title":"Interact with entity: <code>interact</code>","text":"<p>The player must click on an entity to complete this objective. The first argument is the type of a click. Available values are <code>right</code>, <code>left</code> and <code>any</code>. Second required argument is the mob type. Next is an amount of mobs required to click on. These must be unique, so the player can't simply click twenty times on the same zombie to complete it. There is also an optional <code>name:</code> parameter which specifies what custom name the entity must have (you need to write <code>_</code> instead of the space character). To check for the real name (e.g. if you renamed players to include their rank) you can also use <code>realname:</code> instead. Add <code>marked:</code> if the clicked entity needs to be marked by the <code>spawn</code> event (see its description for marking explanation).  You can also add <code>notify</code> argument to make the objective notify players whenever they click a correct entity, optionally with the notification interval after colon and <code>cancel</code> if the click shouldn't do what it usually does (i.e. left click won't hurt the entity). This can be limited with an optional <code>loc</code> and <code>range</code> attribute to limit within a range of a location.</p> <p>Example</p> <pre><code>interact right creeper 1 marked:sick condition:syringeInHand cancel\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#kill-player-kill","title":"Kill player: <code>kill</code>","text":"<p>To complete this objective the player needs to kill another player. The first argument is amount of players to kill. You can also specify additional arguments: <code>name:</code> followed by the name will only accept killing players with this name, <code>required:</code> followed by a list of conditions separated with commas will only accept killing players meeting these conditions and <code>notify</code> will display notifications when a player is killed, optionally with the notification interval after a colon.</p> <p>The kill objective has three properties: <code>left</code> is the amount of players still left to kill, <code>amount</code> is the amount of already killed players and <code>total</code> is the initially required amount to kill.</p> <p>Example</p> <pre><code>kill 5 required:team_B\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#location-location","title":"Location: <code>location</code>","text":"<p>This objective completes when player moves in specified range of specified location and meets all conditions. The first argument after objective's name must be location, the second - radius around the location. It can be a variable.</p> <p>Location objective contains one property, <code>location</code>. It's a string formatted like <code>X: 100, Y: 200, Z:300</code>.</p> <p>Example</p> <pre><code>location 100;200;300;world 5 condition:test1,!test2 events:test1,test2\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#login-login","title":"Login: <code>login</code>","text":"<p>To complete this objective the player simply needs to login to the server. If you use <code>global</code> this objective will be also completed directly when the player joins the first time. If you use <code>persistent</code> it will be permanent. Don't forget that if you use global and persistent you can still remove the objective explicitly.</p> <p>Example</p> <pre><code>login events:welcome_message\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#logout-logout","title":"Logout: <code>logout</code>","text":"<p>To complete this objective the player simply needs to leave the server. Keep in mind that running a <code>folder</code> event here will make it run in \"persistent\" mode, since the player is offline on the next tick.</p> <p>Example</p> <pre><code>logout events:delete_objective\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#password-password","title":"Password: <code>password</code>","text":"<p>This objective requires the player to write a certain password in chat. All attempts of a player will be hidden from public chat. The password consists of a prefix followed by the actual secret word: <pre><code>Solution: The Cake is a lie!     \n^prefix   ^secret word(s)\n</code></pre></p> <p>The objective's instruction string is defined as follows:</p> <ol> <li> <p>The first argument is the password, use underscore characters (<code>_</code>) instead of spaces.    The password is a regular expression.    They are a little complicated but worth the effort if you want more control over what exactly matches.     Websites like regex101.com help with that complexity though.    The offical documentation for regular expressions    in Java might also help you.    If you don't want to get into them just write down the password but keep in mind that the players answer needs to be an exact match! </p> </li> <li> <p>The prefix can be changed: The default (when no prefix is set) is the translated prefix from the messages.yml config in the user's language.               Note that every custom prefix is suffixed with <code>:\u2800</code>, so <code>prefix:Library_password</code> will require the user to enter <code>Library password: myfancypassword</code>.       To disable the prefix use an empty <code>prefix:</code> declaration, e.g. <code>password myfancypassword prefix: events:success</code>.    Be aware of these side effects that come with disabling the prefix:</p> <ul> <li>Nothing will be hidden on failure, so tries will be visible in chat and commands will get executed!</li> <li>If a command was used to enter the password, the command will not be canceled on success and thus still be executed!    </li> <li>This ensures that even if your password is <code>quest</code> you can still execute the <code>/quest</code> command. </li> </ul> </li> <li> <p>You can also add the <code>ignoreCase</code> argument if you want a password's capitalization to be ignored. This is especially important for regex matching.</p> </li> <li> <p>If you want to trigger one or more events when the player failed to guess the password you can use the argument <code>fail</code> with a list of events (comma separated).    With disabled prefix every command or chat message will trigger these events!</p> </li> </ol> <p>Example</p> <pre><code>password beton ignoreCase prefix:secret fail:failEvent1,failEvent2 events:message,reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#pickup-item-pickup","title":"Pickup item: <code>pickup</code>","text":"<p>To complete this objective you need to pickup the specified amount of items.  The first argument must be the internal name of an item defined in <code>items.yml</code>. This can also be a comma-separated list of multiple items. You can optionally add the <code>amount:</code> argument to specify how many of these items the player needs to pickup.  This amount is a total amount though, it does not count per each individual item. </p> <p>You can also add the <code>notify</code> keyword to display how many items are left to pickup.</p> <p>Example</p> <pre><code>pickup emerald amount:3 events:reward notify\npickup emerald,diamond amount:6 events:reward notify\n</code></pre> <p>This objective has two variable properties: <code>amount</code> (shows how much the player already collected) and <code>left</code> (displays how much is left to pickup).</p>"},{"location":"User-Documentation/Objectives-List/#mob-kill-mobkill","title":"Mob Kill: <code>mobkill</code>","text":"<p>The player must kill specified amount of mobs You must specify mob type first and then amount. You can find possible mob types here: mob types. Additionally you can specify names for mobs with <code>name:Uber_Zombie</code>, so only killing properly named mobs counts. All <code>_</code> are replaced with spaces, so in this example you would have to kill 5 zombies with \"Uber Zombie\" above their heads. You can also specify <code>notify</code> keyword to display messages to the player each time he kills a mob, optionally with the notification interval after colon. If you want to accept only mobs marked with <code>spawn</code> event, use <code>marked:</code> argument followed by the keyword used in that event.</p> <p>This objective also has two properties, <code>amount</code> and <code>left</code>. Amount is the current amount of killed mobs, left is amount needed to complete the objective.</p> <p>Example</p> <pre><code>mobkill ZOMBIE 5 name:Uber_Zombie conditions:night\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#potion-brewing-brew","title":"Potion brewing: <code>brew</code>","text":"<p>To complete this objective the player needs to brew specified amount of specified potions. The first argument is a potion ID from items.yml. Second argument is amount of potions. You can optionally add <code>notify</code> argument to make the objective display progress to players, optionally with the notification interval after a colon.</p> <p>The brewing will be accepted if the player was the last one add something to the brewing stand and will only count newly brewed potions.</p> <p>This objective has these three properties: <code>amount</code> for what is already done, <code>left:</code> for what is still left and <code>total</code> for what was initially required.</p> <p>Example</p> <pre><code>brew weird_concoction 4 event:add_tag\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#sheep-shearing-shear","title":"Sheep shearing: <code>shear</code>","text":"<p>To complete this objective the player has to shear specified amount of sheep, optionally with specified color and/or name. The first, required argument is amount (integer). Optionally, you can add a <code>name:</code> argument to only count specific sheep. All underscores will be replaced by spaces - if you want to use underscores, put a <code>\\</code> before them. You can also check for the sheep's <code>color:</code> using these color names.</p> <p>Sheep shearing has the same properties as mob kill objective.</p> <p>Example</p> <pre><code>shear 1 name:Bob color:black\nshear 1 name:jeb\\_\n\"shear 1 name:jeb\\\\_\" #Use two backslashes if quoted\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#smelting-smelt","title":"Smelting: <code>smelt</code>","text":"<p>To complete this objective the player must smelt a specified item. Note that you must define the output item, not the ingredient. The first argument is a Block Selector for the output item. The second is the amount (integer).</p> <p>Smelting has the same properties as crafting objective.</p> <p>Example</p> <pre><code>smelt IRON_INGOT 5 events:reward\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#step-on-pressure-plate-step","title":"Step on pressure plate: <code>step</code>","text":"<p>To complete this objective the player has to step on a pressure plate at a given location. The type of plate does not matter. The first and only required argument is a location. If the pressure plate is not present at that location, the objective will not be completable and will log errors in the console.</p> <p>Step objective contains one property, <code>location</code>. It shows the exact location of the pressure plate in a string formatted like <code>X: 100, Y: 200, Z:300</code>.</p> <p>Example</p> <pre><code>step 100;200;300;world events:done\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#taming-tame","title":"Taming: <code>tame</code>","text":"<p>To complete this objective player must tame some amount of mobs. First argument is type, second is amount. The mob must be tameable for the objective to be valid, e.g. on 1.16.1: <code>CAT</code>, <code>DONKEY</code>, <code>HORSE</code>, <code>LLAMA</code>, <code>PARROT</code> or <code>WOLF</code></p> <p>Taming has the same properties as mob kill objective.</p> <p>Example</p> <pre><code>tame WOLF 2 events:wolfs_tamed\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#jump-jump","title":"Jump!: <code>jump</code>","text":"<p>To complete this objective player must jump. The only argument is amount. <code>amount</code> and <code>left</code> are supported as objective variable properties. </p> <p>Example</p> <pre><code>jump 15 events:legExerciseDone\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#riding-riding","title":"Riding: <code>riding</code>","text":"<p>This objective can be completed by riding the specified entity. <code>any</code> is also a valid input and matches any entity.</p> <p>Example</p> <pre><code>riding horse\n</code></pre>"},{"location":"User-Documentation/Objectives-List/#variable-variable","title":"Variable: <code>variable</code>","text":"<p>This objective is different. You cannot complete it, it will also ignore defined events and conditions. You can start it and that's it. While this objective is active though, everything the player types in chat (and matches special pattern) will become a variable. The pattern is <code>key: value</code>. So if you type that, it will create a variable called <code>key</code>, which will resolve to <code>value</code> string. These are not global variables, you can access them as objective properties. Let's say you defined this objective as <code>var</code> in your objectives.yml file. You can access the variable in any conversation, event or condition with <code>%objective.var.key%</code> - and in case of this example, it will resolve to <code>value</code>. The player can type something else, and the variable will change its value. Variables are per-player, so my <code>key</code> variable  will be different from your <code>key</code> variable, depending on what we were typing in chat. You can have as much variables here as you want. To remove this objective use <code>objective delete</code> event - there is no other way.</p> <p>You can also use <code>variable</code> event to change variables stored in this objective. There is one optional argument, <code>no-chat</code>. If you use it, the objective won't be modified by what players type in chat.</p> <p>Example</p> <pre><code>variable\n</code></pre>"},{"location":"User-Documentation/Reference/","title":"Reference","text":"<p>This chapter describes all aspects of BetonQuest in one place. You should read it at least once to know what you're dealing with and where to search for information if you ever have any problems.</p>"},{"location":"User-Documentation/Reference/#conditions-events-and-objectives","title":"Conditions, Events and Objectives","text":"<p>Conditions, events and objectives are defined with an \"instruction string\". It's a piece of text, formatted in a specific way, containing the instruction for the condition/event/objective. Thanks to this string they know what should they do. To define the instruction string you will need a reference, few pages below. It describes how something behaves and how it should be created. All instruction strings are defined in appropriate files, for example all conditions are in conditions.yml config. The syntax used to define them looks like this: <code>name: 'the instruction string containing the data'</code>. Apostrophes are optional in most cases, you can find out when to use them by looking up \"YAML syntax\" in Google.</p>"},{"location":"User-Documentation/Reference/#conditions","title":"Conditions","text":"<p>Conditions are the most versatile and useful tools in creating advanced quests. They allow you to control what options are available to player in conversations, how the NPC responds or if the objective will be completed. The reference of all possible conditions is down below.</p> <p>You can negate the condition (revert its output) by adding an exclamation mark (<code>!</code>) at the beginning of it's name (in the place you use it, i.e. in conversations, not in the conditions.yml file).</p> <p>You can use conversation variables instead of numeric arguments in conditions. If the variable fails to resolve (i.e. it will return an empty string) BetonQuest will use 0 instead.</p>"},{"location":"User-Documentation/Reference/#events","title":"Events","text":"<p>In certain moments you will want something to happen. Updating the journal, setting tags, giving rewards, all these are done using events. You define them just like conditions, by specifying a name and instruction string. You can find instruction strings to all events in the event reference. At the end of the instruction string you can add <code>conditions:</code> or <code>condition:</code> (with or without <code>s</code> at the end) attribute followed by a list of condition names separated by commas, like <code>conditions:angry,!quest_started</code>. This will make an event fire only when these conditions are met.</p> <p>You can use conversation variables instead of numeric arguments in events. If the variable fails to resolve (i.e. it will return an empty string) BetonQuest will use 0 instead.</p>"},{"location":"User-Documentation/Reference/#objectives","title":"Objectives","text":"<p>Objectives are the main things you will use when creating complex quests. You start them with a special event, <code>objective</code>. You define them in the objectives.yml file, just as you would conditions or events. At the end of the instruction string you can add conditions and events for the objective. Conditions will limit when the objective can be completed (e.g. killing zombies only at given location in quest for defending city gates), and events will fire when the objective is completed (e.g. giving a reward, or setting a tag which will enable collecting a reward from an NPC). You define these like that: <code>conditions:con1,con2 events:event1,event2</code> at the end of instruction string . Separate them by commas and never use spaces! You can also use singular forms of these arguments: <code>condition:</code> and <code>event:</code>.</p> <p>If you want to start an objective right after it was completed (for example <code>die</code> objective: when you die, teleport you to a special spawnpoint and start <code>die</code> objective again), you can add <code>persistent</code> argument at the end of an instruction string. It will prevent the objective from being completed, although it will run all its events. To cancel such objective you will need to use <code>objective delete</code> event.</p> <p>Objectives are loaded at start-up, but they do not consume resources without player actually having them active. This means that if you have 100 objectives defined, and 20 players doing one objective, 20 another players doing second objective, and the rest objectives are inactive (no one does them), then only 2 objectives will be consuming your server resources, not 100, not 40.</p>"},{"location":"User-Documentation/Reference/#packages","title":"Packages","text":"<p>All the content you create is organized into packages. Each package must contain the main.yml file with package-specific settings. Additionally it can have conversations directory with conversation files, events.yml, conditions.yml, objectives.yml, items.yml and journal.yml. The default package is called simply \"default\". It is always present, and if you delete it, it will be regenerated with a sample quest.</p> <p>If you want, you can simply ignore the existence of packages and write all your quests in the default one. You will however come to a point, when your files contain hundreds of lines and it gets a little bit confusing. That's why it's better to split your quests into multiple packages, for example \"main\" for the quests in the main city, \"dungeon\" for some interesting dungeon story etc.</p> <p>Each package can be disabled/enabled in the main.yml file, by setting <code>enabled</code> to <code>true</code> or <code>false</code>. <pre><code>#Add this to the package main.yml\nenabled: true\n</code></pre></p> <p>It would be limiting if you couldn't interact between packages. That's why you can always access stuff from other packages by prefixing its name with package name. If you're writing a conversation in package <code>village</code> and you want to fire an event <code>reward</code> from package <code>beton</code>, you simply name the event as <code>beton.reward</code>. The plugin will search for <code>reward</code> in <code>beton</code> package instead of the one in which the conversation is defined. All events, conditions, objectives, items and conversations behave this way. Note that you can't cross-reference journal entries!</p> <p>Packages can be nested together in folders. A folder can either contain packages or be a package, never both. The name of such nested package is prefixed by names of all folders, separated with a dash. This directory tree (main.yml represents a package):</p> <pre><code>    BetonQuest/\n    \u251c\u2500default/\n    \u2514\u2500quests/\n      \u251c\u2500village1/\n      \u2502 \u251c\u2500quest1/\n      \u2502 \u2502 \u2514\u2500main.yml\n      \u2502 \u2514\u2500quest2/\n      \u2502   \u2514\u2500main.yml\n      \u2514\u2500village2/\n        \u2514\u2500quest1/\n          \u2514\u2500main.yml\n</code></pre> <p>contains these packages:</p> <ul> <li>default</li> <li>quests-village1-quest1</li> <li>quests-village1-quest2</li> <li>quests-village2-quest1</li> </ul>"},{"location":"User-Documentation/Reference/#relative-paths","title":"Relative paths","text":"<p>You don't have to always specify a full package name. In the example above, if you wanted to reference package <code>quests-village1-quest2</code> from <code>quests-village1-quest1</code>, you could write it as <code>_-quest2</code> - this means \"from the current package (<code>quest1</code>) go up one time and find there package <code>quest2</code>\". Name <code>_</code> has special meaning here. Analogously, if you wanted to reference <code>quests-village2-quest1</code> from that package, you would use <code>_-_-village2-quest1</code>. Using <code>_</code> twice will get you to <code>quests</code> package, and from there you're going into <code>village2</code> and then <code>quest1</code>.</p> <p>Relative paths can be useful if you want to move your packages between directories. Instead of rewriting every package name to match current directory tree, you can use relative paths and it will just work. It can also be useful if you want to create a downloadable quest package which can be placed anywhere and not just on the root directory (BetonQuest/) or when working with BetonQuest-Editor + BetonQuestUploader combo - quest writers don't have to prefix every package call with their name (this feature will work soon, needs an update in the editor).</p>"},{"location":"User-Documentation/Reference/#unified-location-formating","title":"Unified location formating","text":"<p>Whenever you want to define some location in your events, conditions, objectives or any other things, you will define it with this specific format. The location can consist of 2 things: base and vector. Only the base is always required.</p> <p>The base is a core location. Currently there are two types: absolute coordinates and variables. Absolute coordinates are defined like <code>100;200;300;world</code>, where <code>100</code> is X coordinate, <code>200</code> is Y, <code>300</code> is Z and <code>world</code> is the name of the world. These can have decimal values. If you want you can also add two more numbers at the end, yaw and pitch (these are controlling the rotation, for example in teleportation event, both are needed if you decide to add them; example: <code>0.5;64;0.5;world;90;-270</code>).</p> <p>To use a variable as the location's base it must resolve to a valid absolute coordinates. An example of such variable is <code>%location%</code>, which shows player's exact location. Simply place it instead of coordinates. There is one rule though: you can't use variable base types in events running without players (for example static events or the ones run from folder event after their player left the server). BetonQuest won't be able to resolve the location variable without the player!</p> <p>The vector is a modification of the location. It will be useful if you use global variables instead of base (described in the next subsection) or the base itself is variable, like <code>player</code>. Vectors look like <code>-&gt;(10;2.5;-13)</code> and are added to the end of the base. This will modify the location, X by 10, Y by 2.5 and Z by -13. For example, location written as <code>100;200;300;world_nether-&gt;(10;2.5;-13)</code> will generate a location with X=110, Y=202.5 and Z=287 on <code>world_nether</code> world.</p>"},{"location":"User-Documentation/Reference/#global-variables","title":"Global variables","text":"<p>You can insert a global variable in any instruction string. It looks like this: <code>$beton$</code> (and this one would be called \"beton\"). When the plugin loads that instruction string it will replace those variables with values assigned to them in main.yml file before the instruction string is parsed. This is useful for example when installing a package containing a WorldEdit schematic of the quest building. Instead of going through the whole code to set those locations, names or texts you will only have to specify a few variables (that is, of course, if the author of the package used those variables properly in his code).</p> <p>Note that these variables are something entirely different than conversation variables. Global ones use <code>$</code> characters and conversation ones use <code>%</code> characters. The former is resolved before the instruction string is parsed while the latter is resolved when the quests are running, usually on a per-player basis.</p> <pre><code>variables:\nvillage_location: 100;200;300;world\nvillage_name: Concrete\n</code></pre>"},{"location":"User-Documentation/Reference/#canceling-quests","title":"Canceling quests","text":"<p>If you want to let your players cancel their quest there is a function for that. In main.yml file there is <code>cancel</code> branch. You can specify there quests, which can be canceled, as well as actions that need to be done to actually cancel them. You can find an example in the <code>default</code> package. The arguments you can specify are:</p> <ul> <li><code>name</code> - this will be the name displayed to the player. All <code>_</code> characters will be converted to spaces. If you want to include other languages you can add here additional options (<code>en</code> for English etc.)</li> <li><code>conditions</code> - this is a list of conditions separated by commas. The player needs to meet all those conditions to be able to cancel this quest. Place there the ones which detect that the player has started the quest, but he has not finished it yet. </li> <li><code>objectives</code> - list of all objectives used in this quest. They will be canceled without firing their events.</li> <li><code>tags</code> - this is a list of tags that will be deleted. Place here all tags that you use during the quest.</li> <li><code>points</code> - list of all categories that will be entirely deleted.</li> <li><code>journal</code> - these journal entries will be deleted when canceling the quest.</li> <li><code>events</code> - if you want to do something else when canceling the quest (like punishing the player), list the events here.</li> <li><code>loc</code> - this is a location to which the player will be teleported when canceling the quest (defined as in teleport event);</li> </ul> <p>To cancel the quest you need to open your backpack and select a \"cancel\" button (by default a bone, can be changes by naming an item \"cancel_button\" inside default package). There will be a list of quests which can be canceled. Just select the one that interests you and it will be canceled.</p>"},{"location":"User-Documentation/Reference/#global-objectives","title":"Global objectives","text":"<p>If you want a objective to be active for every player right after joining you can create a global objective. This is done by adding <code>global</code> argument to the instruction of the objective. When you then reload BetonQuest it is started for all online players and also will be started for every player who joins.</p> <p>To prevent the objective from being started every time a player joins a tag is set for the player whenever the objective is started and as long as the player has the tag the objective wont be started again if the player joins. These tags follow syntax <code>&lt;package&gt;.global-&lt;id&gt;</code>, where <code>&lt;id&gt;</code> is the objectives id and <code>&lt;package&gt;</code> the package where the objective is located.</p> <p>Possible use cases would be a quest which starts if a player reaches a specific location or breaks a specific block.</p> <p>Example: <pre><code>start_quest_mine: 'location 100;200;300;world 5 events:start_quest_mine_folder global'\n</code></pre></p>"},{"location":"User-Documentation/Reference/#static-events","title":"Static events","text":"<p>Static events are events that will fire at the specified time of the day. It is possible to address multiple events with a <code>,</code> separated list. They are not tied to a specific player, so not all event types can be used as static. (Which player should receive a tag or objective? From which one should the items be taken?) Also, static events cannot have conditions defined (<code>event-conditions:</code> argument), as the plugin cannot check any condition without the player. Events, that can be used as static are flagged with <code>static</code> keyword in this documentation. You can define your static events in main.yml file under <code>static</code> section, as such:</p> <pre><code>static:\n'09:00': beton\n'23:59': lightning_strike\n'11:23': some_command,command_announcement\n</code></pre> <p>The hour must be in <code>''</code> to avoid problems, it needs leading zero if less than 10. <code>beton</code>, <code>lightnint_strike</code> etc. are IDs of events.</p>"},{"location":"User-Documentation/Reference/#journal","title":"Journal","text":"<p>The journal is a book in which all your adventures are described. You can obtain it by typing /j command or /b and selecting it from backpack. You cannot put it into any chests, item frames and so on. If you ever feel the need to get rid of your journal, just drop it - it will return to your backpack. The journal is updated with the <code>journal</code> event, and the text inside is defined in journal.yml config file. If you update these texts and reload the plugin, all players' journals will reflect changes. Colors in the journal can be altered in config.yml. The entries can use color codes, but the color will be lost between pages.</p> <p>The journal by default appears in the last slot of the hotbar. If you want to change that use <code>default_journal_slot</code> option in config.yml, experiment with different settings until you're ok with it.</p> <p>If you want to translate the entry do the same thing as with conversation option - go to new line, add language ID and the journal text for every language you want to include.</p> <p>You can control behavior of the journal in config.yml file, in <code>journal</code> section. <code>chars_per_page</code> specifies how many characters will be placed on a single page. If you set it too high, the text will overflow outside of the page, too low, there will be too much pages. <code>one_entry_per_page</code> allows you to place every entry on a single page. The <code>chars_per_page</code> setting is in this case ignored, BetonQuest will put entire entry on that page. <code>reversed_order</code> allows you to reverse order of entries and <code>hide_date</code> lets you remove the date from journal entries.</p> <p>You can control colors in the journal in <code>journal_colors</code> section in config.yml: <code>date</code> is a color of date of every entry, <code>line</code> is a color of lines separating entries and <code>text</code> is just a color of a text. You need to use standard color codes without <code>&amp;</code> (eg. <code>'4'</code> for dark red).</p> <p>You can also add a main page to the journal. It's a list of texts, which will show only if specified conditions are met. You can define them in the main.yml file, in the <code>journal_main_page</code> section:</p> <pre><code>journal_main_page:\ntitle:\npriority: 1\ntext:\nen: '&amp;eThe Journal'\npl: '&amp;eDziennik'\nconditions: 'quest_started,!quest_completed'\n</code></pre> <p>Each string can have text in different languages, list of conditions separated by commas (these must be met for the text to show in the journal) and <code>priority</code>, which controls the order of texts. You can use conversation variables in the texts, but they will only be updated when the player gets his journal with the /journal command. Color codes are supported.</p> <p>If you want your main page take a separate page (so entries will be displayed on next free page), set <code>full_main_page</code> in config.yml to \"true\". If you want to manually wrap the page, use the pipe <code>|</code> character. Use \\n to go to a new line.</p>"},{"location":"User-Documentation/Reference/#tags","title":"Tags","text":"<p>Tags are little pieces of text you can assign to player and then check if he has them. They are particularly useful to determine if player has started or completed quest. They are given with <code>tag</code> event and checked with <code>tag</code> condition. All tags are bound to a package, so if you add <code>beton</code> tag from within the <code>default</code> package, the tag will look like <code>default.beton</code>. If you're checking for <code>beton</code> tag from within <code>default</code> package, you're actually checking for <code>default.beton</code>. If you want to check a tag from another package, then you just need to prefix it's name with that package, for example <code>quest.beton</code>.</p>"},{"location":"User-Documentation/Reference/#points","title":"Points","text":"<p>Points are like tags, but with amount. You can earn them for doing quest, talking with NPC\u2019s, basically for everything you want. You can also take the points away, even to negative numbers. Points can be divided to categories, so the ones from beton category won\u2019t mix with points from quests group. Of course then you can check if player has (or doesn\u2019t have) certain amount and do something based on this condition. They can be used as counter for specific number of quest done, as a reputation system in villages and even NPC\u2019s attitude to player.</p>"},{"location":"User-Documentation/Reference/#npcs","title":"NPCs","text":"<p>Conversations can be assigned to NPCs created with Citizens. You do it in the main.yml file inside a package, in <code>npcs</code> section:</p> <pre><code>npcs:\n'0': innkeeper\n'4': woodcutter\n</code></pre> <p>The first string is the ID of the NPC (don't try to put Citizens NPC's name here, it must be the ID), second one is the corresponding conversation file name (without <code>.yml</code> at the end). To acquire the NPCs ID select the NPC and type <code>/npc</code> or <code>/npc id</code>.</p> <p>You can assign the same conversation to multiple NPCs.</p> <p>Note</p> <p>The Citizens ID must be enclosed in quotes.</p>"},{"location":"User-Documentation/Reference/#items","title":"Items","text":"<p>Items in BetonQuest are defined in items.yml file. Each item has an instruction string, similarly to events, conditions etc. Basic syntax is very simple:</p> <pre><code>item: BLOCK_SELECTOR other arguments...\n</code></pre> <p>BLOCK_SELECTOR is a type of the item. It doesn't have to be all in uppercase. Other arguments specify data like name of the item, lore, enchantments or potion effects. There are two categories of these arguments: the ones you can apply to every item and type specific arguments. Examples would be name (for every item type) and text (only in books).</p> <p>Every argument is used in two ways: when creating an item and when checking if some existing item matches the instruction. The first case is pretty straightforward - BetonQuest takes all data you specified and creates an item, simple as that. Second case is more complicated. You can require some property of the item to exist, other not to exist, or skip this property check altogether. You can also accept an item only if some value (like enchantment level) is greater/less than x. You can use wildcards in the BLOCK_SELECTOR to match multiple types of items.</p> <p>These are arguments that can be applied to every item:</p> <ul> <li> <p><code>name</code> - the display name of the item. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. If you want to specifically say that the item must not have any name, use <code>none</code> keyword.</p> </li> <li> <p><code>lore</code> - text under the item's name. Default styling of lore is purple and italic. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. To make a new line use <code>;</code> character. If you require the item not to have lore at all, use <code>none</code> keyword. By default lore will match only if all lines are exactly the same. If you want to accept all items which contain specified lines (and/or more lines), add <code>lore-containing</code> argument to the instruction string.</p> </li> <li> <p><code>enchants</code> - a list of enchantments and their levels. Each enchantment consists of these things, separated by colons:</p> <ul> <li>name</li> <li>level (a positive number)</li> </ul> <p>For example <code>damage_all:3</code> is Sharpness III. You can specify additional enchantments by separating them with commas.</p> <p>You can require the item not to have any enchantments by using <code>none</code> keyword. You can also add <code>+</code>/<code>-</code> character to the enchantment level to make the check require levels greater/less (and equal) than specified. If you don't care about the level, replace the number with a question mark.</p> <p>By default all specified enchantments are required. If you want to check if the item contains a matching enchantment (and/or more enchants), add <code>enchants-containing</code> argument to the instruction string. Each specified enchantment will be required on the item by default unless you prefix its name with <code>none-</code>, for example <code>none-knockback</code> means that the item must not have any knockback enchantment. Do not use <code>none-</code> prefix unless you're using <code>enchants-containing</code> argument, it doesn't make any sense and will break the check!</p> </li> <li> <p><code>unbreakable</code> - this makes the item unbreakable. You can specify it either as <code>unbreakable</code> or <code>unbreakable:true</code> to require an item to be unbreakable. If you want to check if the item is breakable, use <code>unbreakable:false</code>.</p> </li> <li> <p><code>custom-model-data</code> - set the custom model data of the item. You have to specify the data value: <code>custom-model-data:3</code>. To check that an item does not have custom model data set <code>no-custom-model-data</code>.</p> </li> </ul> <p>Examples:</p> <pre><code>name:&amp;4Sword_made_of_Holy_Concrete\nname:none\nlore:&amp;cOnly_this_sword_can_kill_the_Lord_Ruler\nlore:&amp;2Quest_Item lore-containing\nlore:none\nenchants:damage_all:3+,none-knockback\nenchants:power:? enchants-containing\nenchants:none\nunbreakable\nunbreakable:false\n</code></pre> <p>These are the arguments that can be applied only to specific item types:</p>"},{"location":"User-Documentation/Reference/#books","title":"Books","text":"<p>This applies to a written book and a book and quill.</p> <ul> <li> <p><code>title</code> - the title of a book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. If you want to specifically say that the book must not have any title, use <code>none</code> keyword.</p> </li> <li> <p><code>author</code> - the author of a book. All underscores will be replaced with spaces, you cannot use color codes here. If you want to specifically say that the book must not have any author, use <code>none</code> keyword.</p> </li> <li> <p><code>text</code> - the text of the book. All underscores will be replaced with spaces and you can use <code>&amp;</code> color codes. The text will wrap to the next page if amount of characters exceeds <code>journal.chars_per_page</code> setting in config.yml. If you want to manually wrap the page, use <code>|</code> character. To go to new line use <code>\\n</code>. Keep in mind that you can't use any spaces here, you must only use underscores (<code>_</code>). This needs to be a single argument, even if it's really long. If you don't want the book to have any text, use <code>none</code> keyword instead.</p> </li> </ul> <p>Examples:</p> <pre><code>title:Malleus_Maleficarum\nauthor:&amp;eGallus_Anonymus\ntext:Lorem_ipsum_dolor_sit_amet,\\nconsectetur_adipiscing_elit.|Pellentesque_ligula_urna(...)\n</code></pre>"},{"location":"User-Documentation/Reference/#potions","title":"Potions","text":"<p>This applies to potions, splash potions and lingering potions.</p> <ul> <li> <p><code>type</code> - type of a potion. Here's the list of possible types. Do not mistake this for a custom effect, this argument corresponds to the default vanilla potion types.</p> </li> <li> <p><code>extended</code> - extended property of the potion (you can achieve it in-game by adding redstone). It can be specified as <code>extended</code> or <code>extended:true</code>. If you want to check the potion that is NOT extended, use <code>extended:false</code>.</p> </li> <li> <p><code>upgraded</code> - upgraded property of the potion (you can achieve it in-game by adding glowstone). It can be specified as <code>upgraded</code> or <code>upgraded:true</code>. If you want to check the potion that is NOT upgraded, use <code>upgraded:false</code>.</p> </li> <li> <p><code>effects</code> - a list of custom effects. These are independent of the potion type. The effects must be separated by commas. Each effect consists of these things, separated by colons:</p> <ul> <li>type (this is different stuff that the link above!)</li> <li>power</li> <li>duration (in seconds)</li> </ul> <p>An example would be <code>WITHER:2:30</code>, which is a wither effect of level 2 for 30 seconds.</p> <p>If you want to target only potions without custom effects, use <code>none</code> keyword. You can target potions with level and time greater/less (and equal) than specified with <code>+</code>/<code>-</code> character after the number. If you don't care about the level/time, you can replace them with question mark.</p> <p>By default all specified effects are required. If you want to check if the potion contains these effects among others, add <code>effects-containing</code> argument to the instruction string. Now if you want to make sure the potion doesn't contain a specific effect, prefix the effect name with <code>none-</code>. Don't use that prefix unless you're also using <code>effects-containing</code> argument, it doesn't make any sense and it will break the check.</p> </li> </ul> <p>Examples:</p> <pre><code>type:instant_heal\nextended\nupgraded:false\neffects:poison:1+:?,slow:?:45-\neffects:none-weakness,invisibility:?:? effects-containing\n</code></pre>"},{"location":"User-Documentation/Reference/#heads","title":"Heads","text":"<p>This applies to human heads.</p> <ul> <li><code>owner</code> - this is the name of the head owner. It will not use color codes nor replace underscores with spaces. If you want to check for heads without any owner, use <code>none</code> keyword.</li> </ul> <p>Examples:</p> <pre><code>owner:Co0sh\nowner:none\n</code></pre>"},{"location":"User-Documentation/Reference/#leather-armor","title":"Leather armor","text":"<p>This applies to all parts of leather armor.</p> <ul> <li><code>color</code> - this is the color of the armor piece. It can be either one of these values, a hexadecimal RGB value prefixed with <code>#</code> character or its decimal representation without the prefix. You can also check if the armor piece doesn't have any color with <code>none</code> keyword.</li> </ul> <p>Examples:</p> <pre><code>color:light_blue\ncolor:#ff00ff\ncolor:none\n</code></pre>"},{"location":"User-Documentation/Reference/#fireworks","title":"Fireworks","text":"<p>This applies to fireworks.</p> <ul> <li> <p><code>firework</code> - this is a list of effects of the firework rocket. They are separated by commas. Each effect consists of these things separated by colons:</p> <ul> <li>effect type</li> <li>a list of main colors (refer to leather armor colors above for syntax) separated by semicolons</li> <li>a list of fade colors</li> <li><code>true</code>/<code>false</code> keyword for trail effect</li> <li><code>true</code>/<code>false</code> keyword for flicker.</li> </ul> <p>Note the separation characters, this is important: commas separate effects, colons separate effect properties, semicolons separate colors.</p> <p>If you want to target fireworks without any effects, use <code>none</code> keyword. If you want to target any effect type, use question mark instead of the effect name. If you don't want the effect to have any main/fade colors, use <code>none</code> keyword in the place of colors. If you don't care about main/fade colors, use question marks in that place. If you don't care about trail/flicker effect, use question marks instead of <code>true</code>/<code>false</code> keyword.</p> <p>By default the check will require all specified effects to be present on the firework. You can check if the firework contains specified effects among others by adding <code>firework-containing</code> argument to the instruction string. To match the item which must not have an effect, prefix the effect name with <code>none-</code> keyword. Don't use that prefix unless you're also using <code>firework-containing</code> argument, it doesn't make any sense and will break the check.</p> </li> <li> <p><code>power</code> - flight duration of the firework, in levels. You can use <code>+</code>/<code>-</code> character to target greater/less (and equal) levels.</p> </li> </ul> <p>Examples:</p> <pre><code>firework:ball:red;white:green;blue:true:true,ball_large:green;yellow:pink;black:false:false\nfirework:burst:?:none:?:? firework-containing\nfirework:none-creeper firework-containing\nfirework:none\npower:3\npower:2+\n</code></pre>"},{"location":"User-Documentation/Reference/#firework-charges","title":"Firework charges","text":"<p>This applies to firework charges.</p> <ul> <li><code>firework</code> - this is almost the same as fireworks. You can only specify a single effect and the <code>power</code> argument has no effects.</li> </ul>"},{"location":"User-Documentation/Reference/#backpack","title":"Backpack","text":"<p>Sometimes you'll want some items to be persistent over death. The quest could be broken if the player loses them. Such an item wouldn't be dropped (on death), instead it would be placed in the player's backpack.</p> <p>You can add a specific line to an item's lore to make it persistent. It's <code>&amp;2Quest_Item</code> (<code>_</code> is a space in an item's definition) if your default language is english. The translation of the line can be found in messages.yml if a different default language is configured. It's also possible to change the translation. </p> <p>Note that this must be an entirely new line in the lore!   Example: <pre><code>important_sword: \"DIAMOND_SWORD name:Sword_for_destroying__The_Concrete lore:Made_of_pure_Mithril;&amp;2Quest_Item\"\n</code></pre></p> <p>The backpack can be opened with the /backpack command. The inventory window will open, displaying your stored items. The first slot is always the journal, and if you get it, the slot will stay empty. You can transfer quest items back and forth between inventories by clicking on them. Left click will transfer just one item, right click will try to transfer all items. Normal items cannot be stored into the backpack, so it's not an infinite inventory.</p> <p>If you will ever have more than one page of quest items, the buttons will appear. You can customize those buttons by creating <code>previous_button</code> and <code>next_button</code> items in items.yml file. Their name will be overwritten with the one defined in messages.yml.</p> <p>Quest items cannot be dropped in any way other than using them. This way you can create a quest for eating cookies by giving the player a stack of cookies flagged as quest items and not continuing until there are no more cookies in his inventory/backpack. The player cannot drop the cookies, so he must eat every one of them to complete the quest.</p> <p>Don't worry if the item-dropping filter isn't working for your items when you're in creative mode - it's not a bug. It's a feature. Creative-mode players should be able to easily put quest items in containers like TreasureChests.</p>"},{"location":"User-Documentation/Reference/#party","title":"Party","text":"<p>Parties are very simple. So simple, that they are hard to understand if you already know some other party system. Basically, they don't even have to be created before using them. Parties are defined directly in conditions/events (<code>party</code> event, <code>party</code> conditions, check them out in the reference lists below). In such instruction strings the first argument is a number - range. It defines the radius where the party members will be looked for. Second is a list of conditions. Only the players that meet those conditions will be considered as members of the party. It's most intuitive for players, as they don't have to do anything to be in a party - no commands, no GUIs, just starting the same quest or having the same item - you choose what and when makes the party.</p> <p>To understand better how it works I will show you an example of <code>party</code> event. Let's say that every player has an objective of pressing a button. When one of them presses it, this event is fired:</p> <pre><code>party_reward: party 50 quest_started cancel_button,teleport_to_dungeon\n</code></pre> <p>Now, it means that all players that: are in radius of 50 blocks around the player who pressed the button AND meet <code>quest_started</code> condition will receive <code>cancel_button</code> and <code>teleport_to_dungeon</code> events. The first one will cancel the quest for pressing the button for the others (it's no longer needed), the second one will teleport them somewhere. Now, imagine there is a player on the other side of the world who also meets <code>quest_started</code> condition - he won't be teleported into the dungeon, because he was not with the other players (not in 50 blocks range). Now, there were a bunch of other players running around the button, but they didn't meet the <code>quest_started</code> condition. They also won't be teleported (they didn't start this quest).</p>"},{"location":"User-Documentation/Reference/#block-selectors","title":"Block Selectors","text":"<p>When specifying a way of matching a block, a <code>block selector</code> is used.</p>"},{"location":"User-Documentation/Reference/#format","title":"Format","text":"<p>The format of a block selector is: <code>namespace:material[state=value,...]</code></p> <p>Where:</p> <ul> <li> <p><code>namespace</code> - (optional) The material namespace. If left out then it will be assumed to be 'minecraft'.    Can be a regex.</p> </li> <li> <p><code>material</code> - The material the block is made of. All materials can be found in   Spigots Javadocs.    It can be a regex.   If the regex ends with square brackets you have to add another pair of empty square brackets even if you don't want to    use the state argument (<code>[regex][]</code>).   Instead of using a regex to match multiple materials you can also define a tag.   Every tag matches a special group of blocks or items that can be grouped together logically. They can be used using this format <code>:blocks:flowers</code> or <code>minecraft:blocks:flowers</code>.   Be aware that a tag always starts with either <code>:</code> or a namespace. </p> </li> <li> <p><code>state</code> - (optional) The block states can be provided in a comma separated <code>key=value</code> list surrounded by square brackets.    You can look up states in the Minecraft wiki.    Any states left out will be ignored when matching.    Values can be a regex.</p> </li> </ul> <p>Examples:</p> <ul> <li> <p><code>minecraft:stone</code> - Matches all blocks of type STONE</p> </li> <li> <p><code>redstone_wire</code> - Matches all blocks of type REDSTONE_WIRE</p> </li> <li> <p><code>redstone_wire[power=5]</code> - Matches all blocks of type REDSTONE_WIRE and which have a power of 5</p> </li> <li> <p><code>redstone_wire[power=5,facing=1]</code> - Matches all blocks of type REDSTONE_WIRE and which have both a power of 5 and are facing 1</p> </li> <li> <p><code>.*_LOG</code> - Matches all LOGS</p> </li> <li> <p><code>.*</code> - Matches everything</p> </li> <li> <p><code>.*[waterlogged=true]</code> - Matches all waterlogged blocks</p> </li> <li> <p><code>minecraft:blocks:flowers</code> - Matches all flowers</p> </li> <li> <p><code>:blocks:crops[age=0]</code> - Matches all crops with an age of 0 meaning, not grown / just planted</p> </li> </ul>"},{"location":"User-Documentation/Reference/#setting-behaviour","title":"Setting behaviour","text":"<p>A block selector with a regex or tag as it's material name results in a random block out of all blocks that match that regex or tag. You cannot use a regex in block states when the block selector is used for placing blocks.</p>"},{"location":"User-Documentation/Reference/#matching-behaviour","title":"Matching behaviour","text":"<p>The block state will ignore all additional block states on the block it's compared with by default. Example: <code>fence[facing=north] matches fence[facing=north] and fence[facing=north,waterlogged=true]</code> You can add an <code>exactMatch</code> argument if you only want to match blocks that exactly match the block state.  A regex is allowed in any block state value when the block selector is used to match blocks.</p>"},{"location":"User-Documentation/Reference/#hiding-players","title":"Hiding Player's","text":"Sorry, your browser doesn't support embedded videos.  <p>You can also hide players for specific players in the <code>custom.yml</code>. If the <code>source_player</code> meets the conditions every player that meets the <code>target_player</code> conditions is completely hidden for him. This is really helpful if you want a lonely place on your server, or your quests break when multiple players can see or affect each other. You can configure the interval which checks the conditions in the config.yml.</p> <p>Special behaviour:</p> <ul> <li>A player that meets the <code>source_player</code>conditions can't be pushed anymore by other players.</li> <li>By leaving the e.g. <code>source_player</code> argument empty it will match all players.</li> </ul> <pre><code>player_hider:\nexample_hider:  #All players in a special region cannot see any other players in that region.\nsource_player: in_StoryRegion\ntarget_player: in_StoryRegion\nanother_hider: #No one can see any players inside a secret room.\n#The source_player argument is left out to match all players.    \ntarget_player: in_secretRoom\nempty_hider: #in_Lobby is a world condition. Therefore, the lobby world appears empty for everyone that is in it.\nsource_player: in_Lobby\n#The target_player argument is left out to match all players.\n</code></pre>"},{"location":"User-Documentation/Updating-and-Backups/","title":"\ud83d\udce5 Updating","text":""},{"location":"User-Documentation/Updating-and-Backups/#updating-in-betonquest","title":"Updating in BetonQuest","text":"<p>There are two ways to update BetonQuest. You can either use the comfortable Auto-Updater or do a manual update by yourself.</p> <p>Disclaimer for all versions below 2.0: The Auto-Updater has a single flaw - all comments in your configurations will be lost during the update process.</p>"},{"location":"User-Documentation/Updating-and-Backups/#deciding-what-version-to-use","title":"Deciding what version to use","text":"<p>Each plugin version is a number that consists of three parts. For example 2.4.3, the first number (2 in this example) is named MAJOR, the second MINOR (4 in this example) and the third PATCH (3 in this example). When we release a new version of BetonQuest we will change these numbers in a specific way. Each number has a fixed meaning.</p> Update Strategy <code>MAJOR</code> <code>MINOR</code> <code>PATCH</code> Bug Fixes New Features Breaking Changes <p>You can also append <code>_DEV</code> to each strategy. This will download the dev builds for the corresponding version. This    is not recommended for production/live servers, as devbuilds can contain bugs. Therefore, enabling a <code>_DEV</code> strategy will automatically disable    automated updates. If you don't care about the risk you can re-enable it, otherwise check what the new devbuilds do before executing <code>/q update</code>.  </p>"},{"location":"User-Documentation/Updating-and-Backups/#deciding-if-auto-updates-are-reasonable","title":"Deciding if auto-updates are reasonable","text":"<p>Apart from the version you also have to choose if you want BetonQuest to update automatically or only after confirmation. Having automatic updates enabled is handy for <code>PATCH</code> and <code>MINOR</code> but risky on <code>MAJOR</code> strategies.  Automatic updates for any <code>_DEV</code> version are dangerous as these can hold very bad bugs. Only use this for test servers.</p> <p>Disabling automated updates still allows for the use of <code>/q update</code>! You won't have to go to Spigot ever again </p>"},{"location":"User-Documentation/Updating-and-Backups/#setup-of-the-auto-updater","title":"Setup of the Auto-Updater","text":"<p>Read the update section to correctly setup the Auto-Updater. </p> <p>After updating to a new version (manually or automatically), configuration files and database will be automatically backed up to a zip file to prevent losing your work due to errors. Then, configuration will be converted to a new version. At the end, the localization will be updated with new languages, and a changelog.txt file will be created.</p> <p>If there were any unexpected errors during an update process, download the previous version, restore your configs from backup, and disable autoupdating feature. Don't forget to post your error as an Issue on GitHub so it can be fixed!</p> <p>When you enter the server, BetonQuest will alert you about changes and ask you to read changelog.txt file located in plugin's main directory.</p>"},{"location":"User-Documentation/Updating-and-Backups/#updating-manually","title":"Updating manually","text":"<p>Configs update automatically when a new dev build has been installed but all comments in your configs will be lost due to Spigots limitations. We will make our own config system in BetonQuest 2.0. though so this will not last long. </p> <p>To keep your comments follow this guide: This is a manual update, so you will have to change some errors in your quests afterwards. If you already did this once and want to update to a newer dev build (using /q update) just check if the version has changed by clicking the link in the third step. If it did not your comments are safe.</p> <ul> <li>Make a backup  </li> <li>Stop server.</li> <li>Open up /plugins/BetonQuest/config.yml</li> <li>Set the version: option to the one that you see here: This might change so please look it up each time you update!    https://github.com/BetonQuest/BetonQuest/blob/main/src/main/resources/config.yml</li> <li>Update BetonQuest.jar</li> <li>Start Server</li> <li>Fix all issues (we changed the stuff down below.)</li> </ul>"},{"location":"User-Documentation/Updating-and-Backups/#backups","title":"Backups","text":"<p>Every time the plugin updates the configuration, a backup will be created.  This is especially important if a development version is being used because they may be unstable.  A backup can also be created manually by running /q backup command.  It needs to be run from the console on an empty server because it heavily uses the database.</p> <p>You can find your backups in backup directory in the plugin's folder. They are .zip files containing all your configuration and database-backup.yml file, which - as the name says - is your database backup. To replace your configuration with an older backup, delete all the files (except backups and logs) and replace them with the files from .zip file.</p> <p>If you want your database loaded, place database-backup.yml file in plugin's directory. When the plugin sees this file while enabling, it will backup the current database and load all data from that file to the database.  A backup of the old database can be found in backups folder, so if you ever need to load it back, just rename it to database-backup.yml and place it back in main plugin's directory. Note that database-backup.yml file will be deleted after loading, so it does not replace your database on next plugin start.</p>"},{"location":"User-Documentation/Variables-List/","title":"Variables List","text":""},{"location":"User-Documentation/Variables-List/#custom-strings","title":"Custom Strings","text":"<p>It is possible to save multiple custom strings per player. This works by using the <code>variable</code> objective and the <code>variable</code> event. </p>"},{"location":"User-Documentation/Variables-List/#expose-conditions-to-3rd-party-plugins-condition","title":"Expose conditions to 3<sup>rd</sup> party plugins: <code>condition</code>","text":"<p>You can expose BetonQuest's conditions to 3<sup>rd</sup> party plugins by using the <code>condition</code> variable together with the  PAPI support. The variable will return <code>true</code> or <code>false</code> by default. If you add <code>papiMode</code> to the instruction it will return <code>yes</code> or <code>no</code>.   You can translate the papiMode's result by changing the values of <code>condition_variable_met</code> <code>condition_variable_not_met</code>in  the messages.yml config. <pre><code>%condition.myCondition%\n%condition.myCondition.papiMode%\n</code></pre></p>"},{"location":"User-Documentation/Variables-List/#global-point-globalpoint","title":"Global point: <code>globalpoint</code>","text":"<p>Works the same as normal point variable but instead of displaying points from a players category it displays points in a global, player independent category.</p> <p>Example</p> <p><code>%globalpoint.global_knownusers.left:100%</code></p>"},{"location":"User-Documentation/Variables-List/#item-item","title":"Item: <code>item</code>","text":"<p>With this variable you can display amount of specific items in player's inventory or a number needed to reach specific amount. The first argument is the name of an item (as defined in items.yml) and the second one is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <p>Example</p> <p><code>%item.stick.amount%</code></p>"},{"location":"User-Documentation/Variables-List/#location-location","title":"Location: <code>location</code>","text":"<p>This variable resolves to all aspects of the player's location. The x, y and z coordinates, the world name, the yaw and pitch (head rotation). There are also modes for Betons Unified Location Formatting (ULF from now on) which means that this variable can also be used in events, conditions etc. If you just specify <code>%location%</code> the variables will resolve to a ULF with yaw and pitch. You can add two options to that base, one will give back parts of the ULF and the other will set to how many decimal places  the variable will resolve. </p> <p>Example</p> <pre><code>%location%           # -&gt; 325;121;814;myWorldName;12;6\n%location.xyz%       # -&gt; 325 121 814 \n%location.x%         # -&gt; 325\n%location.y%         # -&gt; 121\n%location.z%         # -&gt; 814\n%location.yaw%       # -&gt; 12\n%location.pitch%     # -&gt; 6\n%location.world%     # -&gt; myWorldName\n%location.ulfShort%  # -&gt; 325;121;814;myWorldName\n%location.ulfLong%   # -&gt; 325;121;814;myWorldName;12;6\n\n%location.x.2%       # -&gt; 325.16\n%location.ulfLong.5% # -&gt; 325.54268;121.32186;814.45824;myWorldName;12.0;6.0\n</code></pre>"},{"location":"User-Documentation/Variables-List/#calculate-mathematical-expression-mathcalc","title":"Calculate mathematical expression: <code>math.calc</code>","text":"<p>This variable allows you to perform a calculation based on other variables (for example point or objective variables) and resolves to the result of the specified calculation. The variable always starts with <code>math.calc:</code>, followed by the calculation which should be calculated. Supported operations are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and  <code>^</code>. You can use <code>( )</code> and <code>[ ]</code> braces and also calculate absolute values with <code>| |</code>. But be careful, don't use absolute values in the command event as it splits the commands at every <code>|</code> and don't nest them without parenthesis (<code>|4*|3-5||</code> wont work, but <code>|4*(|3-5|)|</code> does). Additionally, you can use the round operator <code>~</code> to round everything left of it to the number of decimal digits given on the right. So <code>4+0.35~1</code> will produce <code>4.4</code> and <code>4.2~0</code> will produce <code>4</code>.</p> <p>To use variables in the calculation you have two options: First just write the variable, but  without <code>%</code> around them; In cases where this doesn't work, e.g. if the variable contains mathematical operators, you can surround it with curly braces <code>{ }</code>. Inside the curly braces you have to escape with <code>\\</code>, so to have a <code>\\</code> in your variable you need to write <code>\\\\</code>, to have a <code>}</code> inside your variable you need to write <code>\\}</code>.</p> <p>Example</p> <pre><code>%math.calc:100*(15-point.reputation.amount)%\n%math.calc:objective.kill_zombies.left/objective.kill_zombies.total*100~2%\n%math.calc:-{ph.myplugin_stragee+placeholder)%\n</code></pre>"},{"location":"User-Documentation/Variables-List/#npc-npc","title":"NPC: <code>npc</code>","text":"<p>It's a very simple variable. It's replaced by the name of the NPC in player's language.</p> <p>Example</p> <p><code>%npc%</code></p>"},{"location":"User-Documentation/Variables-List/#objective-objective","title":"Objective: <code>objective</code>","text":"<p>Using this variable you can display a property of an objective. The first argument is an ID of the objective as defined in objectives.yml (not the type). Make sure that the player has this objective active or it will be replaced with nothing (\"\"). Second argument is the name of a property you want to display. All properties are described in \"Objectives List\" chapter.</p> <p>Example</p> <p><code>%objective.kill_zombies.left%</code></p>"},{"location":"User-Documentation/Variables-List/#player-player","title":"Player: <code>player</code>","text":"<p>This variable will be replaced with the name of the player. If you add <code>display</code> argument, it will use display name instead of real name.</p> <p>Example</p> <p><code>%player.display%</code></p>"},{"location":"User-Documentation/Variables-List/#point-point","title":"Point: <code>point</code>","text":"<p>This variable displays the amount of points you have in some category or amount of points you need to have to reach a number. The first argument is the name of a category and the second argument is either <code>amount</code> or <code>left:x</code>, where <code>x</code> is a number.</p> <p>Example</p> <p><code>%point.reputation.left:15%</code></p>"},{"location":"User-Documentation/Variables-List/#version-version","title":"Version: <code>version</code>","text":"<p>This variable displays the version of the plugin. You can optionally add the name of the plugin as an argument to display version of another plugin.</p> <p>Example</p> <p><code>%version.Citizens%</code></p>"}]}