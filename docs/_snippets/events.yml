cancel: |-
  ## Cancel a quest: `cancel`

  This event works in the same way as a [quest canceler in the backpack](Documentation/Features/Quest-Cancelers.md).

  Running this event is equal to the player canceling a quest using the backpack.
  The only argument is the identifier of a quest canceler, as defined in the `cancel` section.

  ```YAML title="Example"
  cancelQuest: "cancel woodQuest"
  ```

notify: |-
  ## Sending Notifications: `notify`

  You can send notifications using the `notify` event. This is how to use it:

  !!! warning
      All colons (`:`) in the message part of the notification need to be escaped, including those inside variables.
      One backslash (`\`) is required when using no quoting at all (`...`) or single quotes
      (`'...'`). Two backslashes are required (`\\`) when using double quotes (`"..."`).  
      You also need to escape the backslash itself, if you use double quotes for some things like `\n`.

      Examples:<br>
      `eventName: notify Peter:Heya %player%!` :arrow_right: `eventName: notify Peter{++\++}:Heya %player%!`<br>
      `eventName: {=='==}notify Peter:Heya %player%!{=='==}` :arrow_right: `eventName: {=='==}notify Peter{++\++}:Heya %player%!{=='==}`<br>
      `eventName: {=="==}notify Peter:Heya %player%!{=="==}` :arrow_right: `eventName: {=="==}notify Peter{++\\++}:Heya %player%!{=="==}`<br>
      `otherEvent: notify You own %math.calc:5% fish!` :arrow_right: `otherEvent: You own %math.calc{++\++}:5% fish!`<br>
      `newLine: {=="==}notify Some multiline \n message{=="==}` :arrow_right: `newLine: {=="==}notify Some multiline {++\++}\n message{=="==}`

  | Parameter                  | Syntax                | Default Value          | Explanation                                                                                                                      |
  |----------------------------|-----------------------|------------------------|----------------------------------------------------------------------------------------------------------------------------------|
  | _message_                  | Any text with spaces! | :octicons-x-circle-16: | The message that will be displayed. Supports variables and translations. *Must be first*                                         |
  | _category_                 | `category:info`       | None                   | Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. |
  | _io_                       | `io:bossbar`          | io:chat                | Any NotifyIO Overrides the "category". settings.                                                                                 |
  | _any io specific settings_ | `setting:value`       | None                   | Some notifyIO's provide specific settings. Can be used multiple times. Overrides the "category" settings.                        |

  ### Usage Examples

  Check out the notify IO specific options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend.
  Advanced users may also use [Notify Categories](Documentation/Visual-Effects/Notifications/Notification-IO's-&-Categories.md#categories) to make their lives easier.
  ```YAML
  #The simplest of all notify events. Just a chat message:
  customEvent: "notify Hello %player%!"  

  #It's the same as this one since 'chat' is the default IO.
  theSame: "notify Hello %player%! io:chat"

  #This one displays a title and a subtitle:
  myTitle: "notify This is a title.\\nThis is a subtitle. io:title"

  #Plays a sound:
  mySound: "notify io:sound sound:x.y.z"

  #This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option:
  myBar: "notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use"

  #Some events with categories.
  myEvent1: "notify This is a custom message! category:info"
  myEvent2: "notify This is a custom message! category:firstChoice,secondChoice"

  #You can also override category settings:
  myEvent3: "notify Another message! category:info io:advancement frame:challenge"

  #Use multiple languages:
  multilanguage: "notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!"
  ```
  ### Translations

  Notifications can be translated with this syntax: 
  ```YAML
  example: "notify {en} ABC {de} DEF"
  ```
  The value in `{}` is a language key from messages.yml. Any text after the language key until the next language key
  belongs to the specified language. There must be a space between the language key and the message.
  In this example, english users would see `ABC` and german ones would see `DEF`.


  ### Broadcasts
  **persistent**, **static**
  
  You can broadcast notifications to all players on the server using the `notifyall` event. It works just like the notify event.
  Variables are resolved for each online player, not for the player the event is executed for.

  ```YAML title="Example"
  events:
    announceDungeon: "notifyall A new dungeon has opened!"
  ```
